diff --git a/src/pocketmine/Player.php b/src/pocketmine/Player.php
index 5f2e671..58b34bf 100644
--- a/src/pocketmine/Player.php
+++ b/src/pocketmine/Player.php
@@ -69,7 +69,6 @@ use pocketmine\event\TranslationContainer;
 use pocketmine\inventory\BaseTransaction;
 use pocketmine\inventory\BigShapedRecipe;
 use pocketmine\inventory\BigShapelessRecipe;
-use pocketmine\inventory\CraftingTransactionGroup;
 use pocketmine\inventory\FurnaceInventory;
 use pocketmine\inventory\Inventory;
 use pocketmine\inventory\InventoryHolder;
@@ -263,7 +262,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 	}
 
 	public function getClientSecret(){
-		return $this->clientSecretId;
+		return $this->clientSecret;
 	}
 
 	public function isBanned(){
@@ -446,8 +445,11 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 	 * @return bool
 	 */
 	public function hasPermission($name){
+		if(is_null($this->perm)) {
+			return false;
+		}
 		return $this->perm->hasPermission($name);
-	}
+ 	}
 
 	/**
 	 * @param Plugin $plugin
@@ -575,10 +577,10 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 		}
 	}
 
-	public function setSkin($str, $isSlim = false){
-		parent::setSkin($str, $isSlim);
+	public function setSkin($str, $isSlim = false, $skinTransparency = false){
+		parent::setSkin($str, $isSlim, $skinTransparency);
 		if($this->spawned){
-			$this->server->updatePlayerListData($this->getUniqueId(), $this->getId(), $this->getDisplayName(), $isSlim, $str);
+			$this->server->updatePlayerListData($this->getUniqueId(), $this->getId(), $this->getDisplayName(), $isSlim, $str, null, $skinTransparency);
 		}
 	}
 
@@ -713,7 +715,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 			}
 
 			unset($this->loadQueue[$index]);
-			$this->level->requestChunk($X, $Z, $this, LevelProvider::ORDER_ZXY);
+			$this->level->requestChunk($X, $Z, $this);
 		}
 
 		if($this->chunkLoadCount >= $this->spawnThreshold and $this->spawned === false and $this->teleportPosition === null){
@@ -1706,6 +1708,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 
 		$pk = new StartGamePacket();
 		$pk->seed = -1;
+		$pk->dimension = 0;
 		$pk->x = $this->x;
 		$pk->y = $this->y;
 		$pk->z = $this->z;
@@ -1809,7 +1812,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 				$this->setNameTag($this->username);
 				$this->iusername = strtolower($this->username);
 
-				if(count($this->server->getOnlinePlayers()) > $this->server->getMaxPlayers() and $this->kick("disconnectionScreen.serverFull", false)){
+				if(count($this->server->getOnlinePlayers()) >= $this->server->getMaxPlayers() and $this->kick("disconnectionScreen.serverFull", false)){
 					break;
 				}
 
@@ -1862,7 +1865,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 
 					break;
 				}
-				
+
 				if(strlen($packet->skin) !== 64 * 32 * 4 and strlen($packet->skin) !== 64 * 64 * 4){
 					$this->close("", "disconnectionScreen.invalidSkin");
 					break;
@@ -2000,7 +2003,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 						//TODO: Implement adventure mode checks
 						if($this->level->useItemOn($blockVector, $item, $packet->face, $packet->fx, $packet->fy, $packet->fz, $this)){
 							if(!$item->deepEquals($oldItem) or $item->getCount() !== $oldItem->getCount()){
-								$this->inventory->setItemInHand($item, $this);
+								$this->inventory->setItemInHand($item);
 								$this->inventory->sendHeldItem($this->hasSpawned);
 							}
 							break;
@@ -2181,7 +2184,6 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 							$pk = new EntityEventPacket();
 							$pk->eid = $this->getId();
 							$pk->event = EntityEventPacket::USE_ITEM;
-							$pk;
 							$this->dataPacket($pk);
 							Server::broadcastPacket($this->getViewers(), $pk);
 
@@ -2300,7 +2302,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 				if($this->canInteract($vector->add(0.5, 0.5, 0.5), $this->isCreative() ? 13 : 6) and $this->level->useBreakOn($vector, $item, $this)){
 					if($this->isSurvival()){
 						if(!$item->deepEquals($oldItem) or $item->getCount() !== $oldItem->getCount()){
-							$this->inventory->setItemInHand($item, $this);
+							$this->inventory->setItemInHand($item);
 							$this->inventory->sendHeldItem($this->hasSpawned);
 						}
 					}
@@ -2513,7 +2515,6 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 							$pk = new EntityEventPacket();
 							$pk->eid = $this->getId();
 							$pk->event = EntityEventPacket::USE_ITEM;
-							$pk;
 							$this->dataPacket($pk);
 							Server::broadcastPacket($this->getViewers(), $pk);
 
@@ -2525,12 +2526,12 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 							$this->heal($ev->getAmount(), $ev);
 
 							--$slot->count;
-							$this->inventory->setItemInHand($slot, $this);
+							$this->inventory->setItemInHand($slot);
 							if($slot->getId() === Item::MUSHROOM_STEW or $slot->getId() === Item::BEETROOT_SOUP){
 								$this->inventory->addItem(Item::get(Item::BOWL, 0, 1));
 							}elseif($slot->getId() === Item::RAW_FISH and $slot->getDamage() === 3){ //Pufferfish
-								$this->addEffect(Effect::getEffect(Effect::HUNGER)->setAmplifier(2)->setDuration(15 * 20));
-								//$this->addEffect(Effect::getEffect(Effect::NAUSEA)->setAmplifier(1)->setDuration(15 * 20));
+								//$this->addEffect(Effect::getEffect(Effect::HUNGER)->setAmplifier(2)->setDuration(15 * 20));
+								$this->addEffect(Effect::getEffect(Effect::NAUSEA)->setAmplifier(1)->setDuration(15 * 20));
 								$this->addEffect(Effect::getEffect(Effect::POISON)->setAmplifier(3)->setDuration(60 * 20));
 							}
 						}
@@ -2549,7 +2550,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 					break;
 				}
 
-				$this->inventory->setItemInHand(Item::get(Item::AIR, 0, 1), $this);
+				$this->inventory->setItemInHand(Item::get(Item::AIR, 0, 1));
 				$motion = $this->getDirectionVector()->multiply(0.4);
 
 				$this->level->dropItem($this->add(0, 1.3, 0), $item, $motion, 40);
@@ -2718,7 +2719,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 					break;
 				}
 
-				$this->server->getPluginManager()->callEvent($ev = new CraftItemEvent($ingredients, $recipe));
+				$this->server->getPluginManager()->callEvent($ev = new CraftItemEvent($this, $ingredients, $recipe));
 
 				if($ev->isCancelled()){
 					$this->inventory->sendContents($this);
@@ -2865,7 +2866,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 				}
 
 				break;
-			case ProtocolInfo::TILE_ENTITY_DATA_PACKET:
+			case ProtocolInfo::BLOCK_ENTITY_DATA_PACKET:
 				if($this->spawned === false or $this->blocked === true or !$this->isAlive()){
 					break;
 				}
@@ -2984,7 +2985,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 		}
 		$this->dataPacket($pk);
 	}
-	
+
 	public function sendPopup($message, $subtitle = ""){
 		$pk = new TextPacket();
 		$pk->type = TextPacket::TYPE_POPUP;
@@ -3016,7 +3017,7 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 				$pk->message = $reason;
 				$this->directDataPacket($pk);
 			}
-			
+
 			$this->connected = false;
 			if(strlen($this->getName()) > 0){
 				$this->server->getPluginManager()->callEvent($ev = new PlayerQuitEvent($this, $message, true));
@@ -3567,7 +3568,6 @@ class Player extends Human implements CommandSender, InventoryHolder, ChunkLoade
 		$batch = new BatchPacket();
 		$batch->payload = zlib_encode(Binary::writeInt(strlen($pk->getBuffer())) . $pk->getBuffer(), ZLIB_ENCODING_DEFLATE, Server::getInstance()->networkCompressionLevel);
 
-		$batch;
 		$batch->encode();
 		$batch->isEncoded = true;
 		return $batch;
diff --git a/src/pocketmine/PocketMine.php b/src/pocketmine/PocketMine.php
index 98b4e33..4f11447 100644
--- a/src/pocketmine/PocketMine.php
+++ b/src/pocketmine/PocketMine.php
@@ -74,9 +74,9 @@ namespace pocketmine {
 
 	const VERSION = "1.6dev";
 	const API_VERSION = "1.13.0";
-	const CODENAME = "[REDACTED]";
-	const MINECRAFT_VERSION = "v0.12.1 alpha";
-	const MINECRAFT_VERSION_NETWORK = "0.12.1";
+	const CODENAME = "PocketMine-0.13.0";
+	const MINECRAFT_VERSION = "v0.13.0 alpha";
+	const MINECRAFT_VERSION_NETWORK = "0.13.0";
 
 	/*
 	 * Startup code. Do not look at it, it may harm you.
@@ -88,7 +88,7 @@ namespace pocketmine {
 	if(\Phar::running(true) !== ""){
 		@define("pocketmine\\PATH", \Phar::running(true) . "/");
 	}else{
-		@define("pocketmine\\PATH", \getcwd() . DIRECTORY_SEPARATOR);
+		@define("pocketmine\\PATH", getcwd() . DIRECTORY_SEPARATOR);
 	}
 
 	if(!extension_loaded("pthreads")){
@@ -124,8 +124,8 @@ namespace pocketmine {
 
 	$opts = getopt("", ["data:", "plugins:", "no-wizard", "enable-profiler"]);
 
-	define("pocketmine\\DATA", isset($opts["data"]) ? $opts["data"] . DIRECTORY_SEPARATOR : \getcwd() . DIRECTORY_SEPARATOR);
-	define("pocketmine\\PLUGIN_PATH", isset($opts["plugins"]) ? $opts["plugins"] . DIRECTORY_SEPARATOR : \getcwd() . DIRECTORY_SEPARATOR . "plugins" . DIRECTORY_SEPARATOR);
+	define("pocketmine\\DATA", isset($opts["data"]) ? $opts["data"] . DIRECTORY_SEPARATOR : getcwd() . DIRECTORY_SEPARATOR);
+	define("pocketmine\\PLUGIN_PATH", isset($opts["plugins"]) ? $opts["plugins"] . DIRECTORY_SEPARATOR : getcwd() . DIRECTORY_SEPARATOR . "plugins" . DIRECTORY_SEPARATOR);
 
 	Terminal::init();
 
@@ -297,7 +297,7 @@ namespace pocketmine {
 
 	if(isset($opts["enable-profiler"])){
 		if(function_exists("profiler_enable")){
-			\profiler_enable();
+			profiler_enable();
 			$logger->notice("Execution is being profiled");
 		}else{
 			$logger->notice("No profiler found. Please install https://github.com/krakjoe/profiler");
diff --git a/src/pocketmine/Server.php b/src/pocketmine/Server.php
index 2612195..bcf430c 100644
--- a/src/pocketmine/Server.php
+++ b/src/pocketmine/Server.php
@@ -95,6 +95,7 @@ use pocketmine\network\SourceInterface;
 use pocketmine\network\upnp\UPnP;
 use pocketmine\permission\BanList;
 use pocketmine\permission\DefaultPermissions;
+use pocketmine\player\PlayerListEntry;
 use pocketmine\plugin\PharPluginLoader;
 use pocketmine\plugin\Plugin;
 use pocketmine\plugin\PluginLoadOrder;
@@ -1745,7 +1746,7 @@ class Server{
 
 		return count($recipients);
 	}
-	
+
 	/**
 	 * @param string        $popup
 	 * @param Player[]|null $recipients
@@ -1763,7 +1764,7 @@ class Server{
 				}
 			}
 		}
-		
+
 		/** @var Player[] $recipients */
 		foreach($recipients as $recipient){
 			$recipient->sendPopup($popup);
@@ -1852,7 +1853,7 @@ class Server{
 			$task = new CompressBatchedTask($str, $targets, $this->networkCompressionLevel, $channel);
 			$this->getScheduler()->scheduleAsyncTask($task);
 		}else{
-			$this->broadcastPacketsCallback(zlib_encode($str, ZLIB_ENCODING_DEFLATE, $this->networkCompressionLevel), $targets, $channel);
+			$this->broadcastPacketsCallback(zlib_encode($str, ZLIB_ENCODING_DEFLATE, $this->networkCompressionLevel), $targets);
 		}
 
 		Timings::$playerNetworkTimer->stopTiming();
@@ -2257,22 +2258,33 @@ class Server{
 
 			$pk = new PlayerListPacket();
 			$pk->type = PlayerListPacket::TYPE_REMOVE;
-			$pk->entries[] = [$player->getUniqueId()];
+			$entry = new PlayerListEntry;
+			$entry->uuid = $player->getUniqueId();
+			$pk->entries[] = $entry;
 			Server::broadcastPacket($this->playerList, $pk);
 		}
 	}
 
-	public function updatePlayerListData(UUID $uuid, $entityId, $name, $isSlim, $skinData, array $players = null){
+	public function updatePlayerListData(UUID $uuid, $entityId, $name, $isSlim, $skinData, array $players = null, $skinTransparency = false){
 		$pk = new PlayerListPacket();
 		$pk->type = PlayerListPacket::TYPE_ADD;
-		$pk->entries[] = [$uuid, $entityId, $name, $isSlim, $skinData];
+		$entry = new PlayerListEntry;
+		$entry->uuid = $uuid;
+		$entry->entityId = $entityId;
+		$entry->name = $name;
+		$entry->isSlim = $isSlim;
+		$entry->skinData = $skinData;
+		$entry->transparency = $skinTransparency;
+		$pk->entries[] = $entry;
 		Server::broadcastPacket($players === null ? $this->playerList : $players, $pk);
 	}
 
 	public function removePlayerListData(UUID $uuid, array $players = null){
 		$pk = new PlayerListPacket();
 		$pk->type = PlayerListPacket::TYPE_REMOVE;
-		$pk->entries[] = [$uuid];
+		$entry = new PlayerListEntry;
+		$entry->uuid = $uuid;
+		$pk->entries[] = $entry;
 		Server::broadcastPacket($players === null ? $this->playerList : $players, $pk);
 	}
 
@@ -2280,7 +2292,14 @@ class Server{
 		$pk = new PlayerListPacket();
 		$pk->type = PlayerListPacket::TYPE_ADD;
 		foreach($this->playerList as $player){
-			$pk->entries[] = [$player->getUniqueId(), $player->getId(), $player->getDisplayName(), $player->isSkinSlim(), $player->getSkinData()];
+			$entry = new PlayerListEntry;
+			$entry->uuid = $player->getUniqueId();
+			$entry->entityId = $player->getId();
+			$entry->name = $player->getDisplayName();
+			$entry->isSlim = $player->isSkinSlim();
+			$entry->skinData = $player->getSkinData();
+			$entry->transparency = $player->isSkinTransparent();
+			$pk->entries[] = $entry;
 		}
 
 		$p->dataPacket($pk);
@@ -2410,7 +2429,7 @@ class Server{
 		}
 
 		$d = Utils::getRealMemoryUsage();
-		
+
 		$u = Utils::getMemoryUsage(true);
 		$usage = round(($u[0] / 1024) / 1024, 2) . "/" . round(($d[0] / 1024) / 1024, 2) . "/" . round(($u[1] / 1024) / 1024, 2) . "/".round(($u[2] / 1024) / 1024, 2)." MB @ " . Utils::getThreadCount() . " threads";
 
diff --git a/src/pocketmine/block/AcaciaDoor.php b/src/pocketmine/block/AcaciaDoor.php
new file mode 100644
index 00000000..215741d
--- /dev/null
+++ b/src/pocketmine/block/AcaciaDoor.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class AcaciaDoor extends Door{
+
+	protected $id = self::ACACIA_DOOR_BLOCK;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Acacia Door Block";
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[Item::ACACIA_DOOR, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Andesite.php b/src/pocketmine/block/Andesite.php
new file mode 100644
index 00000000..11912db
--- /dev/null
+++ b/src/pocketmine/block/Andesite.php
@@ -0,0 +1,57 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class Andesite extends Solid{
+
+	protected $id = 1;
+
+	public function __construct($meta = 5){
+		$this->meta = $meta;
+	}
+
+	public function getHardness(){
+		return 1.5;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getName(){
+		return "Andesite";
+	}
+
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
+			return [
+				[$this->getDamage() === 0 ? Item::COBBLESTONE : Item::STONE, $this->getDamage(), 1],
+			];
+		}else{
+			return [];
+		}
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Anvil.php b/src/pocketmine/block/Anvil.php
index 4c3114b..73c2e6c 100644
--- a/src/pocketmine/block/Anvil.php
+++ b/src/pocketmine/block/Anvil.php
@@ -71,7 +71,7 @@ class Anvil extends Fallable{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[$this->id, 0, 1], //TODO break level
 			];
diff --git a/src/pocketmine/block/BirchDoor.php b/src/pocketmine/block/BirchDoor.php
new file mode 100644
index 00000000..131d70b
--- /dev/null
+++ b/src/pocketmine/block/BirchDoor.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class BirchDoor extends Door{
+
+	protected $id = self::BIRCH_DOOR_BLOCK;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Birch Door Block";
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[Item::BIRCH_DOOR, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Block.php b/src/pocketmine/block/Block.php
index 833eab7..2cb27b9 100644
--- a/src/pocketmine/block/Block.php
+++ b/src/pocketmine/block/Block.php
@@ -60,32 +60,45 @@ class Block extends Position implements Metadatable{
 	const STILL_LAVA = 11;
 	const SAND = 12;
 	const GRAVEL = 13;
+	
 	const GOLD_ORE = 14;
 	const IRON_ORE = 15;
 	const COAL_ORE = 16;
+	const LOG = 17;
+	
 	const WOOD = 17;
 	const TRUNK = 17;
-	const LOG = 17;
 	const LEAVES = 18;
 	const LEAVE = 18;
 	const SPONGE = 19;
 	const GLASS = 20;
 	const LAPIS_ORE = 21;
 	const LAPIS_BLOCK = 22;
+	
+	const DISPENSER = 23;
 
 	const SANDSTONE = 24;
+	
+	const NOTEBLOCK = 24;
 
 	const BED_BLOCK = 26;
+	
+	const POWERED_RAIL = 27;
+	const DETECTOR_RAIL = 27;
+	const STICKY_PISTON = 27;
 
 
 	const COBWEB = 30;
 	const TALL_GRASS = 31;
 	const BUSH = 32;
 	const DEAD_BUSH = 32;
+	const PISTON = 33;
+	const PISTON_HEAD = 34;
 	const WOOL = 35;
+	const PISTON_EXTENSION = 35;
 	const DANDELION = 37;
-	const ROSE = 38;
 	const POPPY = 38;
+	const ROSE = 38;
 	const RED_FLOWER = 38;
 	const BROWN_MUSHROOM = 39;
 	const RED_MUSHROOM = 40;
@@ -110,6 +123,8 @@ class Block extends Position implements Metadatable{
 	const OAK_WOOD_STAIRS = 53;
 	const OAK_WOODEN_STAIRS = 53;
 	const CHEST = 54;
+	
+	const REDSTONE_WIRE = 55;
 
 	const DIAMOND_ORE = 56;
 	const DIAMOND_BLOCK = 57;
@@ -122,19 +137,26 @@ class Block extends Position implements Metadatable{
 	const LIT_FURNACE = 62;
 	const SIGN_POST = 63;
 	const DOOR_BLOCK = 64;
-	const WOODEN_DOOR_BLOCK = 64;
+	const OAK_DOOR_BLOCK = 64;
 	const WOOD_DOOR_BLOCK = 64;
 	const LADDER = 65;
+	const RAIL = 66;
 
 	const COBBLE_STAIRS = 67;
 	const COBBLESTONE_STAIRS = 67;
 	const WALL_SIGN = 68;
-
+	
+	const LEVER = 69;
+	const STONE_PRESSURE_PLATE = 70;
 	const IRON_DOOR_BLOCK = 71;
-
+	const WOODEN_PRESSURE_PLATE = 72;
 	const REDSTONE_ORE = 73;
 	const GLOWING_REDSTONE_ORE = 74;
 	const LIT_REDSTONE_ORE = 74;
+	const UNLIT_REDSTONE_TORCH = 75;
+	const LIT_REDSTONE_TORCH = 76;
+	const REDSTONE_TORCH = 76;
+	const STONE_BUTTON = 77;
 
 	const SNOW = 78;
 	const SNOW_LAYER = 78;
@@ -144,6 +166,8 @@ class Block extends Position implements Metadatable{
 	const CLAY_BLOCK = 82;
 	const REEDS = 83;
 	const SUGARCANE_BLOCK = 83;
+	
+	const JUKEBOX = 83;
 
 	const FENCE = 85;
 	const PUMPKIN = 86;
@@ -156,13 +180,21 @@ class Block extends Position implements Metadatable{
 	const LIT_PUMPKIN = 91;
 	const JACK_O_LANTERN = 91;
 	const CAKE_BLOCK = 92;
+	
+	const UNPOWERED_REPEATER = 93;
+	const POWERED_REPEATER = 94;
+	
+	const STAINED_GLASS = 95; //INVISIBLE BEDROCK ID
 
 	const TRAPDOOR = 96;
-	const WOODEN_TRAPDOOR = 96;
-	const WOOD_TRAPDOOR = 96;
+	
+	const MONSTER_EGG = 97;
 
 	const STONE_BRICKS = 98;
 	const STONE_BRICK = 98;
+	
+	const BROWN_MUSHROOM_BLOCK = 99;
+	const RED_MUSHROOM_BLOCK = 100;
 
 	const IRON_BAR = 101;
 	const IRON_BARS = 101;
@@ -181,18 +213,37 @@ class Block extends Position implements Metadatable{
 	const LILY_PAD = 111;
 	const NETHER_BRICKS = 112;
 	const NETHER_BRICK_BLOCK = 112;
-
+	const NETHER_BRICK_FENCE = 113;
 	const NETHER_BRICKS_STAIRS = 114;
+	const NETHER_WART_BLOCK = 115;
 
 	const ENCHANTING_TABLE = 116;
 	const ENCHANT_TABLE = 116;
 	const ENCHANTMENT_TABLE = 116;
+	const BREWING_STAND_BLOCK = 117;
+	
+	const CAULDRON = 118;
+	const END_PORTAL = 119;
 
 	const END_PORTAL_FRAME = 120;
 	const END_STONE = 121;
+	const DRAGON_EGG = 122;
+	
+	const REDSTONE_LAMP = 123;
+	const LIT_REDSTONE_LAMP = 124;
+	
+	//const DOUBLE_WOODEN_SLAB = 125;
+	//const WOODEN_SLAB = 126;
+	const COCOA = 127;
+	const COCOA_BEANS = 127;
 
 	const SANDSTONE_STAIRS = 128;
 	const EMERALD_ORE = 129;
+	
+	const ENDERCHEST = 130;
+	
+	const TRIPWIRE_HOOK = 131;
+	const TRIPWIRE = 132;
 
 	const EMERALD_BLOCK = 133;
 	const SPRUCE_WOOD_STAIRS = 134;
@@ -201,18 +252,39 @@ class Block extends Position implements Metadatable{
 	const BIRCH_WOODEN_STAIRS = 135;
 	const JUNGLE_WOOD_STAIRS = 136;
 	const JUNGLE_WOODEN_STAIRS = 136;
+	
+	const COMMAND_BLOCK = 136;
+	const BEACON = 136;
 
 	const COBBLE_WALL = 139;
 	const STONE_WALL = 139;
 	const COBBLESTONE_WALL = 139;
 
+	const FLOWER_POT_BLOCK = 140;
 	const CARROT_BLOCK = 141;
 	const POTATO_BLOCK = 142;
 
+	const WOODEN_BUTTON = 143;
+	
+	const SKULL_BLOCK = 144;
+	const HEAD_BLOCK = 144;
+	const MOB_HEAD_BLOCK = 144;
+
 	const ANVIL = 145;
+	const TRAPPED_CHEST = 146;
+	const LIGHT_WEIGHTED_PRESSURE_PLATE = 147;
+	const HEAVY_WEIGHTED_PRESSURE_PLATE = 148;
+	const UNPOWERED_COMPARATOR = 149;
+	const POWERED_COMPARATOR = 150;
+	const DAYLIGHT_DETECTOR = 151;
 
 	const REDSTONE_BLOCK = 152;
-
+	
+	const NETHER_QUARTZ_ORE = 153;
+	const QUARTZ_ORE = 153;
+	
+	const HOPPER = 154;
+	
 	const QUARTZ_BLOCK = 155;
 	const QUARTZ_STAIRS = 156;
 	const DOUBLE_WOOD_SLAB = 157;
@@ -225,6 +297,8 @@ class Block extends Position implements Metadatable{
 	const WOODEN_SLABS = 158;
 	const STAINED_CLAY = 159;
 	const STAINED_HARDENED_CLAY = 159;
+	
+	const STAINED_GLASS_PANE = 160;
 
 	const LEAVES2 = 161;
 	const LEAVE2 = 161;
@@ -235,19 +309,42 @@ class Block extends Position implements Metadatable{
 	const ACACIA_WOODEN_STAIRS = 163;
 	const DARK_OAK_WOOD_STAIRS = 164;
 	const DARK_OAK_WOODEN_STAIRS = 164;
+	
+	const SLIME_BLOCK = 165;
+	const SLIMEBLOCK = 165;
+	const BARRIER = 166;
+	const IRON_TRAPDOOR = 167;
+	const PRISMARINE = 168;
+	const SEA_LANTERN = 169;
 
 	const HAY_BALE = 170;
 	const CARPET = 171;
 	const HARDENED_CLAY = 172;
 	const COAL_BLOCK = 173;
+	const PACKED_ICE = 174;
 
 	const DOUBLE_PLANT = 175;
+	const STANDING_BANNER = 176;
+	const WALL_BANNER = 177;
+	
+	const DAYLIGHT_DETECTOR_INVERTED = 178;
+	
+	const RED_SANDSTONE = 179;
+	const RED_SANDSTONE_STAIRS = 180;
+	const DOUBLE_STONE_SLAB2 = 181;
+	const STONE_SLAB2 = 182;
 
 	const FENCE_GATE_SPRUCE = 183;
 	const FENCE_GATE_BIRCH = 184;
 	const FENCE_GATE_JUNGLE = 185;
 	const FENCE_GATE_DARK_OAK = 186;
 	const FENCE_GATE_ACACIA = 187;
+	
+	const SPRUCE_DOOR_BLOCK = 193;
+	const BIRCH_DOOR_BLOCK = 194;
+	const JUNGLE_DOOR_BLOCK = 195;
+	const ACACIA_DOOR_BLOCK = 196;
+	const DARK_OAK_DOOR_BLOCK = 197;
 
 	const GRASS_PATH = 198;
 
@@ -256,6 +353,7 @@ class Block extends Position implements Metadatable{
 	const STONECUTTER = 245;
 	const GLOWING_OBSIDIAN = 246;
 	const NETHER_REACTOR = 247;
+	const RESERVED = 255;
 
 	/** @var \SplFixedArray */
 	public static $list = null;
@@ -314,6 +412,12 @@ class Block extends Position implements Metadatable{
 			self::$solid = new \SplFixedArray(256);
 			self::$hardness = new \SplFixedArray(256);
 			self::$transparent = new \SplFixedArray(256);
+/***************************************************************************************************\
+|------------------------------->>>> Location of // is important!! <<<<-----------------------------|
+|			// <-- this level of indentation means that it is not yet in pocketmine     |
+|		// <-- This level of indentation means the class is not yet made                    |
+|------------------------------->>>> Location of // is important!! <<<<-----------------------------|
+\***************************************************************************************************/
 			self::$list[self::AIR] = Air::class;
 			self::$list[self::STONE] = Stone::class;
 			self::$list[self::GRASS] = Grass::class;
@@ -337,12 +441,20 @@ class Block extends Position implements Metadatable{
 			self::$list[self::GLASS] = Glass::class;
 			self::$list[self::LAPIS_ORE] = LapisOre::class;
 			self::$list[self::LAPIS_BLOCK] = Lapis::class;
+			//self::$list[self::DISPENSER] = Dispenser::class;
 			self::$list[self::SANDSTONE] = Sandstone::class;
+		//	self::$list[self::NOTEBLOCK] = Noteblock::class;
 			self::$list[self::BED_BLOCK] = Bed::class;
+			self::$list[self::POWERED_RAIL] = PoweredRail::class;
+		//	self::$list[self::DETECTOR_RAIL] = DetectorRail::class;
+			//self::$list[self::STICKY_PISTON] = StickyPiston::class;
 			self::$list[self::COBWEB] = Cobweb::class;
 			self::$list[self::TALL_GRASS] = TallGrass::class;
 			self::$list[self::DEAD_BUSH] = DeadBush::class;
+			//self::$list[self::PISTON] = Piston::class;
+			//self::$list[self::PISTON_HEAD] = PistonHead::class;
 			self::$list[self::WOOL] = Wool::class;
+			//self::$list[self::PISTON_EXTENSION] = PistonExtension::class;
 			self::$list[self::DANDELION] = Dandelion::class;
 			self::$list[self::RED_FLOWER] = Flower::class;
 			self::$list[self::BROWN_MUSHROOM] = BrownMushroom::class;
@@ -361,6 +473,7 @@ class Block extends Position implements Metadatable{
 			self::$list[self::MONSTER_SPAWNER] = MonsterSpawner::class;
 			self::$list[self::WOOD_STAIRS] = WoodStairs::class;
 			self::$list[self::CHEST] = Chest::class;
+		//	self::$list[self::REDSTONE_WIRE] = RedstoneWire::class;
 
 			self::$list[self::DIAMOND_ORE] = DiamondOre::class;
 			self::$list[self::DIAMOND_BLOCK] = Diamond::class;
@@ -370,15 +483,21 @@ class Block extends Position implements Metadatable{
 			self::$list[self::FURNACE] = Furnace::class;
 			self::$list[self::BURNING_FURNACE] = BurningFurnace::class;
 			self::$list[self::SIGN_POST] = SignPost::class;
-			self::$list[self::WOOD_DOOR_BLOCK] = WoodDoor::class;
+			self::$list[self::OAK_DOOR_BLOCK] = OakDoor::class;
 			self::$list[self::LADDER] = Ladder::class;
+			self::$list[self::RAIL] = Rail::class;
 
 			self::$list[self::COBBLESTONE_STAIRS] = CobblestoneStairs::class;
 			self::$list[self::WALL_SIGN] = WallSign::class;
+		//	self::$list[self::LEVER] = Lever::class;
+		//	self::$list[self::STONE_PRESSURE_PLATE] = StonePressurePlate::class;
 
 			self::$list[self::IRON_DOOR_BLOCK] = IronDoor::class;
 			self::$list[self::REDSTONE_ORE] = RedstoneOre::class;
 			self::$list[self::GLOWING_REDSTONE_ORE] = GlowingRedstoneOre::class;
+		//	self::$list[self::UNLIT_REDSTONE_TORCH] = UnlitRedstoneTorch::class;
+		//	self::$list[self::LIT_REDSTONE_TORCH] = LitRedstoneTorch::class;
+		//	self::$list[self::STONE_BUTTON] = StoneButton::class;
 
 			self::$list[self::SNOW_LAYER] = SnowLayer::class;
 			self::$list[self::ICE] = Ice::class;
@@ -386,6 +505,7 @@ class Block extends Position implements Metadatable{
 			self::$list[self::CACTUS] = Cactus::class;
 			self::$list[self::CLAY_BLOCK] = Clay::class;
 			self::$list[self::SUGARCANE_BLOCK] = Sugarcane::class;
+			//self::$list[self::JUKEBOX] = JukeBox::class;
 
 			self::$list[self::FENCE] = Fence::class;
 			self::$list[self::PUMPKIN] = Pumpkin::class;
@@ -395,10 +515,17 @@ class Block extends Position implements Metadatable{
 
 			self::$list[self::LIT_PUMPKIN] = LitPumpkin::class;
 			self::$list[self::CAKE_BLOCK] = Cake::class;
+			//self::$list[self::UNPOWERED_REPEATER] = UnpoweredRepeater::class;
+			//self::$list[self::POWERED_REPEATER] = PoweredRepeater::class;
+			//self::$list[self::STAINED_GLASS] = StainedGlass::class;
 
 			self::$list[self::TRAPDOOR] = Trapdoor::class;
+			//self::$list[self::MONSTER_EGG] = MonsterEgg::class;
 
 			self::$list[self::STONE_BRICKS] = StoneBricks::class;
+			
+			self::$list[self::RED_MUSHROOM_BLOCK] = RedMushroomBlock::class;
+			self::$list[self::BROWN_MUSHROOM_BLOCK] = BrownMushroomBlock::class;
 
 			self::$list[self::IRON_BARS] = IronBars::class;
 			self::$list[self::GLASS_PANE] = GlassPane::class;
@@ -413,51 +540,101 @@ class Block extends Position implements Metadatable{
 			self::$list[self::MYCELIUM] = Mycelium::class;
 			self::$list[self::WATER_LILY] = WaterLily::class;
 			self::$list[self::NETHER_BRICKS] = NetherBrick::class;
-
+			self::$list[self::NETHER_BRICK_FENCE] = NetherBrickFence::class;
 			self::$list[self::NETHER_BRICKS_STAIRS] = NetherBrickStairs::class;
+			self::$list[self::NETHER_WART_BLOCK] = NetherWart::class;
 
 			self::$list[self::ENCHANTING_TABLE] = EnchantingTable::class;
+			self::$list[self::BREWING_STAND_BLOCK] = BrewingStand::class;
+			//self::$list[self::CAULDRON] = Cauldron::class;
+			//self::$list[self::END_PORTAL] = EndPortal::class;
 
 			self::$list[self::END_PORTAL_FRAME] = EndPortalFrame::class;
 			self::$list[self::END_STONE] = EndStone::class;
+			//self::$list[self::DRAGON_EGG] = DragonEgg::class;
+			
+		//	self::$list[self::REDSTONE_LAMP] = RedstoneLamp::class;
+		//	self::$list[self::LIT_REDSTONE_LAMP] = LitRedstoneLamp::class;
+
+		//	self::$list[self::COCOA] = Cocoa::class;
+			
 			self::$list[self::SANDSTONE_STAIRS] = SandstoneStairs::class;
 			self::$list[self::EMERALD_ORE] = EmeraldOre::class;
+			
+			//self::$list[self::ENDERCHEST] = Enderchest::class;
+			
+		//	self::$list[self::TRIPWIRE_HOOK] = TripwireHook::class;
+		//	self::$list[self::TRIPWIRE] = Tripwire::class;
 
 			self::$list[self::EMERALD_BLOCK] = Emerald::class;
 			self::$list[self::SPRUCE_WOOD_STAIRS] = SpruceWoodStairs::class;
 			self::$list[self::BIRCH_WOOD_STAIRS] = BirchWoodStairs::class;
 			self::$list[self::JUNGLE_WOOD_STAIRS] = JungleWoodStairs::class;
+			
+			//self::$list[self::COMMAND_BLOCK] = CommandBlock::class;
+			//self::$list[self::BEACON] = Beacon::class;
+			
 			self::$list[self::STONE_WALL] = StoneWall::class;
 
+			self::$list[self::FLOWER_POT_BLOCK] = FlowerPot::class;
 			self::$list[self::CARROT_BLOCK] = Carrot::class;
 			self::$list[self::POTATO_BLOCK] = Potato::class;
+			self::$list[self::SKULL_BLOCK] = SkullBlock::class;
 			self::$list[self::ANVIL] = Anvil::class;
+			self::$list[self::TRAPPED_CHEST] = TrappedChest::class;
+		//	self::$list[self::LIGHT_WEIGHTED_PRESSURE_PLATE] = LightPlate::class;
+		//	self::$list[self::HEAVY_WEIGHTED_PRESSURE_PLATE] = HeavyPlate::class;
+			//self::$list[self::UNPOWERED_COMPARATOR] = UnpoweredComparator::class;
+			//self::$list[self::POWERED_COMPARATOR] = PoweredComparator::class;
+		//	self::$list[self::DAYLIGHT_DETECTOR] = DaylightDetector::class;
 
 			self::$list[self::REDSTONE_BLOCK] = Redstone::class;
 
+			self::$list[self::QUARTZ_ORE] = QuartzOre::class;
+			//self::$list[self::HOPPER] = Hopper::class;
 			self::$list[self::QUARTZ_BLOCK] = Quartz::class;
 			self::$list[self::QUARTZ_STAIRS] = QuartzStairs::class;
 			self::$list[self::DOUBLE_WOOD_SLAB] = DoubleWoodSlab::class;
 			self::$list[self::WOOD_SLAB] = WoodSlab::class;
 			self::$list[self::STAINED_CLAY] = StainedClay::class;
+			//self::$list[self::STAINED_GLASS_PANE] = StainedGlassPain::class;
 
 			self::$list[self::LEAVES2] = Leaves2::class;
 			self::$list[self::WOOD2] = Wood2::class;
 			self::$list[self::ACACIA_WOOD_STAIRS] = AcaciaWoodStairs::class;
 			self::$list[self::DARK_OAK_WOOD_STAIRS] = DarkOakWoodStairs::class;
+			//self::$list[self::SLIMEBLOCK] = Slimeblock::class;
+		//	self::$list[self::BARRIER] = Barrier::class;
+		//	self::$list[self::IRON_TRAPDOOR] = IronTrapdoor::class;
+			//self::$list[self::PRISMARINE] = Prismarine::class;
+			//self::$list[self::SEA_LANTERN] = SeaLantern::class;
 
 			self::$list[self::HAY_BALE] = HayBale::class;
 			self::$list[self::CARPET] = Carpet::class;
 			self::$list[self::HARDENED_CLAY] = HardenedClay::class;
 			self::$list[self::COAL_BLOCK] = Coal::class;
+			self::$list[self::PACKED_ICE] = PackedIce::class;
 
 			self::$list[self::DOUBLE_PLANT] = DoublePlant::class;
+			//self::$list[self::STANDING_BANNER] = StandingBanner::class;
+			//self::$list[self::WALL_BANNER] = WallBanner::class;
+			//self::$list[self::DAYLIGHT_DETECTOR_INVERTED] = DaylightDetectorInverted::class;
+			//self::$list[self::RED_SANDSTONE] = RedSandstone::class;
+			//self::$list[self::RED_SANDSTONE_STAIRS] = RedSandstoneStairs::class;
+			//self::$list[self::DOUBLE_STONE_SLAB2] = DoubleStoneSlab2::class;
+			//self::$list[self::STONE_SLAB2] = StoneSlab2::class;
 
 			self::$list[self::FENCE_GATE_SPRUCE] = FenceGateSpruce::class;
 			self::$list[self::FENCE_GATE_BIRCH] = FenceGateBirch::class;
 			self::$list[self::FENCE_GATE_JUNGLE] = FenceGateJungle::class;
 			self::$list[self::FENCE_GATE_DARK_OAK] = FenceGateDarkOak::class;
 			self::$list[self::FENCE_GATE_ACACIA] = FenceGateAcacia::class;
+			
+			self::$list[self::SPRUCE_DOOR_BLOCK] = SpruceDoor::class;
+			self::$list[self::BIRCH_DOOR_BLOCK] = BirchDoor::class;
+			self::$list[self::JUNGLE_DOOR_BLOCK] = JungleDoor::class;
+			self::$list[self::ACACIA_DOOR_BLOCK] = AcaciaDoor::class;
+			self::$list[self::DARK_OAK_DOOR_BLOCK] = DarkOakDoor::class;
 
 			self::$list[self::GRASS_PATH] = GrassPath::class;
 
@@ -466,6 +643,7 @@ class Block extends Position implements Metadatable{
 			self::$list[self::STONECUTTER] = Stonecutter::class;
 			self::$list[self::GLOWING_OBSIDIAN] = GlowingObsidian::class;
 			self::$list[self::NETHER_REACTOR] = NetherReactor::class;
+		//	self::$list[self::RESERVED] = Reserved::class;
 
 			foreach(self::$list as $id => $class){
 				if($class !== null){
diff --git a/src/pocketmine/block/BrewingStand.php b/src/pocketmine/block/BrewingStand.php
new file mode 100644
index 00000000..fb9066c
--- /dev/null
+++ b/src/pocketmine/block/BrewingStand.php
@@ -0,0 +1,104 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\inventory\BrewingInventory;
+use pocketmine\item\Item;
+
+use pocketmine\nbt\tag\Compound;
+use pocketmine\nbt\tag\Int;
+use pocketmine\nbt\tag\String;
+use pocketmine\Player;
+use pocketmine\tile\Tile;
+
+class BrewingStand extends Transparent{
+
+	protected $id = self::BREWING_STAND_BLOCK;
+
+	public function __construct(){
+
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$this->getLevel()->setBlock($block, $this, true, true);
+		$nbt = new Compound("", [
+			new String("id", Tile::BREWING_STAND),
+			new Int("x", $this->x),
+			new Int("y", $this->y),
+			new Int("z", $this->z)
+		]);
+
+		if($item->hasCustomName()){
+			$nbt->CustomName = new String("CustomName", $item->getCustomName());
+		}
+
+		if($item->hasCustomBlockData()){
+			foreach($item->getCustomBlockData() as $key => $v){
+				$nbt->{$key} = $v;
+			}
+		}
+
+		Tile::createTile(Tile::BREWING_STAND, $this->getLevel()->getChunk($this->x >> 4, $this->z >> 4), $nbt);
+
+		return true;
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getName(){
+		return "Brewing Stand";
+	}
+
+	public function onActivate(Item $item, Player $player = null){
+		if($player instanceof Player){
+			//TODO lock
+			if($player->isCreative()){
+				return true;
+			}
+
+			$player->addWindow(new BrewingInventory($this));
+		}
+
+		return true;
+	}
+
+	public function getDrops(Item $item){
+		$drops = [];
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
+			$drops[] = [Item::BREWING_STAND, 0, 1];
+		}
+
+		return $drops;
+	}
+	
+	public function onBreak(Item $item){
+		$this->getLevel()->setBlock($this, new Air(), true, true);
+
+		return true;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Bricks.php b/src/pocketmine/block/Bricks.php
index ef73423..d639cc0 100644
--- a/src/pocketmine/block/Bricks.php
+++ b/src/pocketmine/block/Bricks.php
@@ -49,7 +49,7 @@ class Bricks extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::BRICKS_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/BrownMushroomBlock.php b/src/pocketmine/block/BrownMushroomBlock.php
new file mode 100644
index 00000000..97c09b8
--- /dev/null
+++ b/src/pocketmine/block/BrownMushroomBlock.php
@@ -0,0 +1,54 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class BrownMushroomBlock extends Solid{
+
+	protected $id = self::BROWN_MUSHROOM_BLOCK;
+
+	public function __construct($meta = 15){
+		$this->meta = $meta;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getName(){
+		return "Brown Mushroom Block";
+	}
+
+	public function getHardness(){
+		return 0.1;
+	}
+	
+	public function getDrops(Item $item){
+		$drops = [];
+		if(mt_rand(1, 20) === 1){ //Brown Mushrooms
+			$drops[] = [Item::BROWN_MUSHROOM, $this->meta & 0x03, 1];
+		}
+		return $drops;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/BurningFurnace.php b/src/pocketmine/block/BurningFurnace.php
index 18d028e..ed12a40 100644
--- a/src/pocketmine/block/BurningFurnace.php
+++ b/src/pocketmine/block/BurningFurnace.php
@@ -135,7 +135,7 @@ class BurningFurnace extends Solid{
 
 	public function getDrops(Item $item){
 		$drops = [];
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			$drops[] = [Item::FURNACE, 0, 1];
 		}
 
diff --git a/src/pocketmine/block/Coal.php b/src/pocketmine/block/Coal.php
index 75e4fb0..494534d 100644
--- a/src/pocketmine/block/Coal.php
+++ b/src/pocketmine/block/Coal.php
@@ -45,7 +45,7 @@ class Coal extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::COAL_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/CoalOre.php b/src/pocketmine/block/CoalOre.php
index 964ed76..6c1a78e 100644
--- a/src/pocketmine/block/CoalOre.php
+++ b/src/pocketmine/block/CoalOre.php
@@ -45,7 +45,7 @@ class CoalOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::COAL, 0, 1],
 			];
diff --git a/src/pocketmine/block/Cobblestone.php b/src/pocketmine/block/Cobblestone.php
index 0a41aa1..5954edb 100644
--- a/src/pocketmine/block/Cobblestone.php
+++ b/src/pocketmine/block/Cobblestone.php
@@ -45,7 +45,7 @@ class Cobblestone extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::COBBLESTONE, 0, 1],
 			];
diff --git a/src/pocketmine/block/DarkOakDoor.php b/src/pocketmine/block/DarkOakDoor.php
new file mode 100644
index 00000000..8b3f3b0
--- /dev/null
+++ b/src/pocketmine/block/DarkOakDoor.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class DarkOakDoor extends Door{
+
+	protected $id = self::DARK_OAK_DOOR_BLOCK;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Dark Oak Door Block";
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[Item::DARK_OAK_DOOR, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Diamond.php b/src/pocketmine/block/Diamond.php
index cbe924c..1fd175d 100644
--- a/src/pocketmine/block/Diamond.php
+++ b/src/pocketmine/block/Diamond.php
@@ -45,7 +45,7 @@ class Diamond extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::DIAMOND_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/DiamondOre.php b/src/pocketmine/block/DiamondOre.php
index e9b9466..c05abb3 100644
--- a/src/pocketmine/block/DiamondOre.php
+++ b/src/pocketmine/block/DiamondOre.php
@@ -45,7 +45,7 @@ class DiamondOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::DIAMOND, 0, 1],
 			];
diff --git a/src/pocketmine/block/Diorite.php b/src/pocketmine/block/Diorite.php
new file mode 100644
index 00000000..733c129
--- /dev/null
+++ b/src/pocketmine/block/Diorite.php
@@ -0,0 +1,57 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class Diorite extends Solid{
+
+	protected $id = 1;
+
+	public function __construct($meta = 3){
+		$this->meta = $meta;
+	}
+
+	public function getHardness(){
+		return 1.5;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getName(){
+		return "Diorite";
+	}
+
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
+			return [
+				[$this->getDamage() === 0 ? Item::COBBLESTONE : Item::STONE, $this->getDamage(), 1],
+			];
+		}else{
+			return [];
+		}
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Door2.php b/src/pocketmine/block/Door2.php
new file mode 100644
index 00000000..dbd7e7d
--- /dev/null
+++ b/src/pocketmine/block/Door2.php
@@ -0,0 +1,271 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\level\Level;
+use pocketmine\level\sound\DoorSound;
+use pocketmine\math\AxisAlignedBB;
+use pocketmine\math\Vector3;
+use pocketmine\Player;
+
+
+abstract class Door2 extends Transparent{
+
+	public function canBeActivated(){
+		return false;
+	}
+
+	public function isSolid(){
+		return false;
+	}
+
+	private function getFullDamage(){
+		$damage = $this->getDamage();
+		$isUp = ($damage & 0x08) > 0;
+
+		if($isUp){
+			$down = $this->getSide(Vector3::SIDE_DOWN)->getDamage();
+			$up = $damage;
+		}else{
+			$down = $damage;
+			$up = $this->getSide(Vector3::SIDE_UP)->getDamage();
+		}
+
+		$isRight = ($up & 0x01) > 0;
+
+		return $down & 0x07 | ($isUp ? 8 : 0) | ($isRight ? 0x10 : 0);
+	}
+
+	protected function recalculateBoundingBox(){
+
+		$f = 0.1875;
+		$damage = $this->getFullDamage();
+
+		$bb = new AxisAlignedBB(
+			$this->x,
+			$this->y,
+			$this->z,
+			$this->x + 1,
+			$this->y + 2,
+			$this->z + 1
+		);
+
+		$j = $damage & 0x03;
+		$isOpen = (($damage & 0x04) > 0);
+		$isRight = (($damage & 0x10) > 0);
+
+		if($j === 0){
+			if($isOpen){
+				if(!$isRight){
+					$bb->setBounds(
+						$this->x,
+						$this->y,
+						$this->z,
+						$this->x + 1,
+						$this->y + 1,
+						$this->z + $f
+					);
+				}else{
+					$bb->setBounds(
+						$this->x,
+						$this->y,
+						$this->z + 1 - $f,
+						$this->x + 1,
+						$this->y + 1,
+						$this->z + 1
+					);
+				}
+			}else{
+				$bb->setBounds(
+					$this->x,
+					$this->y,
+					$this->z,
+					$this->x + $f,
+					$this->y + 1,
+					$this->z + 1
+				);
+			}
+		}elseif($j === 1){
+			if($isOpen){
+				if(!$isRight){
+					$bb->setBounds(
+						$this->x + 1 - $f,
+						$this->y,
+						$this->z,
+						$this->x + 1,
+						$this->y + 1,
+						$this->z + 1
+					);
+				}else{
+					$bb->setBounds(
+						$this->x,
+						$this->y,
+						$this->z,
+						$this->x + $f,
+						$this->y + 1,
+						$this->z + 1
+					);
+				}
+			}else{
+				$bb->setBounds(
+					$this->x,
+					$this->y,
+					$this->z,
+					$this->x + 1,
+					$this->y + 1,
+					$this->z + $f
+				);
+			}
+		}elseif($j === 2){
+			if($isOpen){
+				if(!$isRight){
+					$bb->setBounds(
+						$this->x,
+						$this->y,
+						$this->z + 1 - $f,
+						$this->x + 1,
+						$this->y + 1,
+						$this->z + 1
+					);
+				}else{
+					$bb->setBounds(
+						$this->x,
+						$this->y,
+						$this->z,
+						$this->x + 1,
+						$this->y + 1,
+						$this->z + $f
+					);
+				}
+			}else{
+				$bb->setBounds(
+					$this->x + 1 - $f,
+					$this->y,
+					$this->z,
+					$this->x + 1,
+					$this->y + 1,
+					$this->z + 1
+				);
+			}
+		}elseif($j === 3){
+			if($isOpen){
+				if(!$isRight){
+					$bb->setBounds(
+						$this->x,
+						$this->y,
+						$this->z,
+						$this->x + $f,
+						$this->y + 1,
+						$this->z + 1
+					);
+				}else{
+					$bb->setBounds(
+						$this->x + 1 - $f,
+						$this->y,
+						$this->z,
+						$this->x + 1,
+						$this->y + 1,
+						$this->z + 1
+					);
+				}
+			}else{
+				$bb->setBounds(
+					$this->x,
+					$this->y,
+					$this->z + 1 - $f,
+					$this->x + 1,
+					$this->y + 1,
+					$this->z + 1
+				);
+			}
+		}
+
+		return $bb;
+	}
+
+	public function onUpdate($type){
+		if($type === Level::BLOCK_UPDATE_NORMAL){
+		$blockNorth = $this->getSide(2); //Gets the blocks around them
+		$blockSouth = $this->getSide(3);
+		$blockEast = $this->getSide(5);
+		$blockWest = $this->getSide(4); //Make redstone activation
+			if($this->getSide(0)->getId() === self::AIR){ //Replace with common break method
+				$this->getLevel()->setBlock($this, new Air(), false);
+				if($this->getSide(1) instanceof Door){
+					$this->getLevel()->setBlock($this->getSide(1), new Air(), false);
+				}
+
+				return Level::BLOCK_UPDATE_NORMAL;
+			}
+		}
+
+		return false;
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		if($face === 1){
+			$blockUp = $this->getSide(1);
+			$blockDown = $this->getSide(0);
+			if($blockUp->canBeReplaced() === false or $blockDown->isTransparent() === true){
+				return false;
+			}
+			$direction = $player instanceof Player ? $player->getDirection() : 0;
+			$face = [
+				0 => 3,
+				1 => 4,
+				2 => 2,
+				3 => 5,
+			];
+			$next = $this->getSide($face[(($direction + 2) % 4)]);
+			$next2 = $this->getSide($face[$direction]);
+			$metaUp = 0x08;
+			if($next->getId() === $this->getId() or ($next2->isTransparent() === false and $next->isTransparent() === true)){ //Door hinge
+				$metaUp |= 0x01;
+			}
+
+			$this->setDamage($player->getDirection() & 0x03);
+			$this->getLevel()->setBlock($block, $this, true, true); //Bottom
+			$this->getLevel()->setBlock($blockUp, $b = Block::get($this->getId(), $metaUp), true); //Top
+			return true;
+		}
+
+		return false;
+	}
+
+	public function onBreak(Item $item){
+		if(($this->getDamage() & 0x08) === 0x08){
+			$down = $this->getSide(0);
+			if($down->getId() === $this->getId()){
+				$this->getLevel()->setBlock($down, new Air(), true);
+			}
+		}else{
+			$up = $this->getSide(1);
+			if($up->getId() === $this->getId()){
+				$this->getLevel()->setBlock($up, new Air(), true);
+			}
+		}
+		$this->getLevel()->setBlock($this, new Air(), true);
+
+		return true;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/DoublePlant.php b/src/pocketmine/block/DoublePlant.php
index 5e2ebc8..03c1f9c 100644
--- a/src/pocketmine/block/DoublePlant.php
+++ b/src/pocketmine/block/DoublePlant.php
@@ -23,6 +23,7 @@ namespace pocketmine\block;
 
 use pocketmine\item\Item;
 use pocketmine\level\Level;
+use pocketmine\Player;
 
 class DoublePlant extends Flowable{
 
@@ -61,10 +62,38 @@ class DoublePlant extends Flowable{
 		return false;
 	}
 
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$down = $this->getSide(0);
+		$up = $this->getSide(1);
+		if($down->getId() === self::GRASS){
+			$this->getLevel()->setBlock($block, $this, true);
+			$this->getLevel()->setBlock($up, Block::get($this->id, 0x08), true);
+			return true;
+		}
+		return false;
+	}
+	public function onBreak(Item $item){
+		$up = $this->getSide(1);
+		$down = $this->getSide(0);
+		if(($this->meta & 0x08) === 0x08){ //This is the Top part of flower
+			if($up->getId() === $this->id and $up->meta !== 0x08){ //Checks if the block ID and meta are right
+				$this->getLevel()->setBlock($up, new Air(), true, true);
+			}elseif($down->getId() === $this->id and $down->meta !== 0x08){
+				$this->getLevel()->setBlock($down, new Air(), true, true);
+			}
+		}else{ //Bottom Part of flower
+			if($up->getId() === $this->id and ($up->meta & 0x08) === 0x08){
+				$this->getLevel()->setBlock($up, new Air(), true, true);
+			}elseif($down->getId() === $this->id and ($down->meta & 0x08) === 0x08){
+				$this->getLevel()->setBlock($down, new Air(), true, true);
+			}
+		}
+	}
+			
 	public function getDrops(Item $item){
 		//TODO
 
 		return [];
 	}
 
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/block/DoubleSlab.php b/src/pocketmine/block/DoubleSlab.php
index 23c712a..3ccdcf8 100644
--- a/src/pocketmine/block/DoubleSlab.php
+++ b/src/pocketmine/block/DoubleSlab.php
@@ -49,13 +49,13 @@ class DoubleSlab extends Solid{
 			4 => "Brick",
 			5 => "Stone Brick",
 			6 => "Quartz",
-			7 => "",
+			7 => "Nether Brick",
 		];
 		return "Double " . $names[$this->meta & 0x07] . " Slab";
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::SLAB, $this->meta & 0x07, 2],
 			];
diff --git a/src/pocketmine/block/Emerald.php b/src/pocketmine/block/Emerald.php
index b5db557..2f24e34 100644
--- a/src/pocketmine/block/Emerald.php
+++ b/src/pocketmine/block/Emerald.php
@@ -45,7 +45,7 @@ class Emerald extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::EMERALD_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/EmeraldOre.php b/src/pocketmine/block/EmeraldOre.php
index 54971f3..90fac45 100644
--- a/src/pocketmine/block/EmeraldOre.php
+++ b/src/pocketmine/block/EmeraldOre.php
@@ -45,7 +45,7 @@ class EmeraldOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::EMERALD, 0, 1],
 			];
diff --git a/src/pocketmine/block/EnchantingTable.php b/src/pocketmine/block/EnchantingTable.php
index f65c5f8..5890367 100644
--- a/src/pocketmine/block/EnchantingTable.php
+++ b/src/pocketmine/block/EnchantingTable.php
@@ -97,7 +97,7 @@ class EnchantingTable extends Transparent{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[$this->id, 0, 1],
 			];
diff --git a/src/pocketmine/block/Fence.php b/src/pocketmine/block/Fence.php
index 2262e14..510ea39 100644
--- a/src/pocketmine/block/Fence.php
+++ b/src/pocketmine/block/Fence.php
@@ -26,7 +26,13 @@ use pocketmine\math\AxisAlignedBB;
 use pocketmine\math\Vector3;
 
 class Fence extends Transparent{
-
+	const FENCE_OAK = 0;  
+	const FENCE_SPRUCE = 1;
+	const FENCE_BIRCH = 2;
+	const FENCE_JUNGLE = 3;
+	const FENCE_ACACIA = 4;
+	const FENCE_DARKOAK = 5;
+    
 	protected $id = self::FENCE;
 
 	public function __construct($meta = 0){
@@ -38,18 +44,18 @@ class Fence extends Transparent{
 	}
 
 	public function getToolType(){
-		return Tool::TYPE_PICKAXE;
+		return Tool::TYPE_AXE;
 	}
 
 
 	public function getName(){
 		static $names = [
-			0 => "Oak Fence",
-			1 => "Spruce Fence",
-			2 => "Birch Fence",
-			3 => "Jungle Fence",
-			4 => "Acacia Fence",
-			5 => "Dark Oak Fence",
+			self::FENCE_OAK => "Oak Fence",
+			self::FENCE_SPRUCE => "Spruce Fence",
+			self::FENCE_BIRCH => "Birch Fence",
+			self::FENCE_JUNGLE => "Jungle Fence",
+			self::FENCE_ACACIA => "Acacia Fence",
+			self::FENCE_DARKOAK => "Dark Oak Fence",
 			"",
 			""
 		];
diff --git a/src/pocketmine/block/FlowerPot.php b/src/pocketmine/block/FlowerPot.php
new file mode 100644
index 00000000..b60a509
--- /dev/null
+++ b/src/pocketmine/block/FlowerPot.php
@@ -0,0 +1,79 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\level\Level;
+use pocketmine\math\Vector3;
+use pocketmine\Player;
+
+
+class FlowerPot extends Transparent{
+	protected $id = self::FLOWER_POT_BLOCK;
+	
+	public function __construct(){
+	}
+	
+	public function getName(){
+		return "Flower Pot";
+	}
+	
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+	
+	public function getHardness(){
+		return 5;
+	}
+	
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$this->getLevel()->setBlock($block, $this, true, true);
+		$nbt = new Compound("", [
+			new String("id", Tile::FLOWER_POT),
+			new Int("id", $this->id),
+			new Int("data", $this->data),
+			new Int("x", $this->x),
+			new Int("y", $this->y),
+			new Int("z", $this->z)
+		]);
+
+		Tile::createTile(Tile::FLOWER_POT, $this->getLevel()->getChunk($this->x >> 4, $this->z >> 4), $nbt);
+
+		return true;
+	}
+	
+	public function onBreak(Item $item){
+		$this->getLevel()->setBlock($this, new Air(), true, true);
+
+		return true;
+	}
+	
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= 3){
+			return [
+				[Item::FLOWER_POT, 0, 1],
+			];
+		}else{
+			return [];
+		}
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/GlowingRedstoneOre.php b/src/pocketmine/block/GlowingRedstoneOre.php
index a1675fc..0952416 100644
--- a/src/pocketmine/block/GlowingRedstoneOre.php
+++ b/src/pocketmine/block/GlowingRedstoneOre.php
@@ -60,7 +60,7 @@ class GlowingRedstoneOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::REDSTONE_DUST, 0, mt_rand(4, 5)],
 			];
diff --git a/src/pocketmine/block/Gold.php b/src/pocketmine/block/Gold.php
index cb94211..62b942f 100644
--- a/src/pocketmine/block/Gold.php
+++ b/src/pocketmine/block/Gold.php
@@ -45,7 +45,7 @@ class Gold extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::GOLD_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/GoldOre.php b/src/pocketmine/block/GoldOre.php
index 5c87c16..c56cff9 100644
--- a/src/pocketmine/block/GoldOre.php
+++ b/src/pocketmine/block/GoldOre.php
@@ -45,7 +45,7 @@ class GoldOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 4){
+		if($item->isPickaxe() >= Tool::TIER_IRON){
 			return [
 				[Item::GOLD_ORE, 0, 1],
 			];
diff --git a/src/pocketmine/block/Granite.php b/src/pocketmine/block/Granite.php
new file mode 100644
index 00000000..0911132
--- /dev/null
+++ b/src/pocketmine/block/Granite.php
@@ -0,0 +1,57 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class Granite extends Solid{
+
+	protected $id = 1;
+
+	public function __construct($meta = 1){
+		$this->meta = $meta;
+	}
+
+	public function getHardness(){
+		return 1.5;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getName(){
+		return "Granite";
+	}
+
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
+			return [
+				[$this->getDamage() === 0 ? Item::COBBLESTONE : Item::STONE, $this->getDamage(), 1],
+			];
+		}else{
+			return [];
+		}
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Iron.php b/src/pocketmine/block/Iron.php
index 66a2c28..2ffc4cd 100644
--- a/src/pocketmine/block/Iron.php
+++ b/src/pocketmine/block/Iron.php
@@ -45,7 +45,7 @@ class Iron extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 3){
+		if($item->isPickaxe() >= Tool::TIER_STONE){
 			return [
 				[Item::IRON_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/IronBars.php b/src/pocketmine/block/IronBars.php
index bebe0f3..b5e70e8 100644
--- a/src/pocketmine/block/IronBars.php
+++ b/src/pocketmine/block/IronBars.php
@@ -45,7 +45,7 @@ class IronBars extends Thin{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::IRON_BARS, 0, 1],
 			];
diff --git a/src/pocketmine/block/IronDoor.php b/src/pocketmine/block/IronDoor.php
index 447b723..b99e584 100644
--- a/src/pocketmine/block/IronDoor.php
+++ b/src/pocketmine/block/IronDoor.php
@@ -24,7 +24,7 @@ namespace pocketmine\block;
 use pocketmine\item\Item;
 use pocketmine\item\Tool;
 
-class IronDoor extends Door{
+class IronDoor extends Door2{
 
 	protected $id = self::IRON_DOOR_BLOCK;
 
@@ -45,7 +45,7 @@ class IronDoor extends Door{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::IRON_DOOR, 0, 1],
 			];
diff --git a/src/pocketmine/block/IronOre.php b/src/pocketmine/block/IronOre.php
index 01e8be8..cda4151 100644
--- a/src/pocketmine/block/IronOre.php
+++ b/src/pocketmine/block/IronOre.php
@@ -45,7 +45,7 @@ class IronOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 3){
+		if($item->isPickaxe() >= Tool::TIER_STONE){
 			return [
 				[Item::IRON_ORE, 0, 1],
 			];
diff --git a/src/pocketmine/block/IronTrapdoor.php b/src/pocketmine/block/IronTrapdoor.php
new file mode 100644
index 00000000..ad07363
--- /dev/null
+++ b/src/pocketmine/block/IronTrapdoor.php
@@ -0,0 +1,149 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+use pocketmine\math\AxisAlignedBB;
+use pocketmine\Player;
+
+class IronTrapdoor extends Transparent{
+
+	protected $id = self::IRON_TRAPDOOR;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Iron Trapdoor";
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function canBeActivated(){
+		return false;
+	}
+
+	protected function recalculateBoundingBox(){
+
+		$damage = $this->getDamage();
+
+		$f = 0.1875;
+
+		if(($damage & 0x08) > 0){
+			$bb = new AxisAlignedBB(
+				$this->x,
+				$this->y + 1 - $f,
+				$this->z,
+				$this->x + 1,
+				$this->y + 1,
+				$this->z + 1
+			);
+		}else{
+			$bb = new AxisAlignedBB(
+				$this->x,
+				$this->y,
+				$this->z,
+				$this->x + 1,
+				$this->y + $f,
+				$this->z + 1
+			);
+		}
+
+		if(($damage & 0x04) > 0){
+			if(($damage & 0x03) === 0){
+				$bb->setBounds(
+					$this->x,
+					$this->y,
+					$this->z + 1 - $f,
+					$this->x + 1,
+					$this->y + 1,
+					$this->z + 1
+				);
+			}elseif(($damage & 0x03) === 1){
+				$bb->setBounds(
+					$this->x,
+					$this->y,
+					$this->z,
+					$this->x + 1,
+					$this->y + 1,
+					$this->z + $f
+				);
+			}
+			if(($damage & 0x03) === 2){
+				$bb->setBounds(
+					$this->x + 1 - $f,
+					$this->y,
+					$this->z,
+					$this->x + 1,
+					$this->y + 1,
+					$this->z + 1
+				);
+			}
+			if(($damage & 0x03) === 3){
+				$bb->setBounds(
+					$this->x,
+					$this->y,
+					$this->z,
+					$this->x + $f,
+					$this->y + 1,
+					$this->z + 1
+				);
+			}
+		}
+
+		return $bb;
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		if(($target->isTransparent() === false or $target->getId() === self::SLAB) and $face !== 0 and $face !== 1){
+			$faces = [
+				2 => 0,
+				3 => 1,
+				4 => 2,
+				5 => 3,
+			];
+			$this->meta = $faces[$face] & 0x03;
+			if($fy > 0.5){
+				$this->meta |= 0x08;
+			}
+			$this->getLevel()->setBlock($block, $this, true, true);
+
+			return true;
+		}
+
+		return false;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[$this->id, 0, 1],
+		];
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+}
diff --git a/src/pocketmine/block/JungleDoor.php b/src/pocketmine/block/JungleDoor.php
new file mode 100644
index 00000000..9c24d56
--- /dev/null
+++ b/src/pocketmine/block/JungleDoor.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class JungleDoor extends Door{
+
+	protected $id = self::JUNGLE_DOOR_BLOCK;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "JUNGLE Door Block";
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[Item::JUNGLE_DOOR, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Ladder.php b/src/pocketmine/block/Ladder.php
index f692023..4b482db 100644
--- a/src/pocketmine/block/Ladder.php
+++ b/src/pocketmine/block/Ladder.php
@@ -123,14 +123,20 @@ class Ladder extends Transparent{
 	}
 
 	public function onUpdate($type){
+		$faces = [
+			2 => 2,
+			3 => 3,
+			4 => 4,
+			5 => 5,
+		];
 		if($type === Level::BLOCK_UPDATE_NORMAL){
-			/*if($this->getSide(0)->getId() === self::AIR){ //Replace with common break method
-				Server::getInstance()->api->entity->drop($this, Item::get(LADDER, 0, 1));
-				$this->getLevel()->setBlock($this, new Air(), true, true, true);
+			if(isset($faces[$this->meta])) {
+				if ($this->getSide($faces[$this->meta])->getId() === self::AIR) {
+					$this->getLevel()->useBreakOn($this);
+				}
 				return Level::BLOCK_UPDATE_NORMAL;
-			}*/
+			}
 		}
-
 		return false;
 	}
 
@@ -143,4 +149,4 @@ class Ladder extends Transparent{
 			[$this->id, 0, 1],
 		];
 	}
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/block/Lapis.php b/src/pocketmine/block/Lapis.php
index aa0b921..5cc8a25 100644
--- a/src/pocketmine/block/Lapis.php
+++ b/src/pocketmine/block/Lapis.php
@@ -45,7 +45,7 @@ class Lapis extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 3){
+		if($item->isPickaxe() >= Tool::TIER_STONE){
 			return [
 				[Item::LAPIS_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/LapisOre.php b/src/pocketmine/block/LapisOre.php
index 44d6e9e..68ca562 100644
--- a/src/pocketmine/block/LapisOre.php
+++ b/src/pocketmine/block/LapisOre.php
@@ -45,7 +45,7 @@ class LapisOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 3){
+		if($item->isPickaxe() >= Tool::TIER_STONE){
 			return [
 				[Item::DYE, 4, mt_rand(4, 8)],
 			];
diff --git a/src/pocketmine/block/LitRedstoneLamp.php b/src/pocketmine/block/LitRedstoneLamp.php
new file mode 100644
index 00000000..1c90993
--- /dev/null
+++ b/src/pocketmine/block/LitRedstoneLamp.php
@@ -0,0 +1,77 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class LitRedstoneLamp extends Solid{
+
+	protected $id = self::LIT_REDSTONE_LAMP;
+
+	public function __construct(){
+
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getName(){
+		return "Lit Redstone Lamp";
+	}
+
+	public function getHardness(){
+		return 0.3;
+	}
+	
+	public function onPlace(){ //onUpdate .... 
+		$blockNorth = $this->getSide(2); //Gets the blocks around the lamp
+		$blockSouth = $this->getSide(3);
+		$blockEast = $this->getSide(5);
+		$blockWest = $this->getSide(4);			
+		if($blockNorth->getId() === Block::get(Item::REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::REDSTONE_LAMP, 0), true, true);
+			return true;
+		}elseif($blockSouth->getId() === Block::get(Item::REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::REDSTONE_LAMP, 0), true, true);
+			return true;
+		}elseif($blockEast->getId() === Block::get(Item::REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::REDSTONE_LAMP, 0), true, true);
+			return true;
+		}else($blockWest->getId() === Block::get(Item::REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::REDSTONE_LAMP, 0), true, true);
+			return true;
+		}
+		return false;
+	}
+	
+	public function getLightLevel(){
+		return 15;
+	}
+
+	public function getDrops(Item $item){
+		$drops = [];
+		$drops[] = [Item::REDSTONE_LAMP, 0, 1];
+		return $drops;
+	}
+}
diff --git a/src/pocketmine/block/MossStone.php b/src/pocketmine/block/MossStone.php
index 5700d59..6476028 100644
--- a/src/pocketmine/block/MossStone.php
+++ b/src/pocketmine/block/MossStone.php
@@ -45,7 +45,7 @@ class MossStone extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::MOSS_STONE, $this->meta, 1],
 			];
diff --git a/src/pocketmine/block/NetherBrick.php b/src/pocketmine/block/NetherBrick.php
index 937713b..12400a5 100644
--- a/src/pocketmine/block/NetherBrick.php
+++ b/src/pocketmine/block/NetherBrick.php
@@ -45,7 +45,7 @@ class NetherBrick extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::NETHER_BRICKS, 0, 1],
 			];
diff --git a/src/pocketmine/block/NetherBrickFence.php b/src/pocketmine/block/NetherBrickFence.php
new file mode 100644
index 00000000..62a1823
--- /dev/null
+++ b/src/pocketmine/block/NetherBrickFence.php
@@ -0,0 +1,71 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class NetherBrickFence extends Transparent {
+
+	protected $id = self::NETHER_BRICK_FENCE;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+	
+	public function getBreakTime(Item $item){
+		if ($item instanceof Air){
+			//Breaking by hand
+			return 10;
+		}
+		else{
+			// Other breaktimes are equal to woodfences.
+			return parent::getBreakTime($item);
+		}
+	}
+
+	public function getHardness(){
+		return 2;
+	}
+        
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+	
+	public function getName(){
+		return "Nether Brick Fence";
+	}
+	
+	public function canConnect(Block $block){
+		//TODO: activate comments when the NetherBrickFenceGate class has been created.
+		return ($block instanceof NetherBrickFence /* or $block instanceof NetherBrickFenceGate */) ? true : $block->isSolid() and !$block->isTransparent();
+	}
+
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
+			return [
+				[$this->id, $this->meta, 1],
+			];
+		}else{
+			return [];
+		}
+	}        
+}
diff --git a/src/pocketmine/block/NetherCrops.php b/src/pocketmine/block/NetherCrops.php
new file mode 100644
index 00000000..a4dd512
--- /dev/null
+++ b/src/pocketmine/block/NetherCrops.php
@@ -0,0 +1,85 @@
+<?php
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\event\block\BlockGrowEvent;
+use pocketmine\item\Item;
+use pocketmine\level\Level;
+use pocketmine\Player;
+use pocketmine\Server;
+
+abstract class NetherCrops extends Flowable{
+	
+	public function canBeActivated(){
+		return true;
+	}
+	
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$down = $this->getSide(0);
+		if($down->getId() === self::SOUL_SAND){
+			$this->getLevel()->setBlock($block, $this, true, true);
+			return true;
+		}
+		return false;
+	}
+	
+	public function onActivate(Item $item, Player $player = null){
+		if($item->getId() === Item::DYE and $item->getDamage() === 0x0F){ //Bonemeal
+			$block = clone $this;
+			$block->meta -= mt_rand(2, 5);
+			if($block->meta > 3){
+				$block->meta = 3;
+			}
+			Server::getInstance()->getPluginManager()->callEvent($ev = new BlockGrowEvent($this, $block));
+			if(!$ev->isCancelled()){
+				$this->getLevel()->setBlock($this, $ev->getNewState(), true, true);
+			}
+			$item->count--;
+			return true;
+		}
+		return false;
+	}
+	
+	public function onUpdate($type){
+		if($type === Level::BLOCK_UPDATE_NORMAL){
+			if($this->getSide(0)->isTransparent() === true){
+				$this->getLevel()->useBreakOn($this);
+				return Level::BLOCK_UPDATE_NORMAL;
+			}
+		}elseif($type === Level::BLOCK_UPDATE_RANDOM){
+			if(mt_rand(0, 2) == 1){
+				if($this->meta < 0x03){
+					$block = clone $this;
+					++$block->meta;
+					Server::getInstance()->getPluginManager()->callEvent($ev = new BlockGrowEvent($this, $block));
+					if(!$ev->isCancelled()){
+						$this->getLevel()->setBlock($this, $ev->getNewState(), true, true);
+					}else{
+						return Level::BLOCK_UPDATE_RANDOM;
+					}
+				}
+			}else{
+				return Level::BLOCK_UPDATE_RANDOM;
+			}
+		}
+		return false;
+	}
+}
diff --git a/src/pocketmine/block/NetherPortal.php b/src/pocketmine/block/NetherPortal.php
new file mode 100644
index 00000000..7dc696e
--- /dev/null
+++ b/src/pocketmine/block/NetherPortal.php
@@ -0,0 +1,58 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\level\Level;
+use pocketmine\Player;
+use pocketmine\item\Tool;
+
+class NetherPortal extends Flowable {
+
+	protected $id = self::NETHER_PORTAL;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getLightLevel(){
+		return 15;
+	}
+
+	public function getName(){
+		return "Nether Portal";
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+	  $this->getLevel()->setBlock($block, $this, true, true);
+		return false;
+	}
+
+	public function getDrops(Item $item){
+		return;
+	}
+
+ public function onBreak(Item $item){
+		$this->getLevel()->setBlock($this, new Air(), true, true);
+		return true;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/NetherWart.php b/src/pocketmine/block/NetherWart.php
new file mode 100644
index 00000000..3559393
--- /dev/null
+++ b/src/pocketmine/block/NetherWart.php
@@ -0,0 +1,44 @@
+<?php
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+
+class NetherWart extends NetherCrops{
+	protected $id = self::NETHER_WART_BLOCK;
+	
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+	public function getName(){
+		return "Nether Wart Block";
+	}
+
+    public function getDrops(Item $item){
+        $drops = [];
+        if($this->meta >= 0x03){
+            $drops[] = [Item::NETHER_WART, 0, mt_rand(2, 4)];
+        }else{
+            $drops[] = [Item::NETHER_WART, 0, 1];
+        }
+
+        return $drops;
+	}
+}
diff --git a/src/pocketmine/block/Netherrack.php b/src/pocketmine/block/Netherrack.php
index 8d3d513..7496ad1 100644
--- a/src/pocketmine/block/Netherrack.php
+++ b/src/pocketmine/block/Netherrack.php
@@ -45,7 +45,7 @@ class Netherrack extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::NETHERRACK, 0, 1],
 			];
diff --git a/src/pocketmine/block/OakDoor.php b/src/pocketmine/block/OakDoor.php
new file mode 100644
index 00000000..9901b2f
--- /dev/null
+++ b/src/pocketmine/block/OakDoor.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class OakDoor extends Door{
+
+	protected $id = self::OAK_DOOR_BLOCK;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Oak Door Block";
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[Item::OAK_DOOR, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Obsidian.php b/src/pocketmine/block/Obsidian.php
index cc93e43..f483c58 100644
--- a/src/pocketmine/block/Obsidian.php
+++ b/src/pocketmine/block/Obsidian.php
@@ -45,7 +45,7 @@ class Obsidian extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 5){
+		if($item->isPickaxe() >= Tool::TIER_DIAMOND){
 			return [
 				[Item::OBSIDIAN, 0, 1],
 			];
diff --git a/src/pocketmine/block/PackedIce.php b/src/pocketmine/block/PackedIce.php
new file mode 100644
index 00000000..7a2672b
--- /dev/null
+++ b/src/pocketmine/block/PackedIce.php
@@ -0,0 +1,50 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class PackedIce extends Transparent{
+
+	protected $id = self::PACKED_ICE;
+
+	public function __construct(){
+
+	}
+
+	public function getName(){
+		return "Packed Ice";
+	}
+
+	public function getHardness(){
+		return 0.5;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getDrops(Item $item){
+		return [];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Planks.php b/src/pocketmine/block/Planks.php
index e0452a6..45c99f8 100644
--- a/src/pocketmine/block/Planks.php
+++ b/src/pocketmine/block/Planks.php
@@ -53,7 +53,7 @@ class Planks extends Solid{
 			self::BIRCH => "Birch Wood Planks",
 			self::JUNGLE => "Jungle Wood Planks",
 			self::ACACIA => "Acacia Wood Planks",
-			self::DARK_OAK => "Jungle Wood Planks",
+			self::DARK_OAK => "Dark Oak Wood Planks",
 			"",
 			""
 		];
diff --git a/src/pocketmine/block/PoweredRail.php b/src/pocketmine/block/PoweredRail.php
new file mode 100644
index 00000000..daf5473
--- /dev/null
+++ b/src/pocketmine/block/PoweredRail.php
@@ -0,0 +1,108 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+use pocketmine\level\Level;
+use pocketmine\Player;
+
+class PoweredRail extends Flowable{
+
+	protected $id = self::POWERED_RAIL;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Powered Rail";
+	}
+
+	public function getHardness(){
+		return 0.1;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$down = $this->getSide(0);
+		$blockNorth = $this->getSide(2); //Gets the blocks around them
+		$blockSouth = $this->getSide(3);
+		$blockEast = $this->getSide(5);
+		$blockWest = $this->getSide(4);
+		if($down->isTransparent() === false){
+			if($blockNorth->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 0), true, true);
+				$blockNorth->setDamage(0);
+			}
+			if($blockSouth->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 0), true, true);
+				$blockSouth->setDamage(0);
+			}
+			if($blockEast->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 1), true, true);
+				$blockEast->setDamage(1);
+			}
+			if($blockWest->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 1), true, true);
+				$blockWest->setDamage(1);
+			}
+			//TODO: Add support for Curved and Sloped rails.
+			if($blockNorth->getId() === self::RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 0), true, true);
+				$blockNorth->setDamage(0);
+			}
+			if($blockSouth->getId() === self::RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 0), true, true);
+				$blockSouth->setDamage(0);
+			}
+			if($blockEast->getId() === self::RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 1), true, true);
+				$blockEast->setDamage(1);
+			}
+			if($blockWest->getId() === self::RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 1), true, true);
+				$blockWest->setDamage(1);
+			}
+			//
+			if($this->getId() !== $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::POWERED_RAIL, 0), true, true);
+			}
+			return true;
+		}
+		return false;
+	}
+
+	public function onUpdate($type){
+		if($type === Level::BLOCK_UPDATE_NORMAL){
+			if($this->getSide(0)->getId() === self::AIR){ // Replace with common break method
+				$this->getLevel()->setBlock($this, new Air(), true);
+				
+				return Level::BLOCK_UPDATE_NORMAL;
+			}
+		}
+		return false;
+	}
+}
diff --git a/src/pocketmine/block/Quartz.php b/src/pocketmine/block/Quartz.php
index 74b4deb..cbf0c43 100644
--- a/src/pocketmine/block/Quartz.php
+++ b/src/pocketmine/block/Quartz.php
@@ -26,6 +26,11 @@ use pocketmine\item\Tool;
 
 class Quartz extends Solid{
 
+	const QUARTZ_NORMAL = 0;
+	const QUARTZ_CHISELED = 1;
+	const QUARTZ_PILLAR = 2;
+	const QUARTZ_PILLAR2 = 3;
+    
 	protected $id = self::QUARTZ_BLOCK;
 
 	public function __construct($meta = 0){
@@ -38,10 +43,10 @@ class Quartz extends Solid{
 
 	public function getName(){
 		static $names = [
-			0 => "Quartz Block",
-			1 => "Chiseled Quartz Block",
-			2 => "Quartz Pillar",
-			3 => "Quartz Pillar",
+			self::QUARTZ_NORMAL => "Quartz Block",
+			self::QUARTZ_CHISELED => "Chiseled Quartz Block",
+			self::QUARTZ_PILLAR => "Quartz Pillar",
+			self::QUARTZ_PILLAR2 => "Quartz Pillar",
 		];
 		return $names[$this->meta & 0x03];
 	}
@@ -51,7 +56,7 @@ class Quartz extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::QUARTZ_BLOCK, $this->meta & 0x03, 1],
 			];
diff --git a/src/pocketmine/block/QuartzOre.php b/src/pocketmine/block/QuartzOre.php
new file mode 100644
index 00000000..e007959
--- /dev/null
+++ b/src/pocketmine/block/QuartzOre.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class QuartzOre extends Solid{
+
+	protected $id = self::QUARTZ_ORE;
+
+	public function __construct(){
+
+	}
+
+	public function getName(){
+		return "Nether Quartz Ore";
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= Tool::TIER_STONE){
+			return [
+				[Item::QUARTZ, 0, mt_rand(4, 8)],
+			];
+		}else{
+			return [];
+		}
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Rail.php b/src/pocketmine/block/Rail.php
new file mode 100644
index 00000000..be9bd38
--- /dev/null
+++ b/src/pocketmine/block/Rail.php
@@ -0,0 +1,108 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+use pocketmine\level\Level;
+use pocketmine\Player;
+
+class Rail extends Flowable{
+
+	protected $id = self::RAIL;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Rail";
+	}
+
+	public function getHardness(){
+		return 0.1;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$down = $this->getSide(0);
+		$blockNorth = $this->getSide(2); //Gets the blocks around them
+		$blockSouth = $this->getSide(3);
+		$blockEast = $this->getSide(5);
+		$blockWest = $this->getSide(4);
+		if($down->isTransparent() === false){
+			if($blockNorth->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 0), true, true);
+				$blockNorth->setDamage(0);
+			}
+			if($blockSouth->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 0), true, true);
+				$blockSouth->setDamage(0);
+			}
+			if($blockEast->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 1), true, true);
+				$blockEast->setDamage(1);
+			}
+			if($blockWest->getId() === $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 1), true, true);
+				$blockWest->setDamage(1);
+			}
+			//TODO: Add support for Curved and Sloped rails.
+			if($blockNorth->getId() === self::POWERED_RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 0), true, true);
+				$blockNorth->setDamage(0);
+			}
+			if($blockSouth->getId() === self::POWERED_RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 0), true, true);
+				$blockSouth->setDamage(0);
+			}
+			if($blockEast->getId() === self::POWERED_RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 1), true, true);
+				$blockEast->setDamage(1);
+			}
+			if($blockWest->getId() === self::POWERED_RAIL){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 1), true, true);
+				$blockWest->setDamage(1);
+			}
+			//
+			if($this->getId() !== $this->id){
+				$this->getLevel()->setBlock($block, Block::get(Item::RAIL, 0), true, true);
+			}
+			return true;
+			}
+		return false;
+	}
+
+	public function onUpdate($type){
+		if($type === Level::BLOCK_UPDATE_NORMAL){
+			if($this->getSide(0)->getId() === self::AIR){ // Replace with common break method
+				$this->getLevel()->setBlock($this, new Air(), true);
+				
+				return Level::BLOCK_UPDATE_NORMAL;
+			}
+		}
+		return false;
+	}
+}
diff --git a/src/pocketmine/block/RedMushroomBlock.php b/src/pocketmine/block/RedMushroomBlock.php
new file mode 100644
index 00000000..6f6e202
--- /dev/null
+++ b/src/pocketmine/block/RedMushroomBlock.php
@@ -0,0 +1,54 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class RedMushroomBlock extends Solid{
+
+	protected $id = self::RED_MUSHROOM_BLOCK;
+
+	public function __construct($meta = 15){
+		$this->meta = $meta;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getName(){
+		return "Red Mushroom Block";
+	}
+
+	public function getHardness(){
+		return 0.1;
+	}
+
+	public function getDrops(Item $item){
+		$drops = [];
+		if(mt_rand(1, 20) === 1){ //Red Mushrooms
+			$drops[] = [Item::RED_MUSHROOM, $this->meta & 0x03, 1];
+		}
+		return $drops;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Redstone.php b/src/pocketmine/block/Redstone.php
index c2707e0..41cd19d 100644
--- a/src/pocketmine/block/Redstone.php
+++ b/src/pocketmine/block/Redstone.php
@@ -45,7 +45,7 @@ class Redstone extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::REDSTONE_BLOCK, 0, 1],
 			];
diff --git a/src/pocketmine/block/RedstoneLamp.php b/src/pocketmine/block/RedstoneLamp.php
new file mode 100644
index 00000000..079ba35
--- /dev/null
+++ b/src/pocketmine/block/RedstoneLamp.php
@@ -0,0 +1,71 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class RedstoneLamp extends Solid{
+
+	protected $id = self::REDSTONE_LAMP;
+
+	public function __construct(){
+
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getName(){
+		return "Redstone Lamp";
+	}
+
+	public function getHardness(){
+		return 0.3;
+	}
+	
+	public function onPlace(){
+		$blockNorth = $this->getSide(2); //Gets the blocks around the lamp
+		$blockSouth = $this->getSide(3);
+		$blockEast = $this->getSide(5);
+		$blockWest = $this->getSide(4);			
+		if($blockNorth->getId() === Block::get(Item::LIT_REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::LIT_REDSTONE_LAMP, 0), true, true);
+			return true;
+		}elseif($blockSouth->getId() === Block::get(Item::LIT_REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::LIT_REDSTONE_LAMP, 0), true, true);
+			return true;
+		}elseif($blockEast->getId() === Block::get(Item::LIT_REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::LIT_REDSTONE_LAMP, 0), true, true);
+			return true;
+		}elseif($blockWest->getId() === Block::get(Item::LIT_REDSTONE_TORCH, 0)){
+			$this->getLevel()->setBlock($this, Block::get(Item::LIT_REDSTONE_LAMP, 0), true, true);
+			return true;
+		}
+		return false;
+	}
+
+	public function getDrops(Item $item){
+		return [];
+	}
+}
diff --git a/src/pocketmine/block/RedstoneOre.php b/src/pocketmine/block/RedstoneOre.php
index 6b31c40..2fb6df9 100644
--- a/src/pocketmine/block/RedstoneOre.php
+++ b/src/pocketmine/block/RedstoneOre.php
@@ -58,7 +58,7 @@ class RedstoneOre extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 2){
+		if($item->isPickaxe() >= Tool::TIER_GOLD){
 			return [
 				[Item::REDSTONE_DUST, 0, mt_rand(4, 5)],
 			];
diff --git a/src/pocketmine/block/Sandstone.php b/src/pocketmine/block/Sandstone.php
index a94a32a..60bca02 100644
--- a/src/pocketmine/block/Sandstone.php
+++ b/src/pocketmine/block/Sandstone.php
@@ -26,6 +26,10 @@ use pocketmine\item\Tool;
 
 class Sandstone extends Solid{
 
+	const NORMAL = 0;
+	const CHISELED = 1;
+	const SMOOTH = 2;
+
 	protected $id = self::SANDSTONE;
 
 	public function __construct($meta = 0){
@@ -38,9 +42,9 @@ class Sandstone extends Solid{
 
 	public function getName(){
 		static $names = [
-			0 => "Sandstone",
-			1 => "Chiseled Sandstone",
-			2 => "Smooth Sandstone",
+			self::NORMAL => "Sandstone",
+			self::CHISELED => "Chiseled Sandstone",
+			self::SMOOTH => "Smooth Sandstone",
 			3 => "",
 		];
 		return $names[$this->meta & 0x03];
@@ -51,7 +55,7 @@ class Sandstone extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::SANDSTONE, $this->meta & 0x03, 1],
 			];
diff --git a/src/pocketmine/block/SignPost.php b/src/pocketmine/block/SignPost.php
index c151f07..5ae5199 100644
--- a/src/pocketmine/block/SignPost.php
+++ b/src/pocketmine/block/SignPost.php
@@ -88,7 +88,7 @@ class SignPost extends Transparent{
 	}
 
 	public function onBreak(Item $item){
-		$this->getLevel()->setBlock($this, new Air(), true, true, true);
+		$this->getLevel()->setBlock($this, new Air(), true, true);
 
 		return true;
 	}
diff --git a/src/pocketmine/block/SkullBlock.php b/src/pocketmine/block/SkullBlock.php
new file mode 100644
index 00000000..6096a57
--- /dev/null
+++ b/src/pocketmine/block/SkullBlock.php
@@ -0,0 +1,98 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+use pocketmine\nbt\tag\Compound;
+use pocketmine\nbt\tag\Int;
+use pocketmine\nbt\tag\String;
+use pocketmine\Player;
+use pocketmine\tile\Tile;
+
+class SkullBlock extends Transparent{
+
+	protected $id = self::SKULL_BLOCK;
+
+	public function __construct(){
+
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$this->getLevel()->setBlock($block, $this, true, true);
+		$nbt = new Compound("", [
+			new String("id", Tile::SKULL),
+			new Int("x", $this->x),
+			new Int("y", $this->y),
+			new Int("z", $this->z)
+		]);
+
+		if($item->hasCustomName()){
+			$nbt->CustomName = new String("CustomName", $item->getCustomName());
+		}
+
+		if($item->hasCustomBlockData()){
+			foreach($item->getCustomBlockData() as $key => $v){
+				$nbt->{$key} = $v;
+			}
+		}
+
+		Tile::createTile(Tile::SKULL, $this->getLevel()->getChunk($this->x >> 4, $this->z >> 4), $nbt);
+
+		return true;
+	}
+
+
+	public function getHardness(){
+		return 5;
+	}
+
+	public function getResistance(){
+		return 5;
+	}
+
+	public function getName(){
+		static $names = [
+			0 => "Skeleton Skull",
+			1 => "Wither Skeleton Skull",
+			2 => "Zombie Head",
+			3 => "Head",
+			4 => "Creeper Head"
+		];
+		return $names[$this->meta & 0x03];
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_PICKAXE;
+	}
+
+	public function getDrops(Item $item){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
+			return [
+				[$this->id, 0, 1],
+			];
+		}else{
+			return [];
+		}
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Slab.php b/src/pocketmine/block/Slab.php
index 303d8fb..0bf6ae9 100644
--- a/src/pocketmine/block/Slab.php
+++ b/src/pocketmine/block/Slab.php
@@ -27,6 +27,14 @@ use pocketmine\math\AxisAlignedBB;
 use pocketmine\Player;
 
 class Slab extends Transparent{
+	const STONE = 0;
+	const SANDSTONE = 1;
+	const WOODEN = 2;
+	const COBBLESTONE = 3;
+	const BRICK = 4;
+	const STONE_BRICK = 5;
+	const QUARTZ = 6;
+	const NETHER_BRICK = 7;
 
 	protected $id = self::SLAB;
 
@@ -40,14 +48,14 @@ class Slab extends Transparent{
 
 	public function getName(){
 		static $names = [
-			0 => "Stone",
-			1 => "Sandstone",
-			2 => "Wooden",
-			3 => "Cobblestone",
-			4 => "Brick",
-			5 => "Stone Brick",
-			6 => "Quartz",
-			7 => "",
+			self::STONE => "Stone",
+			self::SANDSTONE => "Sandstone",
+			self::WOODEN => "Wooden",
+			self::COBBLESTONE => "Cobblestone",
+			self::BRICK => "Brick",
+			self::STONE_BRICK => "Stone Brick",
+			self::QUARTZ => "Quartz",
+			self::NETHER_BRICK => "Nether Brick",
 		];
 		return (($this->meta & 0x08) > 0 ? "Upper " : "") . $names[$this->meta & 0x07] . " Slab";
 	}
@@ -125,7 +133,7 @@ class Slab extends Transparent{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[$this->id, $this->meta & 0x07, 1],
 			];
diff --git a/src/pocketmine/block/SnowLayer.php b/src/pocketmine/block/SnowLayer.php
index b78e6ff..f04ad3a 100644
--- a/src/pocketmine/block/SnowLayer.php
+++ b/src/pocketmine/block/SnowLayer.php
@@ -50,37 +50,48 @@ class SnowLayer extends Flowable{
 		return Tool::TYPE_SHOVEL;
 	}
 
-
 	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
 		$down = $this->getSide(0);
 		if($down->isSolid()){
-			$this->getLevel()->setBlock($block, $this, true);
-
-			return true;
+			if($down->getId() === $this->getId() && $down->getDamage() <= 7){
+				$down->setDamage($down->getDamage() + 1);
+				$this->getLevel()->setBlock($down, $down, true);
+				
+				return true;
+			}
+			else{
+				$this->getLevel()->setBlock($block, $this, true);
+				
+				return true;
+			}
 		}
-
+		
 		return false;
 	}
 
 	public function onUpdate($type){
 		if($type === Level::BLOCK_UPDATE_NORMAL){
-			if($this->getSide(0)->getId() === self::AIR){ //Replace with common break method
+			if($this->getSide(0)->getId() === self::AIR){ // Replace with common break method
 				$this->getLevel()->setBlock($this, new Air(), true);
-
+				
 				return Level::BLOCK_UPDATE_NORMAL;
 			}
 		}
-
+		elseif($type === Level::BLOCK_UPDATE_RANDOM){ // added melting
+			if($this->getLevel()->getBlockLightAt($this->x, $this->y, $this->z) >= 10){
+				$this->getLevel()->setBlock($this, new Air(), true);
+				return Level::BLOCK_UPDATE_NORMAL;
+			}
+		}
+		
 		return false;
 	}
 
 	public function getDrops(Item $item){
 		if($item->isShovel() !== false){
-			return [
-				[Item::SNOWBALL, 0, 1],
-			];
+			return [[Item::SNOWBALL,0,$this->getDamage() + 1]]; // Amount in PC version is based on the number of layers
 		}
-
+		
 		return [];
 	}
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/block/SpruceDoor.php b/src/pocketmine/block/SpruceDoor.php
new file mode 100644
index 00000000..b8356d1
--- /dev/null
+++ b/src/pocketmine/block/SpruceDoor.php
@@ -0,0 +1,56 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+
+class SpruceDoor extends Door{
+
+	protected $id = self::SPRUCE_DOOR_BLOCK;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function getName(){
+		return "Spruce Door Block";
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 3;
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[Item::SPRUCE_DOOR, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/Stair.php b/src/pocketmine/block/Stair.php
index bb02a76..7416b6f 100644
--- a/src/pocketmine/block/Stair.php
+++ b/src/pocketmine/block/Stair.php
@@ -143,7 +143,7 @@ abstract class Stair extends Transparent{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[$this->getId(), 0, 1],
 			];
diff --git a/src/pocketmine/block/Stone.php b/src/pocketmine/block/Stone.php
index 3b9eadd..055731d 100644
--- a/src/pocketmine/block/Stone.php
+++ b/src/pocketmine/block/Stone.php
@@ -37,7 +37,6 @@ class Stone extends Solid{
 
 	public function __construct($meta = 0){
 		$this->meta = $meta;
-
 	}
 
 	public function getHardness(){
diff --git a/src/pocketmine/block/StoneBricks.php b/src/pocketmine/block/StoneBricks.php
index ecb17ed..461a39e 100644
--- a/src/pocketmine/block/StoneBricks.php
+++ b/src/pocketmine/block/StoneBricks.php
@@ -25,6 +25,10 @@ use pocketmine\item\Item;
 use pocketmine\item\Tool;
 
 class StoneBricks extends Solid{
+	const NORMAL = 0;
+	const MOSSY = 1;
+	const CRACKED = 2;
+	const CHISELED = 3;
 
 	protected $id = self::STONE_BRICKS;
 
@@ -42,16 +46,16 @@ class StoneBricks extends Solid{
 
 	public function getName(){
 		static $names = [
-			0 => "Stone Bricks",
-			1 => "Mossy Stone Bricks",
-			2 => "Cracked Stone Bricks",
-			3 => "Chiseled Stone Bricks",
+			self::NORMAL => "Stone Bricks",
+			self::MOSSY => "Mossy Stone Bricks",
+			self::CRACKED => "Cracked Stone Bricks",
+			self::CHISELED => "Chiseled Stone Bricks",
 		];
 		return $names[$this->meta & 0x03];
 	}
 	
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::STONE_BRICKS, $this->meta & 0x03, 1],
 			];
diff --git a/src/pocketmine/block/StoneWall.php b/src/pocketmine/block/StoneWall.php
index 953c182..cf689b6 100644
--- a/src/pocketmine/block/StoneWall.php
+++ b/src/pocketmine/block/StoneWall.php
@@ -27,6 +27,8 @@ use pocketmine\math\AxisAlignedBB;
 use pocketmine\math\Vector3;
 
 class StoneWall extends Transparent{
+	const NONE_MOSSY_WALL = 0;
+	const MOSSY_WALL = 1;
 
 	protected $id = self::STONE_WALL;
 
diff --git a/src/pocketmine/block/Stonecutter.php b/src/pocketmine/block/Stonecutter.php
index 3dc127c..918011e 100644
--- a/src/pocketmine/block/Stonecutter.php
+++ b/src/pocketmine/block/Stonecutter.php
@@ -55,7 +55,7 @@ class Stonecutter extends Solid{
 	}
 
 	public function getDrops(Item $item){
-		if($item->isPickaxe() >= 1){
+		if($item->isPickaxe() >= Tool::TIER_WOODEN){
 			return [
 				[Item::STONECUTTER, 0, 1],
 			];
diff --git a/src/pocketmine/block/TallGrass.php b/src/pocketmine/block/TallGrass.php
index bce7fef..c8d98ee 100644
--- a/src/pocketmine/block/TallGrass.php
+++ b/src/pocketmine/block/TallGrass.php
@@ -32,6 +32,10 @@ class TallGrass extends Flowable{
 	public function __construct($meta = 1){
 		$this->meta = $meta;
 	}
+	
+	public function canBeActivated(){
+		return true;
+	}
 
 	public function canBeReplaced(){
 		return true;
@@ -57,7 +61,12 @@ class TallGrass extends Flowable{
 
 		return false;
 	}
-
+	
+	public function onActivate(Item $item, Player $player = null){
+		if($item->getId() === Item::DYE and $item->getDamage() === 0x0F){
+			$this->getLevel()->setBlock($this->getSide(1), new DoublePlant(2));
+		}
+	}
 
 	public function onUpdate($type){
 		if($type === Level::BLOCK_UPDATE_NORMAL){
diff --git a/src/pocketmine/block/Trapdoor.php b/src/pocketmine/block/Trapdoor.php
index 434b326..7b8a2c1 100644
--- a/src/pocketmine/block/Trapdoor.php
+++ b/src/pocketmine/block/Trapdoor.php
@@ -23,7 +23,9 @@ namespace pocketmine\block;
 
 use pocketmine\item\Item;
 use pocketmine\item\Tool;
+use pocketmine\level\sound\DoorSound;
 use pocketmine\math\AxisAlignedBB;
+use pocketmine\math\Vector3;
 use pocketmine\Player;
 
 class Trapdoor extends Transparent{
@@ -119,18 +121,24 @@ class Trapdoor extends Transparent{
 
 	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
 		if(($target->isTransparent() === false or $target->getId() === self::SLAB) and $face !== 0 and $face !== 1){
-			$faces = [
-				2 => 0,
-				3 => 1,
-				4 => 2,
-				5 => 3,
-			];
+			$faces = [];
+			switch($faces){
+				case 0x0:
+					return Vector3::SIDE_SOUTH;
+				case 0x1:
+					return Vector3::SIDE_NORTH;
+				case 0x2:
+					return Vector3::SIDE_EAST;
+				case 0x3:
+					return Vector3::SIDE_WEST;
+			}
+
 			$this->meta = $faces[$face] & 0x03;
 			if($fy > 0.5){
 				$this->meta |= 0x08;
 			}
 			$this->getLevel()->setBlock($block, $this, true, true);
-
+			$this->getLevel()->addSound(new DoorSound($this));
 			return true;
 		}
 
@@ -146,7 +154,6 @@ class Trapdoor extends Transparent{
 	public function onActivate(Item $item, Player $player = null){
 		$this->meta ^= 0x04;
 		$this->getLevel()->setBlock($this, $this, true);
-		$this->level->addSound(new DoorSound($this));
 		return true;
 	}
 
diff --git a/src/pocketmine/block/TrappedChest.php b/src/pocketmine/block/TrappedChest.php
new file mode 100644
index 00000000..1b23640
--- /dev/null
+++ b/src/pocketmine/block/TrappedChest.php
@@ -0,0 +1,181 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\block;
+
+use pocketmine\item\Item;
+use pocketmine\item\Tool;
+use pocketmine\math\AxisAlignedBB;
+use pocketmine\nbt\NBT;
+use pocketmine\nbt\tag\Compound;
+use pocketmine\nbt\tag\Enum;
+use pocketmine\nbt\tag\Int;
+use pocketmine\nbt\tag\String;
+use pocketmine\Player;
+use pocketmine\tile\TrappedChest as TileChest;
+use pocketmine\tile\Tile;
+
+class TrappedChest extends Transparent{
+
+	protected $id = self::TRAPPED_CHEST;
+
+	public function __construct($meta = 0){
+		$this->meta = $meta;
+	}
+
+	public function canBeActivated(){
+		return true;
+	}
+
+	public function getHardness(){
+		return 2.5;
+	}
+
+	public function getName(){
+		return "Trapped Chest";
+	}
+
+	public function getToolType(){
+		return Tool::TYPE_AXE;
+	}
+
+	protected function recalculateBoundingBox(){
+		return new AxisAlignedBB(
+			$this->x + 0.0625,
+			$this->y,
+			$this->z + 0.0625,
+			$this->x + 0.9375,
+			$this->y + 0.9475,
+			$this->z + 0.9375
+		);
+	}
+
+	public function place(Item $item, Block $block, Block $target, $face, $fx, $fy, $fz, Player $player = null){
+		$faces = [
+			0 => 4,
+			1 => 2,
+			2 => 5,
+			3 => 3,
+		];
+
+		$chest = null;
+		$this->meta = $faces[$player instanceof Player ? $player->getDirection() : 0];
+
+		for($side = 2; $side <= 5; ++$side){
+			if(($this->meta === 4 or $this->meta === 5) and ($side === 4 or $side === 5)){
+				continue;
+			}elseif(($this->meta === 3 or $this->meta === 2) and ($side === 2 or $side === 3)){
+				continue;
+			}
+			$c = $this->getSide($side);
+			if($c instanceof Chest and $c->getDamage() === $this->meta){
+				$tile = $this->getLevel()->getTile($c);
+				if($tile instanceof TileChest and !$tile->isPaired()){
+					$chest = $tile;
+					break;
+				}
+			}
+		}
+
+		$this->getLevel()->setBlock($block, $this, true, true);
+		$nbt = new Compound("", [
+			new Enum("Items", []),
+			new String("id", Tile::TRAPPED_CHEST),
+			new Int("x", $this->x),
+			new Int("y", $this->y),
+			new Int("z", $this->z)
+		]);
+		$nbt->Items->setTagType(NBT::TAG_Compound);
+
+		if($item->hasCustomName()){
+			$nbt->CustomName = new String("CustomName", $item->getCustomName());
+		}
+
+		if($item->hasCustomBlockData()){
+			foreach($item->getCustomBlockData() as $key => $v){
+				$nbt->{$key} = $v;
+			}
+		}
+
+		$tile = Tile::createTile("Trapped Chest", $this->getLevel()->getChunk($this->x >> 4, $this->z >> 4), $nbt);
+
+		if($chest instanceof TileChest and $tile instanceof TileChest){
+			$chest->pairWith($tile);
+			$tile->pairWith($chest);
+		}
+
+		return true;
+	}
+
+	public function onBreak(Item $item){
+		$t = $this->getLevel()->getTile($this);
+		if($t instanceof TileChest){
+			$t->unpair();
+		}
+		$this->getLevel()->setBlock($this, new Air(), true, true);
+
+		return true;
+	}
+
+	public function onActivate(Item $item, Player $player = null){
+		if($player instanceof Player){
+			$top = $this->getSide(1);
+			if($top->isTransparent() !== true){
+				return true;
+			}
+
+			$t = $this->getLevel()->getTile($this);
+			$chest = null;
+			if($t instanceof TileChest){
+				$chest = $t;
+			}else{
+				$nbt = new Compound("", [
+					new Enum("Items", []),
+					new String("id", Tile::TRAPPED_CHEST),
+					new Int("x", $this->x),
+					new Int("y", $this->y),
+					new Int("z", $this->z)
+				]);
+				$nbt->Items->setTagType(NBT::TAG_Compound);
+				$chest = Tile::createTile("Trapped Chest", $this->getLevel()->getChunk($this->x >> 4, $this->z >> 4), $nbt);
+			}
+
+			if(isset($chest->namedtag->Lock) and $chest->namedtag->Lock instanceof String){
+				if($chest->namedtag->Lock->getValue() !== $item->getCustomName()){
+					return true;
+				}
+			}
+
+			if($player->isCreative()){
+				return true;
+			}
+			$player->addWindow($chest->getInventory());
+		}
+
+		return true;
+	}
+
+	public function getDrops(Item $item){
+		return [
+			[$this->id, 0, 1],
+		];
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/block/WallSign.php b/src/pocketmine/block/WallSign.php
index 1a09123..66064a8 100644
--- a/src/pocketmine/block/WallSign.php
+++ b/src/pocketmine/block/WallSign.php
@@ -22,6 +22,8 @@
 namespace pocketmine\block;
 
 
+use pocketmine\level\Level;
+
 class WallSign extends SignPost{
 
 	protected $id = self::WALL_SIGN;
@@ -31,6 +33,20 @@ class WallSign extends SignPost{
 	}
 
 	public function onUpdate($type){
+		$faces = [
+			2 => 3,
+			3 => 2,
+			4 => 5,
+			5 => 4,
+		];
+		if($type === Level::BLOCK_UPDATE_NORMAL){
+			if(isset($faces[$this->meta])) {
+				if ($this->getSide($faces[$this->meta])->getId() === self::AIR) {
+					$this->getLevel()->useBreakOn($this);
+				}
+				return Level::BLOCK_UPDATE_NORMAL;
+			}
+		}
 		return false;
 	}
 }
\ No newline at end of file
diff --git a/src/pocketmine/block/Wood.php b/src/pocketmine/block/Wood.php
index c80da47..1462fb5 100644
--- a/src/pocketmine/block/Wood.php
+++ b/src/pocketmine/block/Wood.php
@@ -30,8 +30,8 @@ class Wood extends Solid{
 	const SPRUCE = 1;
 	const BIRCH = 2;
 	const JUNGLE = 3;
-	//const ACACIA = 4;
-	//const DARK_OAK = 5;
+	const ACACIA = 4;
+	const DARK_OAK = 5;
 
 	protected $id = self::WOOD;
 
@@ -49,6 +49,8 @@ class Wood extends Solid{
 			self::SPRUCE => "Spruce Wood",
 			self::BIRCH => "Birch Wood",
 			self::JUNGLE => "Jungle Wood",
+                        self::ACACIA => "Acacia Wood",
+                        self::DARK_OAK => "Dark Oak Wood",
 		];
 		return $names[$this->meta & 0x03];
 	}
@@ -78,4 +80,4 @@ class Wood extends Solid{
 	public function getToolType(){
 		return Tool::TYPE_AXE;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/command/defaults/BanListCommand.php b/src/pocketmine/command/defaults/BanListCommand.php
index 251a096..6fe8ba7 100644
--- a/src/pocketmine/command/defaults/BanListCommand.php
+++ b/src/pocketmine/command/defaults/BanListCommand.php
@@ -64,9 +64,9 @@ class BanListCommand extends VanillaCommand{
 		}
 
 		if($args[0] === "ips"){
-			$sender->sendMessage("commands.banlist.ips", [count($list)]);
+			$sender->sendMessage(new TranslationContainer("commands.banlist.ips", [count($list)]));
 		}else{
-			$sender->sendMessage("commands.banlist.players", [count($list)]);
+			$sender->sendMessage(new TranslationContainer("commands.banlist.players", [count($list)]));
 		}
 
 		$sender->sendMessage(substr($message, 0, -2));
diff --git a/src/pocketmine/command/defaults/GamemodeCommand.php b/src/pocketmine/command/defaults/GamemodeCommand.php
index 30b562a..425110b 100644
--- a/src/pocketmine/command/defaults/GamemodeCommand.php
+++ b/src/pocketmine/command/defaults/GamemodeCommand.php
@@ -34,7 +34,8 @@ class GamemodeCommand extends VanillaCommand{
 		parent::__construct(
 			$name,
 			"%pocketmine.command.gamemode.description",
-			"%commands.gamemode.usage"
+			"%commands.gamemode.usage",
+			["gm"]
 		);
 		$this->setPermission("pocketmine.command.gamemode");
 	}
diff --git a/src/pocketmine/command/defaults/GiveCommand.php b/src/pocketmine/command/defaults/GiveCommand.php
index b8cd20e..ad2b6d4 100644
--- a/src/pocketmine/command/defaults/GiveCommand.php
+++ b/src/pocketmine/command/defaults/GiveCommand.php
@@ -36,7 +36,8 @@ class GiveCommand extends VanillaCommand{
 		parent::__construct(
 			$name,
 			"%pocketmine.command.give.description",
-			"%pocketmine.command.give.usage"
+			"%pocketmine.command.give.usage",
+			["i"]
 		);
 		$this->setPermission("pocketmine.command.give");
 	}
diff --git a/src/pocketmine/command/defaults/PardonCommand.php b/src/pocketmine/command/defaults/PardonCommand.php
index 30f3066..b77adb3 100644
--- a/src/pocketmine/command/defaults/PardonCommand.php
+++ b/src/pocketmine/command/defaults/PardonCommand.php
@@ -32,7 +32,8 @@ class PardonCommand extends VanillaCommand{
 		parent::__construct(
 			$name,
 			"%pocketmine.command.unban.player.description",
-			"%commands.unban.usage"
+			"%commands.unban.usage",
+			["unban"]
 		);
 		$this->setPermission("pocketmine.command.unban.player");
 	}
diff --git a/src/pocketmine/command/defaults/PardonIpCommand.php b/src/pocketmine/command/defaults/PardonIpCommand.php
index bb25c24..b852a16 100644
--- a/src/pocketmine/command/defaults/PardonIpCommand.php
+++ b/src/pocketmine/command/defaults/PardonIpCommand.php
@@ -32,7 +32,8 @@ class PardonIpCommand extends VanillaCommand{
 		parent::__construct(
 			$name,
 			"%pocketmine.command.unban.ip.description",
-			"%commands.unbanip.usage"
+			"%commands.unbanip.usage",
+			["unbanip","unban-ip"]
 		);
 		$this->setPermission("pocketmine.command.unban.ip");
 	}
diff --git a/src/pocketmine/command/defaults/TimeCommand.php b/src/pocketmine/command/defaults/TimeCommand.php
index 570fd5a..5356ce6 100644
--- a/src/pocketmine/command/defaults/TimeCommand.php
+++ b/src/pocketmine/command/defaults/TimeCommand.php
@@ -105,6 +105,10 @@ class TimeCommand extends VanillaCommand{
 				$value = 0;
 			}elseif($args[1] === "night"){
 				$value = Level::TIME_NIGHT;
+			}elseif($args[1] === "sunrise"){
+				$value = Level::TIME_SUNRISE;
+			}elseif($args[1] === "sunset"){
+				$value = Level::TIME_SUNSET;
 			}else{
 				$value = $this->getInteger($sender, $args[1], 0);
 			}
diff --git a/src/pocketmine/entity/Bat.php b/src/pocketmine/entity/Bat.php
new file mode 100644
index 00000000..8ec4276
--- /dev/null
+++ b/src/pocketmine/entity/Bat.php
@@ -0,0 +1,76 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\entity;
+
+use pocketmine\item\Item as Dr;
+use pocketmine\event\entity\EntityDamageByEntityEvent;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\Player;
+use pocketmine\network\Network;
+use pocketmine\network\protocol\MovePlayerPacket;
+use pocketmine\math\AxisAlignedBB;
+use pocketmine\math\Vector3;
+
+
+class Bat extends Animal{
+	const NETWORK_ID = 19;
+	public $width = 1;
+	public $length = 1.5;
+	public $height = 1.5;
+ public static $range = 16;
+	public static $speed = 0.25;
+	public static $jump = 1.8;
+	public static $mindist = 3;
+
+public function initEntity(){
+		$this->setMaxHealth(1);
+		parent::initEntity();
+	}
+
+	public function getName(){
+		return "Bat";
+	}
+
+	 public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = Bat::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y+2;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk->setChannel(Network::CHANNEL_ENTITY_SPAWNING));
+		$player->addEntityMotion($this->getId(), $this->motionX, $this->motionY, $this->motionZ);
+		parent::spawnTo($player);
+	}
+
+	public function getDrops(){
+		return [];
+	}
+
+
+}
diff --git a/src/pocketmine/entity/Blaze.php b/src/pocketmine/entity/Blaze.php
new file mode 100644
index 00000000..85826fb
--- /dev/null
+++ b/src/pocketmine/entity/Blaze.php
@@ -0,0 +1,66 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\entity;
+
+use pocketmine\event\entity\EntityDamageByEntityEvent;
+use pocketmine\event\entity\EntityDamageEvent;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\network\protocol\MovePlayerPacket;
+use pocketmine\network\protocol\MoveEntityPacket;
+use pocketmine\math\AxisAlignedBB;
+use pocketmine\Player;
+use pocketmine\entity\Entity;
+use pocketmine\math\Vector3;
+use pocketmine\network\Network;
+use pocketmine\item\Item as Dr;
+
+class Blaze extends Monster{
+	const NETWORK_ID = 43;
+
+	public function getName()
+   {
+		return "Blaze";
+ 	}
+
+	 	 public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = Blaze::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y+2;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk->setChannel(Network::CHANNEL_ENTITY_SPAWNING));
+		$player->addEntityMotion($this->getId(), $this->motionX, $this->motionY, $this->motionZ);
+		parent::spawnTo($player);
+	}
+	
+	public function getDrops(){
+		$drops = [];
+		return $drops;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/entity/CavernSpider.php b/src/pocketmine/entity/CavernSpider.php
new file mode 100644
index 00000000..0b31400
--- /dev/null
+++ b/src/pocketmine/entity/CavernSpider.php
@@ -0,0 +1,67 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\entity;
+
+use pocketmine\item\Item as Dr;
+use pocketmine\event\entity\EntityDamageByEntityEvent;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\Player;
+use pocketmine\entity\Monster;
+use pocketmine\network\Network;
+
+class CavernSpider extends Monster{
+	const NETWORK_ID = 40;
+	public $width = 1;
+	public $length = 1.5;
+	public $height = 1.5;
+
+	public function getName(){
+		return "Cavern Spider";
+	}
+
+	 public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = CavernSpider::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y+2;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk->setChannel(Network::CHANNEL_ENTITY_SPAWNING));
+		$player->addEntityMotion($this->getId(), $this->motionX, $this->motionY, $this->motionZ);
+		parent::spawnTo($player);
+	}
+
+	public function getDrops(){
+		$drops = [];
+		$string = mt_rand(0,5);
+		if($string){
+			$drops[] = Dr::get(Dr::STRING,0,$string);
+		}
+		return $drops;
+	}
+}
diff --git a/src/pocketmine/entity/Chicken.php b/src/pocketmine/entity/Chicken.php
index 56190eb..23b5734 100644
--- a/src/pocketmine/entity/Chicken.php
+++ b/src/pocketmine/entity/Chicken.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Chicken extends Animal{
-
-}
\ No newline at end of file
+	public function getName() {
+		return "Chicken";
+	}
+}
diff --git a/src/pocketmine/entity/Cow.php b/src/pocketmine/entity/Cow.php
index c954d80..31a8242 100644
--- a/src/pocketmine/entity/Cow.php
+++ b/src/pocketmine/entity/Cow.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Cow extends Animal{
-
-}
\ No newline at end of file
+        public function getName() {
+                return "Cow";
+        }
+}
diff --git a/src/pocketmine/entity/Creeper.php b/src/pocketmine/entity/Creeper.php
index d6c06af..8fbfaf5 100644
--- a/src/pocketmine/entity/Creeper.php
+++ b/src/pocketmine/entity/Creeper.php
@@ -23,5 +23,11 @@ namespace pocketmine\entity;
 
 
 class Creeper extends Monster implements Explosive{
-
-}
\ No newline at end of file
+        public function getName() {
+                return "Creeper";
+        }
+	
+	public function explode() {
+		return null;
+	}
+}
diff --git a/src/pocketmine/entity/Effect.php b/src/pocketmine/entity/Effect.php
index b10dc0d..e0378a1 100644
--- a/src/pocketmine/entity/Effect.php
+++ b/src/pocketmine/entity/Effect.php
@@ -26,7 +26,7 @@ use pocketmine\event\entity\EntityRegainHealthEvent;
 use pocketmine\network\Network;
 use pocketmine\network\protocol\MobEffectPacket;
 use pocketmine\Player;
-
+use pocketmine\Server;
 
 class Effect{
 	const SPEED = 1;
@@ -36,8 +36,8 @@ class Effect{
 	const FATIGUE = 4;
 	const MINING_FATIGUE = 4;
 	const STRENGTH = 5;
-	//TODO: const HEALING = 6;
-	//TODO: const HARMING = 7;
+	const HEALING = 6;
+	const HARMING = 7;
 	const JUMP = 8;
 	const NAUSEA = 9;
 	const CONFUSION = 9;
@@ -46,15 +46,15 @@ class Effect{
 	const FIRE_RESISTANCE = 12;
 	const WATER_BREATHING = 13;
 	const INVISIBILITY = 14;
-	//const BLINDNESS = 15;
-	//const NIGHT_VISION = 16;
-	//const HUNGER = 17;
+	const BLINDNESS = 15;
+	const NIGHT_VISION = 16;
+	const HUNGER = 17;
 	const WEAKNESS = 18;
 	const POISON = 19;
 	const WITHER = 20;
 	const HEALTH_BOOST = 21;
-	//const ABSORPTION = 22;
-	//const SATURATION = 23;
+	const ABSORPTION = 22;
+	const SATURATION = 23;
 
 	/** @var Effect[] */
 	protected static $effects;
@@ -67,8 +67,8 @@ class Effect{
 		self::$effects[Effect::SWIFTNESS] = new Effect(Effect::SWIFTNESS, "%potion.digSpeed", 217, 192, 67);
 		self::$effects[Effect::FATIGUE] = new Effect(Effect::FATIGUE, "%potion.digSlowDown", 74, 66, 23, true);
 		self::$effects[Effect::STRENGTH] = new Effect(Effect::STRENGTH, "%potion.damageBoost", 147, 36, 35);
-		//self::$effects[Effect::HEALING] = new InstantEffect(Effect::HEALING, "%potion.heal", 248, 36, 35);
-		//self::$effects[Effect::HARMING] = new InstantEffect(Effect::HARMING, "%potion.harm", 67, 10, 9, true);
+		self::$effects[Effect::HEALING] = new InstantEffect(Effect::HEALING, "%potion.heal", 248, 36, 35);
+		self::$effects[Effect::HARMING] = new InstantEffect(Effect::HARMING, "%potion.harm", 67, 10, 9, true);
 		self::$effects[Effect::JUMP] = new Effect(Effect::JUMP, "%potion.jump", 34, 255, 76);
 		self::$effects[Effect::NAUSEA] = new Effect(Effect::NAUSEA, "%potion.confusion", 85, 29, 74, true);
 		self::$effects[Effect::REGENERATION] = new Effect(Effect::REGENERATION, "%potion.regeneration", 205, 92, 171);
@@ -76,13 +76,15 @@ class Effect{
 		self::$effects[Effect::FIRE_RESISTANCE] = new Effect(Effect::FIRE_RESISTANCE, "%potion.fireResistance", 228, 154, 58);
 		self::$effects[Effect::WATER_BREATHING] = new Effect(Effect::WATER_BREATHING, "%potion.waterBreathing", 46, 82, 153);
 		self::$effects[Effect::INVISIBILITY] = new Effect(Effect::INVISIBILITY, "%potion.invisibility", 127, 131, 146);
-		//Hunger
+		self::$effects[Effect::HUNGER] = new Effect(Effect::HUNGER, "%potion.hunger", 79, 145, 49, true);
 		self::$effects[Effect::WEAKNESS] = new Effect(Effect::WEAKNESS, "%potion.weakness", 72, 77, 72 , true);
 		self::$effects[Effect::POISON] = new Effect(Effect::POISON, "%potion.poison", 78, 147, 49, true);
 		self::$effects[Effect::WITHER] = new Effect(Effect::WITHER, "%potion.wither", 53, 42, 39, true);
 		self::$effects[Effect::HEALTH_BOOST] = new Effect(Effect::HEALTH_BOOST, "%potion.healthBoost", 248, 125, 35);
-		//Absorption
-		//Saturation
+		self::$effects[Effect::ABSORPTION] = new Effect(Effect::ABSORPTION, "%potion.absorption", 38, 83, 166);
+		self::$effects[Effect::SATURATION] = new Effect(Effect::SATURATION, "%potion.saturation", 248, 32, 32);
+		self::$effects[Effect::BLINDNESS] = new Effect(Effect::BLINDNESS, "%potion.blindness", 31, 31, 35);
+		self::$effects[Effect::NIGHT_VISION] = new Effect(Effect::NIGHT_VISION, "%potion.nightVision", 31, 31, 163);
 	}
 
 	/**
@@ -249,7 +251,7 @@ class Effect{
 				$pk->eventId = MobEffectPacket::EVENT_ADD;
 			}
 
-			$entity->dataPacket($pk);
+			$entity->dataPacket($pk->setChannel(Network::CHANNEL_WORLD_EVENTS));
 		}
 
 		if($this->id === Effect::INVISIBILITY){
@@ -265,7 +267,7 @@ class Effect{
 			$pk->eventId = MobEffectPacket::EVENT_REMOVE;
 			$pk->effectId = $this->getId();
 
-			$entity->dataPacket($pk);
+			$entity->dataPacket($pk->setChannel(Network::CHANNEL_WORLD_EVENTS));
 		}
 
 		if($this->id === Effect::INVISIBILITY){
diff --git a/src/pocketmine/entity/Egg.php b/src/pocketmine/entity/Egg.php
index cef660e..7877976 100644
--- a/src/pocketmine/entity/Egg.php
+++ b/src/pocketmine/entity/Egg.php
@@ -22,6 +22,58 @@
 namespace pocketmine\entity;
 
 
+use pocketmine\level\format\FullChunk;
+use pocketmine\nbt\tag\Compound;
+use pocketmine\network\Network;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\Player;
+
 class Egg extends Projectile{
+	const NETWORK_ID = 82;
+
+	public $width = 0.25;
+	public $length = 0.25;
+	public $height = 0.25;
+
+	protected $gravity = 0.03;
+	protected $drag = 0.01;
+
+	public function __construct(FullChunk $chunk, Compound $nbt, Entity $shootingEntity = null){
+		parent::__construct($chunk, $nbt, $shootingEntity);
+	}
+
+	public function onUpdate($currentTick){
+		if($this->closed){
+			return false;
+		}
+
+		$this->timings->startTiming();
+
+		$hasUpdate = parent::onUpdate($currentTick);
+
+		if($this->age > 1200 or $this->isCollided){
+			$this->kill();
+			$hasUpdate = true; //Chance to spawn chicken
+		}
+
+		$this->timings->stopTiming();
+
+		return $hasUpdate;
+	}
+
+	public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->type = Egg::NETWORK_ID;
+		$pk->eid = $this->getId();
+		$pk->x = $this->x;
+		$pk->y = $this->y;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk);
 
-}
\ No newline at end of file
+		parent::spawnTo($player);
+	}
+}
diff --git a/src/pocketmine/entity/Enderman.php b/src/pocketmine/entity/Enderman.php
index 86d8eaf..bcbb41e 100644
--- a/src/pocketmine/entity/Enderman.php
+++ b/src/pocketmine/entity/Enderman.php
@@ -23,7 +23,20 @@ namespace pocketmine\entity;
 
 
 use pocketmine\inventory\InventoryHolder;
-
+use pocketmine\inventory\Inventory;
 class Enderman extends Monster implements InventoryHolder{
+	private $inventory;
+
+	public function __construct() {
+		$this->inventory = new Inventory();
+	}
+
+        public function getName() {
+                return "Enderman";
+        }
+
+	public function getInventory() {
+		return $this->inventory;
+	}
 
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/entity/Entity.php b/src/pocketmine/entity/Entity.php
index 96ea8d4..6620435 100644
--- a/src/pocketmine/entity/Entity.php
+++ b/src/pocketmine/entity/Entity.php
@@ -597,9 +597,9 @@ abstract class Entity extends Location implements Metadatable{
 	 */
     public function attack($damage, EntityDamageEvent $source){
         if($this->hasEffect(Effect::FIRE_RESISTANCE)
-            and $source->getCause() === EntityDamageEvent::CAUSE_FIRE
-            and $source->getCause() === EntityDamageEvent::CAUSE_FIRE_TICK
-            and $source->getCause() === EntityDamageEvent::CAUSE_LAVA){
+            and ($source->getCause() === EntityDamageEvent::CAUSE_FIRE
+            or $source->getCause() === EntityDamageEvent::CAUSE_FIRE_TICK
+            or $source->getCause() === EntityDamageEvent::CAUSE_LAVA)){
             $source->setCancelled();
         }
 
diff --git a/src/pocketmine/entity/Ghast.php b/src/pocketmine/entity/Ghast.php
new file mode 100644
index 00000000..6d87332
--- /dev/null
+++ b/src/pocketmine/entity/Ghast.php
@@ -0,0 +1,76 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\entity;
+
+use pocketmine\item\Item as Dr;
+use pocketmine\event\entity\EntityDamageByEntityEvent;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\Player;
+use pocketmine\network\Network;
+use pocketmine\network\protocol\MovePlayerPacket;
+use pocketmine\math\AxisAlignedBB;
+use pocketmine\math\Vector3;
+
+
+class Ghast extends Monster{
+	const NETWORK_ID = 41;
+	public $width = 1;
+	public $length = 1.5;
+	public $height = 1.5;
+ public static $range = 16;
+	public static $speed = 0.25;
+	public static $jump = 1.8;
+	public static $mindist = 3;
+
+public function initEntity(){
+		$this->setMaxHealth(1);
+		parent::initEntity();
+	}
+
+	public function getName(){
+		return "Ghast";
+	}
+
+	 public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = Ghast::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y+2;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk->setChannel(Network::CHANNEL_ENTITY_SPAWNING));
+		$player->addEntityMotion($this->getId(), $this->motionX, $this->motionY, $this->motionZ);
+		parent::spawnTo($player);
+	}
+
+	public function getDrops(){
+		return [];
+	}
+
+
+}
diff --git a/src/pocketmine/entity/Human.php b/src/pocketmine/entity/Human.php
index 34e15f7..ad1ca8a 100644
--- a/src/pocketmine/entity/Human.php
+++ b/src/pocketmine/entity/Human.php
@@ -2,11 +2,11 @@
 
 /*
  *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
  * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
@@ -15,7 +15,7 @@
  *
  * @author PocketMine Team
  * @link http://www.pocketmine.net/
- * 
+ *
  *
 */
 
@@ -59,6 +59,7 @@ class Human extends Creature implements ProjectileSource, InventoryHolder{
 
 	protected $skin;
 	protected $isSlim = false;
+	protected $skinTransparency = false;
 
 	public function getSkinData(){
 		return $this->skin;
@@ -68,6 +69,10 @@ class Human extends Creature implements ProjectileSource, InventoryHolder{
 		return $this->isSlim;
 	}
 
+	public function isSkinTransparent(){
+		return $this->skinTransparency;
+	}
+
 	/**
 	 * @return UUID|null
 	 */
@@ -85,10 +90,12 @@ class Human extends Creature implements ProjectileSource, InventoryHolder{
 	/**
 	 * @param string $str
 	 * @param bool   $isSlim
+	 * @param bool   $skinTransparency
 	 */
-	public function setSkin($str, $isSlim = false){
+	public function setSkin($str, $isSlim = false, $skinTransparency = false){
 		$this->skin = $str;
 		$this->isSlim = (bool) $isSlim;
+		$this->skinTransparency = $skinTransparency;
 	}
 
 	public function getInventory(){
diff --git a/src/pocketmine/entity/MagmaCube.php b/src/pocketmine/entity/MagmaCube.php
new file mode 100644
index 00000000..b6125b8
--- /dev/null
+++ b/src/pocketmine/entity/MagmaCube.php
@@ -0,0 +1,61 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\entity;
+
+use pocketmine\item\Item as Dr;
+use pocketmine\event\entity\EntityDamageByEntityEvent;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\Player;
+use pocketmine\network\Network;
+
+class MagmaCube extends Monster{
+	const NETWORK_ID = 42;
+	public $width = 1;
+	public $length = 1.5;
+	public $height = 1.5;
+
+	public function getName(){
+		return "Magma Cube";
+	}
+
+	 public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = MagmaCube::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y+2;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk->setChannel(Network::CHANNEL_ENTITY_SPAWNING));
+		$player->addEntityMotion($this->getId(), $this->motionX, $this->motionY, $this->motionZ);
+		parent::spawnTo($player);
+	}
+
+	public function getDrops(){
+		return [];
+	}
+}
diff --git a/src/pocketmine/entity/Mooshroom.php b/src/pocketmine/entity/Mooshroom.php
new file mode 100644
index 00000000..effaf30
--- /dev/null
+++ b/src/pocketmine/entity/Mooshroom.php
@@ -0,0 +1,58 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\entity;
+
+use pocketmine\item\Item as Dr;
+use pocketmine\event\entity\EntityDamageByEntityEvent;
+use pocketmine\network\protocol\AddEntityPacket;
+use pocketmine\Player;
+use pocketmine\network\Network;
+
+class Mooshroom extends Animal{
+	const NETWORK_ID=16;
+
+	public function getName(){
+		return "Mooshroom";
+	}
+
+	 public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = Mooshroom::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y+2;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk->setChannel(Network::CHANNEL_ENTITY_SPAWNING));
+		$player->addEntityMotion($this->getId(), $this->motionX, $this->motionY, $this->motionZ);
+		parent::spawnTo($player);
+	}
+	
+	public function getDrops(){
+		return [];
+	}
+}
diff --git a/src/pocketmine/entity/Pig.php b/src/pocketmine/entity/Pig.php
index 9505d49..d8f3c02 100644
--- a/src/pocketmine/entity/Pig.php
+++ b/src/pocketmine/entity/Pig.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Pig extends Animal implements Rideable{
-
-}
\ No newline at end of file
+ public function getName() {
+                return "Pig";
+        }
+}
diff --git a/src/pocketmine/entity/Sheep.php b/src/pocketmine/entity/Sheep.php
index bf2e1fa..fd9e91c 100644
--- a/src/pocketmine/entity/Sheep.php
+++ b/src/pocketmine/entity/Sheep.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Sheep extends Animal implements Colorable{
-
-}
\ No newline at end of file
+ 	public function getName() {
+                return "Sheep";
+        }
+}
diff --git a/src/pocketmine/entity/Silverfish.php b/src/pocketmine/entity/Silverfish.php
index da67d7c..7488e1d 100644
--- a/src/pocketmine/entity/Silverfish.php
+++ b/src/pocketmine/entity/Silverfish.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Silverfish extends Monster{
-
-}
\ No newline at end of file
+ 	public function getName() {
+                return "Silverfish";
+        }
+}
diff --git a/src/pocketmine/entity/Skeleton.php b/src/pocketmine/entity/Skeleton.php
index 152d2aa..7fe2e80 100644
--- a/src/pocketmine/entity/Skeleton.php
+++ b/src/pocketmine/entity/Skeleton.php
@@ -22,5 +22,7 @@
 namespace pocketmine\entity;
 
 class Skeleton extends Monster implements ProjectileSource{
-
+ 	public function getName() {
+                return "Skeleton";
+        }
 }
diff --git a/src/pocketmine/entity/Slime.php b/src/pocketmine/entity/Slime.php
index 66f78d4..ed5c523 100644
--- a/src/pocketmine/entity/Slime.php
+++ b/src/pocketmine/entity/Slime.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Slime extends Living{
-
-}
\ No newline at end of file
+ 	public function getName() {
+                return "Slime";
+        }
+}
diff --git a/src/pocketmine/entity/Spider.php b/src/pocketmine/entity/Spider.php
index 4e510f2..d043df7 100644
--- a/src/pocketmine/entity/Spider.php
+++ b/src/pocketmine/entity/Spider.php
@@ -23,5 +23,7 @@ namespace pocketmine\entity;
 
 
 class Spider extends Monster{
-
-}
\ No newline at end of file
+ 	public function getName() {
+                return "Spider";
+        }
+}
diff --git a/src/pocketmine/entity/Wolf.php b/src/pocketmine/entity/Wolf.php
index cfa2c06..afc53be 100644
--- a/src/pocketmine/entity/Wolf.php
+++ b/src/pocketmine/entity/Wolf.php
@@ -20,7 +20,7 @@
 */
 
 namespace pocketmine\entity;
-
+use pocketmine\Player;
 
 class Wolf extends Animal implements Tameable{
 
@@ -29,4 +29,22 @@ class Wolf extends Animal implements Tameable{
 	public function getName(){
 		return "Wolf";
 	}
-}
\ No newline at end of file
+	
+	public function spawnTo(Player $player){
+		$pk = new AddEntityPacket();
+		$pk->eid = $this->getId();
+		$pk->type = Wolf::NETWORK_ID;
+		$pk->x = $this->x;
+		$pk->y = $this->y;
+		$pk->z = $this->z;
+		$pk->speedX = $this->motionX;
+		$pk->speedY = $this->motionY;
+		$pk->speedZ = $this->motionZ;
+		$pk->yaw = $this->yaw;
+		$pk->pitch = $this->pitch;
+		$pk->metadata = $this->dataProperties;
+		$player->dataPacket($pk);
+
+		parent::spawnTo($player);
+	}
+}
diff --git a/src/pocketmine/entity/Zombie.php b/src/pocketmine/entity/Zombie.php
index 1332b0e..bf65528 100644
--- a/src/pocketmine/entity/Zombie.php
+++ b/src/pocketmine/entity/Zombie.php
@@ -59,7 +59,7 @@ class Zombie extends Monster{
 
 	public function getDrops(){
 		$drops = [
-			ItemItem::get(ItemItem::FEATHER, 0, 1)
+			ItemItem::get(ItemItem::ROTTEN_FLESH, 0, 1)
 		];
 		if($this->lastDamageCause instanceof EntityDamageByEntityEvent and $this->lastDamageCause->getEntity() instanceof Player){
 			if(mt_rand(0, 199) < 5){
diff --git a/src/pocketmine/event/inventory/CraftItemEvent.php b/src/pocketmine/event/inventory/CraftItemEvent.php
index 41d8640..b5c466b 100644
--- a/src/pocketmine/event/inventory/CraftItemEvent.php
+++ b/src/pocketmine/event/inventory/CraftItemEvent.php
@@ -25,6 +25,7 @@ use pocketmine\event\Cancellable;
 use pocketmine\event\Event;
 use pocketmine\inventory\Recipe;
 use pocketmine\item\Item;
+use pocketmine\Player;
 
 class CraftItemEvent extends Event implements Cancellable{
 	public static $handlerList = null;
@@ -33,12 +34,17 @@ class CraftItemEvent extends Event implements Cancellable{
 	private $input = [];
 	/** @var Recipe */
 	private $recipe;
+	/** @var \pocketmine\Player */
+	private $player;
+
 
 	/**
+	 * @param \pocketmine\Player $player
 	 * @param Item[] $input
 	 * @param Recipe $recipe
 	 */
-	public function __construct(array $input, Recipe $recipe){
+	public function __construct(Player $player, array $input, Recipe $recipe){
+		$this->player = $player;
 		$this->input = $input;
 		$this->recipe = $recipe;
 	}
@@ -62,4 +68,10 @@ class CraftItemEvent extends Event implements Cancellable{
 		return $this->recipe;
 	}
 
-}
\ No newline at end of file
+	/**
+	 * @return \pocktemine\Player
+	 */
+	public function getPlayer(){
+		return $this->player;
+	}
+}
diff --git a/src/pocketmine/event/server/QueryRegenerateEvent.php b/src/pocketmine/event/server/QueryRegenerateEvent.php
index 1f3028b..90c1117 100644
--- a/src/pocketmine/event/server/QueryRegenerateEvent.php
+++ b/src/pocketmine/event/server/QueryRegenerateEvent.php
@@ -216,7 +216,7 @@ class QueryRegenerateEvent extends ServerEvent{
 	}
 
 	public function getShortQuery(){
-		return $this->serverName . "\x00" . $this->gametype . "\x00" . $this->map . "\x00" . $this->numPlayers . "\x00" . $this->maxPlayers . "\x00" . Binary::writeLShort($this->port) . $this->ip . "\x00";
+		return $this->serverName . "\x00" . $this->gametype . "\x00" . $this->map . "\x00" . $this->numPlayers . "\x00" . $this->maxPlayers . "\x00" . pack("v", $this->port) . $this->ip . "\x00";
 	}
 
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/gui b/src/pocketmine/gui
deleted file mode 160000
index b551c3d..00000000
--- a/src/pocketmine/gui
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit b551c3d58ec2fd9fa0f3c92d36fcbaa5c70467f7
diff --git a/src/pocketmine/inventory/BaseInventory.php b/src/pocketmine/inventory/BaseInventory.php
index 12cd438..dee23dd 100644
--- a/src/pocketmine/inventory/BaseInventory.php
+++ b/src/pocketmine/inventory/BaseInventory.php
@@ -385,7 +385,7 @@ abstract class BaseInventory implements Inventory{
 	}
 
 	public function setMaxStackSize($size){
-		$this->setMaxStackSize($size);
+		$this->maxStackSize = (int) $size;
 	}
 
 	public function open(Player $who){
diff --git a/src/pocketmine/inventory/BrewingInventory.php b/src/pocketmine/inventory/BrewingInventory.php
new file mode 100644
index 00000000..74dccef
--- /dev/null
+++ b/src/pocketmine/inventory/BrewingInventory.php
@@ -0,0 +1,77 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ *
+ *
+*/
+
+namespace pocketmine\inventory;
+
+
+use pocketmine\item\Item;
+use pocketmine\tile\BrewingStand;
+
+class BrewingInventory extends ContainerInventory{
+	public function __construct(BrewingStand $tile){
+		parent::__construct($tile, InventoryType::get(InventoryType::BREWING_STAND));
+	}
+
+	/**
+	 * @return BrewingStand
+	 */
+	public function getHolder(){
+		return $this->holder;
+	}
+
+	/**
+	 * @return Item
+	 */
+	public function getResult(){
+		return $this->getItem(1);
+	}
+
+	/**
+	 * @return Item
+	 */
+	public function getIngredient(){
+		return $this->getItem(3);
+	}
+
+	/**
+	 * @param Item $item
+	 *
+	 * @return bool
+	 */
+	public function setResult(Item $item){
+		return $this->setItem(1, $item);
+	}
+
+	/**
+	 * @param Item $item
+	 *
+	 * @return bool
+	 */
+	public function setBrewing(Item $item){
+		return $this->setItem(0, $item);
+	}
+
+	public function onSlotChange($index, $before){
+		parent::onSlotChange($index, $before);
+
+		$this->getHolder()->scheduleUpdate();
+	}
+}
diff --git a/src/pocketmine/inventory/BrewingRecipe.php b/src/pocketmine/inventory/BrewingRecipe.php
new file mode 100644
index 00000000..9394397
--- /dev/null
+++ b/src/pocketmine/inventory/BrewingRecipe.php
@@ -0,0 +1,84 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ *
+ *
+*/
+
+namespace pocketmine\inventory;
+
+use pocketmine\item\Item;
+use pocketmine\Server;
+use pocketmine\utils\UUID;
+
+class BrewingRecipe implements Recipe{
+
+	private $id = null;
+
+	/** @var Item */
+	private $output;
+
+	/** @var Item */
+	private $ingredient;
+
+	/**
+	 * @param Item $result
+	 * @param Item $ingredient
+	 */
+	public function __construct(Item $result, Item $ingredient, Item $bottle){
+		$this->output = clone $result;
+		$this->ingredient = clone $ingredient;
+		$this->bottle = clone $bottle;
+	}
+
+	public function getId(){
+		return $this->id;
+	}
+
+	public function setId(UUID $id){
+		if($this->id !== null){
+			throw new \InvalidStateException("Id is already set");
+		}
+
+		$this->id = $id;
+	}
+
+	/**
+	 * @param Item $item
+	 */
+	public function setInput(Item $item){
+		$this->ingredient = clone $item;
+	}
+
+	/**
+	 * @return Item
+	 */
+	public function getInput(){
+		return clone $this->ingredient;
+	}
+
+	/**
+	 * @return Item
+	 */
+	public function getResult(){
+		return clone $this->output;
+	}
+
+	public function registerToCraftingManager(){
+		Server::getInstance()->getCraftingManager()->registerBrewingRecipe($this);
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/inventory/ChestInventory.php b/src/pocketmine/inventory/ChestInventory.php
index bfa764d..20cf04f 100644
--- a/src/pocketmine/inventory/ChestInventory.php
+++ b/src/pocketmine/inventory/ChestInventory.php
@@ -23,7 +23,7 @@ namespace pocketmine\inventory;
 
 use pocketmine\level\Level;
 use pocketmine\network\Network;
-use pocketmine\network\protocol\TileEventPacket;
+use pocketmine\network\protocol\BlockEventPacket;
 use pocketmine\Player;
 
 use pocketmine\tile\Chest;
@@ -44,7 +44,7 @@ class ChestInventory extends ContainerInventory{
 		parent::onOpen($who);
 
 		if(count($this->getViewers()) === 1){
-			$pk = new TileEventPacket();
+			$pk = new BlockEventPacket();
 			$pk->x = $this->getHolder()->getX();
 			$pk->y = $this->getHolder()->getY();
 			$pk->z = $this->getHolder()->getZ();
@@ -58,7 +58,7 @@ class ChestInventory extends ContainerInventory{
 
 	public function onClose(Player $who){
 		if(count($this->getViewers()) === 1){
-			$pk = new TileEventPacket();
+			$pk = new BlockEventPacket();
 			$pk->x = $this->getHolder()->getX();
 			$pk->y = $this->getHolder()->getY();
 			$pk->z = $this->getHolder()->getZ();
@@ -70,4 +70,4 @@ class ChestInventory extends ContainerInventory{
 		}
 		parent::onClose($who);
 	}
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/inventory/CraftingManager.php b/src/pocketmine/inventory/CraftingManager.php
index 381cbae..de59afe 100644
--- a/src/pocketmine/inventory/CraftingManager.php
+++ b/src/pocketmine/inventory/CraftingManager.php
@@ -21,8 +21,15 @@
 
 namespace pocketmine\inventory;
 
+
 use pocketmine\block\Planks;
+use pocketmine\block\Quartz;
+use pocketmine\block\Sandstone;
+use pocketmine\block\Slab;
+use pocketmine\block\Fence;
 use pocketmine\block\Stone;
+use pocketmine\block\StoneBricks;
+use pocketmine\block\StoneWall;
 use pocketmine\block\Wood;
 use pocketmine\block\Wood2;
 use pocketmine\item\Item;
@@ -43,7 +50,7 @@ class CraftingManager{
 
 	public function __construct(){
 
-		$this->registerStonecutter();
+	
 		$this->registerFurnace();
 
 
@@ -67,7 +74,7 @@ class CraftingManager{
 		$this->registerRecipe((new ShapedRecipe(Item::get(Item::SNOW_BLOCK, 0, 1),
 			"XX",
 			"XX"
-		))->setIngredient("X", Item::get(Item::SNOWBALL)));
+		))->setIngredient("X", Item::get(Item::SNOWBALL, 0, 16)));
 
 		$this->registerRecipe((new ShapelessRecipe(Item::get(Item::SNOW_LAYER, 0, 6)))->addIngredient(Item::get(Item::SNOW_BLOCK, 0, 3)));
 
@@ -76,11 +83,6 @@ class CraftingManager{
 			"X "
 		))->setIngredient("X", Item::get(Item::WOODEN_PLANK, null)));
 
-		$this->registerRecipe((new ShapedRecipe(Item::get(Item::STONECUTTER, 0, 1),
-			"XX",
-			"XX"
-		))->setIngredient("X", Item::get(Item::COBBLESTONE)));
-
 		$this->registerRecipe((new ShapedRecipe(Item::get(Item::WOODEN_PLANK, Planks::OAK, 4),
 			"X"
 		))->setIngredient("X", Item::get(Item::WOOD, Wood::OAK, 1)));
@@ -110,56 +112,286 @@ class CraftingManager{
 			"XX"
 		))->setIngredient("X", Item::get(Item::STRING, 0, 4)));
 
-		$this->registerRecipe((new ShapelessRecipe(Item::get(Item::TORCH, 0, 4)))->addIngredient(Item::get(Item::COAL, 0, 1))->addIngredient(Item::get(Item::STICK, 0, 1)));
-		$this->registerRecipe((new ShapelessRecipe(Item::get(Item::TORCH, 0, 4)))->addIngredient(Item::get(Item::COAL, 1, 1))->addIngredient(Item::get(Item::STICK, 0, 1)));
-		$this->registerRecipe((new ShapelessRecipe(Item::get(Item::SUGAR, 0, 1)))->addIngredient(Item::get(Item::SUGARCANE, 0, 1)));
-
-
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::BED, 0, 1)))->addIngredient(Item::get(Item::WOOL, null, 3))->addIngredient(Item::get(Item::WOODEN_PLANK, null, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::CHEST, 0, 1)))->addIngredient(Item::get(Item::WOODEN_PLANK, null, 8)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE, 0, 3)))->addIngredient(Item::get(Item::STICK, 0, 2))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::OAK, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE, Planks::SPRUCE, 3)))->addIngredient(Item::get(Item::STICK, 0, 2))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE, Planks::BIRCH, 3)))->addIngredient(Item::get(Item::STICK, 0, 2))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE, Planks::JUNGLE, 3)))->addIngredient(Item::get(Item::STICK, 0, 2))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE, Planks::ACACIA, 3)))->addIngredient(Item::get(Item::STICK, 0, 2))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE, Planks::DARK_OAK, 3)))->addIngredient(Item::get(Item::STICK, 0, 2))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE_GATE, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 4))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::OAK, 2)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE_GATE_SPRUCE, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 4))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 2)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE_GATE_BIRCH, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 4))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 2)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE_GATE_JUNGLE, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 4))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 2)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE_GATE_DARK_OAK, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 4))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 2)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FENCE_GATE_ACACIA, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 4))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 2)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::FURNACE, 0, 1)))->addIngredient(Item::get(Item::COBBLESTONE, 0, 8)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::GLASS_PANE, 0, 16)))->addIngredient(Item::get(Item::GLASS, 0, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::LADDER, 0, 2)))->addIngredient(Item::get(Item::STICK, 0, 7)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::NETHER_REACTOR, 0, 1)))->addIngredient(Item::get(Item::DIAMOND, 0, 3))->addIngredient(Item::get(Item::IRON_INGOT, 0, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::TRAPDOOR, 0, 2)))->addIngredient(Item::get(Item::WOODEN_PLANK, null, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOODEN_DOOR, 0, 1)))->addIngredient(Item::get(Item::WOODEN_PLANK, null, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOODEN_STAIRS, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::OAK, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOOD_SLAB, Planks::OAK, 6)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::OAK, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::SPRUCE_WOOD_STAIRS, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOOD_SLAB, Planks::SPRUCE, 6)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::BIRCH_WOOD_STAIRS, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOOD_SLAB, Planks::BIRCH, 6)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::JUNGLE_WOOD_STAIRS, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOOD_SLAB, Planks::JUNGLE, 6)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::ACACIA_WOOD_STAIRS, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOOD_SLAB, Planks::ACACIA, 6)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::DARK_OAK_WOOD_STAIRS, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 6)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::WOOD_SLAB, Planks::DARK_OAK, 6)))->addIngredient(Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 3)));
-
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::BUCKET, 0, 1)))->addIngredient(Item::get(Item::IRON_INGOT, 0, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::CLOCK, 0, 1)))->addIngredient(Item::get(Item::GOLD_INGOT, 0, 4))->addIngredient(Item::get(Item::REDSTONE_DUST, 0, 1)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::COMPASS, 0, 1)))->addIngredient(Item::get(Item::IRON_INGOT, 0, 4))->addIngredient(Item::get(Item::REDSTONE_DUST, 0, 1)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::TNT, 0, 1)))->addIngredient(Item::get(Item::GUNPOWDER, 0, 5))->addIngredient(Item::get(Item::SAND, null, 4)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::BOWL, 0, 4)))->addIngredient(Item::get(Item::WOODEN_PLANKS, null, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::MINECART, 0, 1)))->addIngredient(Item::get(Item::IRON_INGOT, 0, 5)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::BOOK, 0, 1)))->addIngredient(Item::get(Item::PAPER, 0, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::BOOKSHELF, 0, 1)))->addIngredient(Item::get(Item::WOODEN_PLANK, null, 6))->addIngredient(Item::get(Item::BOOK, 0, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::PAINTING, 0, 1)))->addIngredient(Item::get(Item::STICK, 0, 8))->addIngredient(Item::get(Item::WOOL, null, 1)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::PAPER, 0, 1)))->addIngredient(Item::get(Item::SUGARCANE, 0, 3)));
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::SIGN, 0, 3)))->addIngredient(Item::get(Item::STICK, 0, 1))->addIngredient(Item::get(Item::WOODEN_PLANKS, null, 6))); //TODO: check if it gives one sign or three
-		$this->registerRecipe((new BigShapelessRecipe(Item::get(Item::IRON_BARS, 0, 16)))->addIngredient(Item::get(Item::IRON_INGOT, 0, 6)));
+		$this->registerRecipe((new ShapedRecipe(Item::get(Item::TORCH, 0, 4),
+			"C ",
+			"S"
+		))->setIngredient("C", Item::get(Item::COAL,0,1))->setIngredient("S", Item::get(Item::STICK,0,1)));
+
+		$this->registerRecipe((new ShapedRecipe(Item::get(Item::TORCH, 0, 4),
+			"C ",
+			"S"
+		))->setIngredient("C", Item::get(Item::COAL, 1, 1))->setIngredient("S", Item::get(Item::STICK, 0, 1)));
+
+		$this->registerRecipe((new ShapedRecipe(Item::get(Item::SUGAR, 0, 1),
+			"S"
+		))->setIngredient("S", Item::get(Item::SUGARCANE, 0, 1)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BED, 0, 1),
+			"WWW",
+			"PPP"
+		))->setIngredient("W", Item::get(Item::WOOL, null, 3))->setIngredient("P", Item::get(Item::WOODEN_PLANK, null, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::CHEST, 0, 1),
+			"PPP",
+			"P P",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, null, 8)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE, 0, 3),
+			"PSP",
+			"PSP"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 2))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::OAK, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE, Planks::SPRUCE, 3),
+			"PSP",
+			"PSP"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 2))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE, Planks::BIRCH, 3),
+			"PSP",
+			"PSP"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 2))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE, Planks::JUNGLE, 3),
+			"PSP",
+			"PSP"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 2))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE, Planks::ACACIA, 3),
+			"PSP",
+			"PSP"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 2))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE, Planks::DARK_OAK, 3),
+			"PSP",
+			"PSP"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 2))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE_GATE, 0, 1),
+			"SPS",
+			"SPS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 4))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::OAK, 2)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE_GATE_SPRUCE, 0, 1),
+			"SPS",
+			"SPS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 4))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 2)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE_GATE_BIRCH, 0, 1),
+			"SPS",
+			"SPS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 4))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 2)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE_GATE_JUNGLE, 0, 1),
+			"SPS",
+			"SPS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 4))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 2)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE_GATE_DARK_OAK, 0, 1),
+			"SPS",
+			"SPS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 4))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 2)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FENCE_GATE_ACACIA, 0, 1),
+			"SPS",
+			"SPS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 4))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 2)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::FURNACE, 0, 1),
+			"CCC",
+			"C C",
+			"CCC"
+		))->setIngredient("C", Item::get(Item::COBBLESTONE, 0, 8)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::GLASS_PANE, 0, 16),
+			"GGG",
+			"GGG"
+		))->setIngredient("G", Item::get(Item::GLASS, 0, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::LADDER, 0, 2),
+			"S S",
+			"SSS",
+			"S S"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 7)));
+
+/* 		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::NETHER_REACTOR, 0, 1),
+			"IDI",
+			"IDI",
+			"IDI"
+		))->setIngredient("D", Item::get(Item::DIAMOND, 0, 3))->setIngredient("I", Item::get(Item::IRON_INGOT, 0, 6))); */
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::TRAPDOOR, 0, 2),
+			"PPP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, null, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::OAK_DOOR, 0, 1),
+			"PP",
+			"PP",
+			"PP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::OAK, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::SPRUCE_DOOR, 0, 1),
+			"PP",
+			"PP",
+			"PP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 6)));
+		
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BIRCH_DOOR, 0, 1),
+			"PP",
+			"PP",
+			"PP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::JUNGLE_DOOR, 0, 1),
+			"PP",
+			"PP",
+			"PP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 6)));
+		
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::ACACIA_DOOR, 0, 1),
+			"PP",
+			"PP",
+			"PP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::DARK_OAK_DOOR, 0, 1),
+			"PP",
+			"PP",
+			"PP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 6)));		
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOODEN_STAIRS, 0, 4),
+			"  P",
+			" PP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::OAK, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOOD_SLAB, Planks::OAK, 6),
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::OAK, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::SPRUCE_WOOD_STAIRS, 0, 4),
+			"  P",
+			" PP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOOD_SLAB, Planks::SPRUCE, 6),
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::SPRUCE, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BIRCH_WOOD_STAIRS, 0, 4),
+			"  P",
+			" PP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOOD_SLAB, Planks::BIRCH, 6),
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::BIRCH, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::JUNGLE_WOOD_STAIRS, 0, 4),
+			"P",
+			"PP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOOD_SLAB, Planks::JUNGLE, 6),
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::JUNGLE, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::ACACIA_WOOD_STAIRS, 0, 4),
+			"  P",
+			" PP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOOD_SLAB, Planks::ACACIA, 6),
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::ACACIA, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::DARK_OAK_WOOD_STAIRS, 0, 4),
+			"  P",
+			" PP",
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 6)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::WOOD_SLAB, Planks::DARK_OAK, 6),
+			"PPP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, Planks::DARK_OAK, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BUCKET, 0, 1),
+			"I I",
+			" I"
+		))->setIngredient("I", Item::get(Item::IRON_INGOT, 0, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::CLOCK, 0, 1),
+			" G",
+			"GR",
+			" G"
+		))->setIngredient("G", Item::get(Item::GOLD_INGOT, 0, 4))->setIngredient("R", Item::get(Item::REDSTONE_DUST, 0, 1)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::COMPASS, 0, 1),
+			" I ",
+			"IRI",
+			" I"
+		))->setIngredient("I", Item::get(Item::IRON_INGOT, 0, 4))->setIngredient("R", Item::get(Item::REDSTONE_DUST, 0, 1)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::TNT, 0, 1),
+			"GSG",
+			"SGS",
+			"GSG"
+		))->setIngredient("G", Item::get(Item::GUNPOWDER, 0, 5))->setIngredient("S", Item::get(Item::SAND, null, 4)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BOWL, 0, 4),
+			"P P",
+			" P"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANKS, null, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::MINECART, 0, 1),
+			"I I",
+			"III"
+		))->setIngredient("I", Item::get(Item::IRON_INGOT, 0, 5)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BOOK, 0, 1),
+			"P P",
+			" P "
+		))->setIngredient("P", Item::get(Item::PAPER, 0, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BOOKSHELF, 0, 1),
+			"PBP",
+			"PBP",
+			"PBP"
+		))->setIngredient("P", Item::get(Item::WOODEN_PLANK, null, 6))->setIngredient("B", Item::get(Item::BOOK, 0, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::PAINTING, 0, 1),
+			"SSS",
+			"SWS",
+			"SSS"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 8))->setIngredient("W", Item::get(Item::WOOL, null, 1)));
+
+		$this->registerRecipe((new ShapedRecipe(Item::get(Item::PAPER, 0, 3),
+			"SS",
+			"S"
+		))->setIngredient("S", Item::get(Item::SUGARCANE, 0, 3)));
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::SIGN, 0, 3),
+			"PPP",
+			"PPP",
+			" S"
+		))->setIngredient("S", Item::get(Item::STICK, 0, 1))->setIngredient("P", Item::get(Item::WOODEN_PLANKS, null, 6))); //TODO: check if it gives one sign or three
+
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::IRON_BARS, 0, 16),
+			"III",
+			"III",
+			"III"
+		))->setIngredient("I", Item::get(Item::IRON_INGOT, 0, 9)));
+		
+		$this->registerRecipe((new BigShapedRecipe(Item::get(Item::BREWING_STAND, 0, 1),
+			" B",
+			"CCC"
+		))->setIngredient("B", Item::get(Item::BLAZE_ROD, 0, 1))->setIngredient("C", Item::get(Item::COBBLESTONE, 0, 3)));
 	}
 
 	protected function registerFurnace(){
@@ -185,38 +417,56 @@ class CraftingManager{
 		$this->registerRecipe(new FurnaceRecipe(Item::get(Item::HARDENED_CLAY, 0, 1), Item::get(Item::CLAY_BLOCK, 0, 1)));
 	}
 
-	protected function registerStonecutter(){
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::QUARTZ_BLOCK, 0, 1)))->addIngredient(Item::get(Item::QUARTZ, 0, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::BRICK_STAIRS, 0, 4)))->addIngredient(Item::get(Item::BRICKS_BLOCK, 0, 6)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::BRICKS_BLOCK, 0, 1)))->addIngredient(Item::get(Item::BRICK, 0, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SLAB, 4, 6)))->addIngredient(Item::get(Item::BRICKS_BLOCK, 0, 3)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::QUARTZ_BLOCK, 1, 1)))->addIngredient(Item::get(Item::SLAB, 6, 2)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SLAB, 3, 6)))->addIngredient(Item::get(Item::COBBLESTONE, 0, 3)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::COBBLESTONE_WALL, 0, 6)))->addIngredient(Item::get(Item::COBBLESTONE, 0, 6)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::COBBLESTONE_WALL, 1, 6)))->addIngredient(Item::get(Item::MOSS_STONE, 0, 6)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::NETHER_BRICKS, 0, 1)))->addIngredient(Item::get(Item::NETHER_BRICK, 0, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::NETHER_BRICKS_STAIRS, 0, 4)))->addIngredient(Item::get(Item::NETHER_BRICKS, 0, 6)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::QUARTZ_BLOCK, 2, 2)))->addIngredient(Item::get(Item::QUARTZ_BLOCK, 0, 2)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SLAB, 6, 6)))->addIngredient(Item::get(Item::QUARTZ_BLOCK, 0, 3)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SANDSTONE_STAIRS, 0, 4)))->addIngredient(Item::get(Item::SANDSTONE, 0, 6)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SANDSTONE, 0, 1)))->addIngredient(Item::get(Item::SAND, 0, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SANDSTONE, 2, 4)))->addIngredient(Item::get(Item::SANDSTONE, 0, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SANDSTONE, 1, 1)))->addIngredient(Item::get(Item::SLAB, 1, 2)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SLAB, 1, 6)))->addIngredient(Item::get(Item::SANDSTONE, 0, 3)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE_BRICK_STAIRS, 0, 4)))->addIngredient(Item::get(Item::STONE_BRICK, null, 6)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE_BRICK, 0, 4)))->addIngredient(Item::get(Item::STONE, null, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE_BRICK, 3, 1)))->addIngredient(Item::get(Item::SLAB, 5, 2)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE_BRICK, 1, 1)))->addIngredient(Item::get(Item::STONE_BRICK, 0, 1))->addIngredient(Item::get(Item::VINES, 0, 1)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SLAB, 5, 6)))->addIngredient(Item::get(Item::STONE_BRICK, null, 3)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::SLAB, 0, 6)))->addIngredient(Item::get(Item::STONE, null, 3)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::COBBLESTONE_STAIRS, 0, 4)))->addIngredient(Item::get(Item::COBBLESTONE, 0, 6)));
-
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE, Stone::POLISHED_GRANITE, 4)))->addIngredient(Item::get(Item::STONE, Stone::GRANITE, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE, Stone::POLISHED_DIORITE, 4)))->addIngredient(Item::get(Item::STONE, Stone::DIORITE, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE, Stone::POLISHED_ANDESITE, 4)))->addIngredient(Item::get(Item::STONE, Stone::ANDESITE, 4)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE, Stone::GRANITE, 1)))->addIngredient(Item::get(Item::STONE, Stone::DIORITE, 1))->addIngredient(Item::get(Item::QUARTZ, 0, 1)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE, Stone::DIORITE, 2)))->addIngredient(Item::get(Item::COBBLESTONE, 0, 2))->addIngredient(Item::get(Item::QUARTZ, 0, 2)));
-		$this->registerRecipe((new StonecutterShapelessRecipe(Item::get(Item::STONE, Stone::ANDESITE, 2)))->addIngredient(Item::get(Item::COBBLESTONE, 0, 1))->addIngredient(Item::get(Item::STONE, Stone::DIORITE, 1)));
+	protected function registerBrewingStand(){
+		$this->registerRecipe(new BrewingRecipe(Item::get(Item::POTION, 4, 1), Item::get(Item::NETHER_WART, 0, 1), Item::get(Item::POTION, 0, 1))); //Akward Potion
+		$this->registerRecipe(new BrewingRecipe(Item::get(Item::POTION, 14, 1), Item::get(Item::SUGAR, 0, 1), Item::get(Item::POTION, 4, 1))); //Swiftness
+		$this->registerRecipe(new BrewingRecipe(Item::get(Item::POTION, 15, 1), Item::get(Item::REDSTONE, 0, 1), Item::get(Item::POTION, 14, 1))); //Swiftness Extended
+		$this->registerRecipe(new BrewingRecipe(Item::get(Item::POTION, 14, 1), Item::get(Item::GLOWSTONE_DUST, 0, 1), Item::get(Item::POTION, 14, 1))); //Swiftness II
+
+	}
+	private function sortAndAddRecipesArray(&$recipes){
+		// Sort the recipes based on the result item name with the bubblesort algoritm.
+		for ($i = 0; $i < count($recipes); ++$i){
+			$current = $recipes[$i];
+			$result = $current->getResult();
+			for ($j = count($recipes)-1; $j > $i; --$j)
+			{
+				if ($this->sort($result, $recipes[$j]->getResult())>0){
+					$swap = $current;
+					$current = $recipes[$j];
+					$recipes[$j] = $swap;
+					$result = $current->getResult();
+				}
+			}
+			$this->registerRecipe($current);
+		}            
+	}
+
+	private function createOneIngedientRecipe($recipeshape, $resultitem, $resultitemmeta, $resultitemamound, $ingedienttype, $ingredientmeta, $ingredientname, $inventoryType = ""){
+		$ingredientamount = 0;
+		$height = 0;
+		// count how many of the ingredient are in the recipe and check height for big or small recipe.
+		foreach ($recipeshape as $line){
+			$height += 1;
+			$width = strlen($line);
+			$ingredientamount += substr_count($line, $ingredientname);
+		}		
+		$recipe = null;
+		if ($height < 3){
+			// Process small recipe
+			$fullClassName = "pocketmine\\inventory\\".$inventoryType."ShapedRecipe";// $ShapeClass."ShapedRecipe";
+			$recipe = ((new $fullClassName(Item::get($resultitem, $resultitemmeta, $resultitemamound),
+				...$recipeshape
+			))->setIngredient($ingredientname, Item::get($ingedienttype, $ingredientmeta, $ingredientamount)));
+		}
+		else{
+			// Process big recipe
+			$fullClassName = "pocketmine\\inventory\\".$inventoryType."BigShapedRecipe";
+			$recipe = ((new $fullClassName(Item::get($resultitem, $resultitemmeta, $resultitemamound),
+				...$recipeshape
+			))->setIngredient($ingredientname, Item::get($ingedienttype, $ingredientmeta, $ingredientamount)));
+		}
+		return $recipe;
 	}
 
 	protected function registerFood(){
@@ -446,6 +696,13 @@ class CraftingManager{
 	public function getFurnaceRecipes(){
 		return $this->furnaceRecipes;
 	}
+	
+	/**
+	 * @return FurnaceRecipe[]
+	 */
+	public function getBrewingRecipes(){
+		return $this->brewingRecipes;
+	}	
 
 	/**
 	 * @param Item $input
@@ -508,6 +765,14 @@ class CraftingManager{
 	}
 
 	/**
+	 * @param BrewingRecipe $recipe
+	 */
+	public function registerBrewingRecipe(BrewingRecipe $recipe){
+		$input = $recipe->getInput();
+		$this->brewingRecipes[$input->getId() . ":" . ($input->getDamage() === null ? "?" : $input->getDamage())] = $recipe;
+	}
+	
+	/**
 	 * @param ShapelessRecipe $recipe
 	 * @return bool
 	 */
@@ -577,6 +842,8 @@ class CraftingManager{
 			$this->registerShapelessRecipe($recipe);
 		}elseif($recipe instanceof FurnaceRecipe){
 			$this->registerFurnaceRecipe($recipe);
+		}elseif($recipe instanceof BrewingRecipe){
+			$this->registerBrewingRecipe($recipe);
 		}
 	}
 
diff --git a/src/pocketmine/inventory/CraftingTransactionGroup.php b/src/pocketmine/inventory/CraftingTransactionGroup.php
new file mode 100644
index 00000000..f5b50b9
--- /dev/null
+++ b/src/pocketmine/inventory/CraftingTransactionGroup.php
@@ -0,0 +1,111 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ *
+ *
+*/
+
+namespace pocketmine\inventory;
+
+use pocketmine\event\inventory\CraftItemEvent;
+use pocketmine\item\Item;
+use pocketmine\Server;
+
+class CraftingTransactionGroup extends SimpleTransactionGroup{
+	/** @var Item[] */
+	protected $input = [];
+	/** @var Item[] */
+	protected $output = [];
+
+	/** @var Recipe */
+	protected $recipe = null;
+
+	public function __construct(SimpleTransactionGroup $group){
+		parent::__construct();
+		$this->transactions = $group->getTransactions();
+		$this->inventories = $group->getInventories();
+		$this->source = $group->getSource();
+
+		$this->matchItems($this->output, $this->input);
+	}
+
+	public function addTransaction(Transaction $transaction){
+		parent::addTransaction($transaction);
+		$this->input = [];
+		$this->output = [];
+		$this->matchItems($this->output, $this->input);
+	}
+
+	/**
+	 * Gets the Items that have been used
+	 *
+	 * @return Item[]
+	 */
+	public function getRecipe(){
+		return $this->input;
+	}
+
+	/**
+	 * @return Item
+	 */
+	public function getResult(){
+		reset($this->output);
+
+		return current($this->output);
+	}
+
+	public function canExecute(){
+		if(count($this->output) !== 1 or count($this->input) === 0){
+			return false;
+		}
+
+		return $this->getMatchingRecipe() instanceof Recipe;
+	}
+
+	/**
+	 * @return Recipe
+	 */
+	public function getMatchingRecipe(){
+		if($this->recipe === null){
+			$this->recipe = Server::getInstance()->getCraftingManager()->matchTransaction($this);
+		}
+
+		return $this->recipe;
+	}
+
+	public function execute(){
+		if($this->hasExecuted() or !$this->canExecute()){
+			return false;
+		}
+
+		Server::getInstance()->getPluginManager()->callEvent($ev = new CraftItemEvent($this, $this->getMatchingRecipe()));
+		if($ev->isCancelled()){
+			foreach($this->inventories as $inventory){
+				$inventory->sendContents($inventory->getViewers());
+			}
+
+			return false;
+		}
+
+		foreach($this->transactions as $transaction){
+			$transaction->getInventory()->setContents($transaction->getViewers()->getSlot(), $transaction->getTargetItem(), $this->getSource());
+		}
+		$this->hasExecuted = true;
+
+		return true;
+	}
+}
diff --git a/src/pocketmine/inventory/DoubleChestInventory.php b/src/pocketmine/inventory/DoubleChestInventory.php
index 9cfd9ad..34b0b7b 100644
--- a/src/pocketmine/inventory/DoubleChestInventory.php
+++ b/src/pocketmine/inventory/DoubleChestInventory.php
@@ -24,7 +24,7 @@ namespace pocketmine\inventory;
 use pocketmine\item\Item;
 use pocketmine\level\Level;
 use pocketmine\network\Network;
-use pocketmine\network\protocol\TileEventPacket;
+use pocketmine\network\protocol\BlockEventPacket;
 use pocketmine\Player;
 
 use pocketmine\tile\Chest;
@@ -99,7 +99,7 @@ class DoubleChestInventory extends ChestInventory implements InventoryHolder{
 		parent::onOpen($who);
 
 		if(count($this->getViewers()) === 1){
-			$pk = new TileEventPacket();
+			$pk = new BlockEventPacket();
 			$pk->x = $this->right->getHolder()->getX();
 			$pk->y = $this->right->getHolder()->getY();
 			$pk->z = $this->right->getHolder()->getZ();
@@ -113,7 +113,7 @@ class DoubleChestInventory extends ChestInventory implements InventoryHolder{
 
 	public function onClose(Player $who){
 		if(count($this->getViewers()) === 1){
-			$pk = new TileEventPacket();
+			$pk = new BlockEventPacket();
 			$pk->x = $this->right->getHolder()->getX();
 			$pk->y = $this->right->getHolder()->getY();
 			$pk->z = $this->right->getHolder()->getZ();
@@ -139,4 +139,4 @@ class DoubleChestInventory extends ChestInventory implements InventoryHolder{
 	public function getRightSide(){
 		return $this->right;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/inventory/PlayerInventory.php b/src/pocketmine/inventory/PlayerInventory.php
index db3cac4..602e7fb 100644
--- a/src/pocketmine/inventory/PlayerInventory.php
+++ b/src/pocketmine/inventory/PlayerInventory.php
@@ -383,10 +383,19 @@ class PlayerInventory extends BaseInventory{
 		}
 
 		$pk = new ContainerSetContentPacket();
-		$pk;
 		$pk->slots = [];
-		for($i = 0; $i < $this->getSize(); ++$i){ //Do not send armor by error here
-			$pk->slots[$i] = $this->getItem($i);
+		$holder = $this->getHolder();
+		if($holder instanceof Player and $holder->isCreative()){
+			// mwvent - return because this packet causes problems - TODO: why?
+			return;
+			//TODO: Remove this workaround because of broken client
+			foreach(Item::getCreativeItems() as $i => $item){
+				$pk->slots[$i] = Item::getCreativeItem($i);
+			}
+		}else{
+			for($i = 0; $i < $this->getSize(); ++$i){ //Do not send armor by error here
+				$pk->slots[$i] = $this->getItem($i);
+			}
 		}
 
 		foreach($target as $player){
@@ -416,7 +425,6 @@ class PlayerInventory extends BaseInventory{
 		}
 
 		$pk = new ContainerSetSlotPacket();
-		$pk;
 		$pk->slot = $index;
 		$pk->item = clone $this->getItem($index);
 
diff --git a/src/pocketmine/inventory/StonecutterShapelessRecipe.php b/src/pocketmine/inventory/StonecutterShapelessRecipe.php
deleted file mode 100644
index e29e34c..00000000
--- a/src/pocketmine/inventory/StonecutterShapelessRecipe.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- *
- *
-*/
-
-namespace pocketmine\inventory;
-
-class StonecutterShapelessRecipe extends ShapelessRecipe{
-
-}
\ No newline at end of file
diff --git a/src/pocketmine/item/AcaciaDoor.php b/src/pocketmine/item/AcaciaDoor.php
new file mode 100644
index 00000000..eceabe9
--- /dev/null
+++ b/src/pocketmine/item/AcaciaDoor.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class AcaciaDoor extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::ACACIA_DOOR_BLOCK);
+		parent::__construct(self::ACACIA_DOOR, 0, $count, "Acacia Door");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Apple.php b/src/pocketmine/item/Apple.php
index d54b34b..7c1ddf1 100644
--- a/src/pocketmine/item/Apple.php
+++ b/src/pocketmine/item/Apple.php
@@ -22,9 +22,10 @@
 namespace pocketmine\item;
 
 
-class Apple extends Item{
+class Apple extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		parent::__construct(self::APPLE, 0, $count, "Apple");
 	}
-
+	public function isEatable(){}
+	
 }
\ No newline at end of file
diff --git a/src/pocketmine/item/Arrow.php b/src/pocketmine/item/Arrow.php
new file mode 100644
index 00000000..d92b562
--- /dev/null
+++ b/src/pocketmine/item/Arrow.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Arrow extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::ARROW, $meta, $count, "Arrow");
+	}
+
+}
+
diff --git a/src/pocketmine/item/BakedPotato.php b/src/pocketmine/item/BakedPotato.php
new file mode 100644
index 00000000..0b1ab70
--- /dev/null
+++ b/src/pocketmine/item/BakedPotato.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class BakedPotato extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BAKED_POTATO, $meta, $count, "Baked Potato");
+	}
+	public function isEatable(){}
+	
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Beetroot.php b/src/pocketmine/item/Beetroot.php
new file mode 100644
index 00000000..c0c4424
--- /dev/null
+++ b/src/pocketmine/item/Beetroot.php
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Beetroot extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BEETROOT, $meta, $count, "Beetroot");
+	}
+	public function isEatable() {
+		return true;
+	}
+	
+}
diff --git a/src/pocketmine/item/BeetrootSoup.php b/src/pocketmine/item/BeetrootSoup.php
index 8a7a242..0d7331b 100644
--- a/src/pocketmine/item/BeetrootSoup.php
+++ b/src/pocketmine/item/BeetrootSoup.php
@@ -22,7 +22,7 @@
 namespace pocketmine\item;
 
 
-class BeetrootSoup extends Item{
+class BeetrootSoup extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		parent::__construct(self::BEETROOT_SOUP, 0, $count, "Beetroot Soup");
 	}
@@ -30,4 +30,7 @@ class BeetrootSoup extends Item{
 	public function getMaxStackSize(){
 		return 1;
 	}
-}
\ No newline at end of file
+	public function isEatable() {
+		return true;
+	}	
+}
diff --git a/src/pocketmine/item/BirchDoor.php b/src/pocketmine/item/BirchDoor.php
new file mode 100644
index 00000000..483f43a
--- /dev/null
+++ b/src/pocketmine/item/BirchDoor.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class BirchDoor extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::BIRCH_DOOR_BLOCK);
+		parent::__construct(self::BIRCH_DOOR, 0, $count, "Birch Door");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/BlazeRod.php b/src/pocketmine/item/BlazeRod.php
new file mode 100644
index 00000000..a5852af
--- /dev/null
+++ b/src/pocketmine/item/BlazeRod.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class BlazeRod extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BLAZE_ROD, $meta, $count, "Blaze Rod");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Boat.php b/src/pocketmine/item/Boat.php
new file mode 100644
index 00000000..524e29a
--- /dev/null
+++ b/src/pocketmine/item/Boat.php
@@ -0,0 +1,45 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class Boat extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BOAT, $meta, $count, "Oak Boat");
+		if($this->meta === 1){
+			$this->name = "Spruce Boat";
+		}elseif($this->meta === 2){
+			$this->name = "Birch Boat";
+		}elseif($this->meta === 3){
+			$this->name = "Jungle Boat";
+		}elseif($this->meta === 4){
+			$this->name = "Acacia Boat";
+		}elseif($this->meta === 5){
+			$this->name = "Dark Oak Boat";
+		}
+	}
+	
+	public function getMaxStackSize(){
+		return 1;
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Bone.php b/src/pocketmine/item/Bone.php
new file mode 100644
index 00000000..095b15b
--- /dev/null
+++ b/src/pocketmine/item/Bone.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Bone extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BONE, $meta, $count, "Bone");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Book.php b/src/pocketmine/item/Book.php
new file mode 100644
index 00000000..ca89735
--- /dev/null
+++ b/src/pocketmine/item/Book.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Book extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BOOK, $meta, $count, "Book");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Bread.php b/src/pocketmine/item/Bread.php
new file mode 100644
index 00000000..488ea96
--- /dev/null
+++ b/src/pocketmine/item/Bread.php
@@ -0,0 +1,31 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Bread extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::BREAD, $meta, $count, "Bread");
+	}
+	public function isEatable() {
+		return true;
+	}	
+}
diff --git a/src/pocketmine/item/BrewingStand.php b/src/pocketmine/item/BrewingStand.php
new file mode 100644
index 00000000..7dff937
--- /dev/null
+++ b/src/pocketmine/item/BrewingStand.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class BrewingStand extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::BREWING_STAND_BLOCK);
+		parent::__construct(self::BREWING_STAND, 0, $count, "Brewing Stand");
+	}
+
+	public function getMaxStackSize(){
+		return 64;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/BrewingStandFull.php b/src/pocketmine/item/BrewingStandFull.php
new file mode 100644
index 00000000..28fea51
--- /dev/null
+++ b/src/pocketmine/item/BrewingStandFull.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class BrewingStandFull extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::BREWING_STAND);
+		parent::__construct(self::BREWING_STAND_FULL, 0, $count, "Brewing Stand");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Cake.php b/src/pocketmine/item/Cake.php
index f01baf5..f0c6283 100644
--- a/src/pocketmine/item/Cake.php
+++ b/src/pocketmine/item/Cake.php
@@ -23,7 +23,7 @@ namespace pocketmine\item;
 
 use pocketmine\block\Block;
 
-class Cake extends Item{
+class Cake extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		$this->block = Block::get(Item::CAKE_BLOCK);
 		parent::__construct(self::CAKE, 0, $count, "Cake");
@@ -32,4 +32,8 @@ class Cake extends Item{
 	public function getMaxStackSize(){
 		return 1;
 	}
-}
\ No newline at end of file
+
+	public function isEatable() {
+		return true;
+	}
+}
diff --git a/src/pocketmine/item/Camera.php b/src/pocketmine/item/Camera.php
new file mode 100644
index 00000000..aaabf33
--- /dev/null
+++ b/src/pocketmine/item/Camera.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Camera extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::CAMERA, $meta, $count, "Camera");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Carrot.php b/src/pocketmine/item/Carrot.php
index 719f3a5..623f907 100644
--- a/src/pocketmine/item/Carrot.php
+++ b/src/pocketmine/item/Carrot.php
@@ -23,9 +23,13 @@ namespace pocketmine\item;
 
 use pocketmine\block\Block;
 
-class Carrot extends Item{
+class Carrot extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		$this->block = Block::get(Item::CARROT_BLOCK);
 		parent::__construct(self::CARROT, 0, $count, "Carrot");
 	}
-}
\ No newline at end of file
+	public function isEatable() {
+		return true;
+	}
+	
+}
diff --git a/src/pocketmine/item/Clay.php b/src/pocketmine/item/Clay.php
new file mode 100644
index 00000000..4541059
--- /dev/null
+++ b/src/pocketmine/item/Clay.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Clay extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::CLAY, $meta, $count, "Clay");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Clock.php b/src/pocketmine/item/Clock.php
new file mode 100644
index 00000000..008f44a
--- /dev/null
+++ b/src/pocketmine/item/Clock.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Clock extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::CLOCK, $meta, $count, "Clock");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Compass.php b/src/pocketmine/item/Compass.php
new file mode 100644
index 00000000..1cfc920
--- /dev/null
+++ b/src/pocketmine/item/Compass.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Compass extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::COMPASS, $meta, $count, "Compass");
+	}
+
+}
+
diff --git a/src/pocketmine/item/CookedChicken.php b/src/pocketmine/item/CookedChicken.php
new file mode 100644
index 00000000..52a0c8d
--- /dev/null
+++ b/src/pocketmine/item/CookedChicken.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class CookedChicken extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::COOKED_CHICKEN, $meta, $count, "Cooked Chicken");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/CookedFish.php b/src/pocketmine/item/CookedFish.php
index 9c7441e..015bd29 100644
--- a/src/pocketmine/item/CookedFish.php
+++ b/src/pocketmine/item/CookedFish.php
@@ -22,7 +22,7 @@
 namespace pocketmine\item;
 
 
-class CookedFish extends Item{
+class CookedFish extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		parent::__construct(self::COOKED_FISH, $meta, $count, "Cooked Fish");
 		if($this->meta === 1){
@@ -30,4 +30,8 @@ class CookedFish extends Item{
 		}
 	}
 
+        public function isEatable() {
+                return true;
+        }
+
 }
diff --git a/src/pocketmine/item/CookedPorkchop.php b/src/pocketmine/item/CookedPorkchop.php
new file mode 100644
index 00000000..3511778
--- /dev/null
+++ b/src/pocketmine/item/CookedPorkchop.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class CookedPorkchop extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::COOKED_PORKCHOP, $meta, $count, "Cooked Porkchop");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/CookedRabbit.php b/src/pocketmine/item/CookedRabbit.php
new file mode 100644
index 00000000..a029d1d
--- /dev/null
+++ b/src/pocketmine/item/CookedRabbit.php
@@ -0,0 +1,25 @@
+<?php
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+namespace pocketmine\item;
+class CookedRabbit extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::COOKED_RABBIT, $meta, $count, "Cooked Rabbit");
+	}
+}
diff --git a/src/pocketmine/item/Cookie.php b/src/pocketmine/item/Cookie.php
new file mode 100644
index 00000000..c5ab902
--- /dev/null
+++ b/src/pocketmine/item/Cookie.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Cookie extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::COOKIE, $meta, $count, "Cookie");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/DarkOakDoor.php b/src/pocketmine/item/DarkOakDoor.php
new file mode 100644
index 00000000..a4323e0
--- /dev/null
+++ b/src/pocketmine/item/DarkOakDoor.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class DarkOakDoor extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::DARK_OAK_DOOR_BLOCK);
+		parent::__construct(self::DARK_OAK_DOOR, 0, $count, "Dark Oak Door");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Dye.php b/src/pocketmine/item/Dye.php
new file mode 100644
index 00000000..be788a1
--- /dev/null
+++ b/src/pocketmine/item/Dye.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Dye extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::DYE, $meta, $count, "Dye");
+	}
+
+}
+
diff --git a/src/pocketmine/item/EXPBottle.php b/src/pocketmine/item/EXPBottle.php
new file mode 100644
index 00000000..450c0df
--- /dev/null
+++ b/src/pocketmine/item/EXPBottle.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class EXPBottle extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::EXP_BOTTLE, $meta, $count, "Bottle o' Enchanting");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Egg.php b/src/pocketmine/item/Egg.php
new file mode 100644
index 00000000..5a5075d
--- /dev/null
+++ b/src/pocketmine/item/Egg.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Egg extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::EGG, $meta, $count, "Egg");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Emerald.php b/src/pocketmine/item/Emerald.php
new file mode 100644
index 00000000..3689792
--- /dev/null
+++ b/src/pocketmine/item/Emerald.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Emerald extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::EMERALD, $meta, $count, "Emerald");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Fish.php b/src/pocketmine/item/Fish.php
index e56df94..924f72b 100644
--- a/src/pocketmine/item/Fish.php
+++ b/src/pocketmine/item/Fish.php
@@ -22,7 +22,7 @@
 namespace pocketmine\item;
 
 
-class Fish extends Item{
+class Fish extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		parent::__construct(self::RAW_FISH, $meta, $count, "Raw Fish");
 		if($this->meta === 1){
@@ -34,4 +34,8 @@ class Fish extends Item{
 		}
 	}
 
-}
\ No newline at end of file
+        public function isEatable() {
+                return true;
+        }
+
+}
diff --git a/src/pocketmine/item/FishingRod.php b/src/pocketmine/item/FishingRod.php
new file mode 100644
index 00000000..b9b1886
--- /dev/null
+++ b/src/pocketmine/item/FishingRod.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class FishingRod extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::FISHING_ROD, 0, $count, "Fishing Rod");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Flint.php b/src/pocketmine/item/Flint.php
new file mode 100644
index 00000000..6ebd303
--- /dev/null
+++ b/src/pocketmine/item/Flint.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Flint extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::FLINT, $meta, $count, "Flint");
+	}
+
+}
+
diff --git a/src/pocketmine/item/FlowerPot.php b/src/pocketmine/item/FlowerPot.php
new file mode 100644
index 00000000..2f0e0ed
--- /dev/null
+++ b/src/pocketmine/item/FlowerPot.php
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class FlowerPot extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::FLOWER_POT);
+		parent::__construct(self::FLOWER_POT, 0, $count, "Flower Pot"); 
+		
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Food.php b/src/pocketmine/item/Food.php
new file mode 100644
index 00000000..aefd4f2
--- /dev/null
+++ b/src/pocketmine/item/Food.php
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+interface Food{
+	public function isEatable();
+}
diff --git a/src/pocketmine/item/GlowstoneDust.php b/src/pocketmine/item/GlowstoneDust.php
new file mode 100644
index 00000000..67e10f0
--- /dev/null
+++ b/src/pocketmine/item/GlowstoneDust.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class GlowstoneDust extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::GLOWSTONE_DUST, $meta, $count, "Glowstone Dust");
+	}
+
+}
+
diff --git a/src/pocketmine/item/GoldNugget.php b/src/pocketmine/item/GoldNugget.php
new file mode 100644
index 00000000..add6f9f
--- /dev/null
+++ b/src/pocketmine/item/GoldNugget.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class GoldNugget extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::GOLD_NUGGET, $meta, $count, "Gold Nugget");
+	}
+
+}
+
diff --git a/src/pocketmine/item/GoldenApple.php b/src/pocketmine/item/GoldenApple.php
new file mode 100644
index 00000000..3e58018
--- /dev/null
+++ b/src/pocketmine/item/GoldenApple.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class GoldenApple extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::GOLDEN_APPLE, $meta, $count, "Golden Apple");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/Gunpowder.php b/src/pocketmine/item/Gunpowder.php
new file mode 100644
index 00000000..14b16ba
--- /dev/null
+++ b/src/pocketmine/item/Gunpowder.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Gunpowder extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::GUNPOWDER, $meta, $count, "Gunpowder");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Item.php b/src/pocketmine/item/Item.php
index e58fbd5..c2e2f08 100644
--- a/src/pocketmine/item/Item.php
+++ b/src/pocketmine/item/Item.php
@@ -2,11 +2,11 @@
 
 /*
  *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
  * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
@@ -16,7 +16,7 @@
  * @author PocketMine Team
  * @link http://www.pocketmine.net/
  *
- *
+ *http://minecraft.gamepedia.com/Data_values#Item_IDs
 */
 
 /**
@@ -25,11 +25,13 @@
 namespace pocketmine\item;
 
 use pocketmine\block\Block;
+use pocketmine\block\Fence;
 use pocketmine\block\Flower;
 use pocketmine\entity\Entity;
 use pocketmine\entity\Squid;
 use pocketmine\entity\Villager;
 use pocketmine\entity\Zombie;
+use pocketmine\entity\Wolf;
 use pocketmine\inventory\Fuel;
 use pocketmine\item\enchantment\Enchantment;
 use pocketmine\level\Level;
@@ -90,10 +92,12 @@ class Item{
 	const STILL_LAVA = 11;
 	const SAND = 12;
 	const GRAVEL = 13;
+	
 	const GOLD_ORE = 14;
 	const IRON_ORE = 15;
 	const COAL_ORE = 16;
 	const LOG = 17;
+	
 	const WOOD = 17;
 	const TRUNK = 17;
 	const LEAVES = 18;
@@ -102,17 +106,28 @@ class Item{
 	const GLASS = 20;
 	const LAPIS_ORE = 21;
 	const LAPIS_BLOCK = 22;
+	
+	const DISPENSER = 23;
 
 	const SANDSTONE = 24;
+	
+	const NOTEBLOCK = 24;
 
 	const BED_BLOCK = 26;
+	
+	const POWERED_RAIL = 27;
+	const DETECTOR_RAIL = 27;
+	const STICKY_PISTON = 27;
 
 
 	const COBWEB = 30;
 	const TALL_GRASS = 31;
 	const BUSH = 32;
 	const DEAD_BUSH = 32;
+	const PISTON = 33;
+	const PISTON_HEAD = 34;
 	const WOOL = 35;
+	const PISTON_EXTENSION = 35;
 	const DANDELION = 37;
 	const POPPY = 38;
 	const ROSE = 38;
@@ -140,6 +155,8 @@ class Item{
 	const OAK_WOOD_STAIRS = 53;
 	const OAK_WOODEN_STAIRS = 53;
 	const CHEST = 54;
+	
+	const REDSTONE_WIRE = 55;
 
 	const DIAMOND_ORE = 56;
 	const DIAMOND_BLOCK = 57;
@@ -152,19 +169,26 @@ class Item{
 	const LIT_FURNACE = 62;
 	const SIGN_POST = 63;
 	const DOOR_BLOCK = 64;
-	const WOODEN_DOOR_BLOCK = 64;
+	const OAK_DOOR_BLOCK = 64;
 	const WOOD_DOOR_BLOCK = 64;
 	const LADDER = 65;
+	const RAIL = 66;
 
 	const COBBLE_STAIRS = 67;
 	const COBBLESTONE_STAIRS = 67;
 	const WALL_SIGN = 68;
-
+	
+	const LEVER = 69;
+	const STONE_PRESSURE_PLATE = 70;
 	const IRON_DOOR_BLOCK = 71;
-
+	const WOODEN_PRESSURE_PLATE = 72;
 	const REDSTONE_ORE = 73;
 	const GLOWING_REDSTONE_ORE = 74;
 	const LIT_REDSTONE_ORE = 74;
+	const UNLIT_REDSTONE_TORCH = 75;
+	const LIT_REDSTONE_TORCH = 76;
+	const REDSTONE_TORCH = 76;
+	const STONE_BUTTON = 77;
 
 	const SNOW = 78;
 	const SNOW_LAYER = 78;
@@ -174,6 +198,8 @@ class Item{
 	const CLAY_BLOCK = 82;
 	const REEDS = 83;
 	const SUGARCANE_BLOCK = 83;
+	
+	const JUKEBOX = 83;
 
 	const FENCE = 85;
 	const PUMPKIN = 86;
@@ -186,11 +212,21 @@ class Item{
 	const LIT_PUMPKIN = 91;
 	const JACK_O_LANTERN = 91;
 	const CAKE_BLOCK = 92;
+	
+	const UNPOWERED_REPEATER = 93;
+	const POWERED_REPEATER = 94;
+	
+	const STAINED_GLASS = 95; //INVISIBLE BEDROCK ID
 
 	const TRAPDOOR = 96;
+	
+	const MONSTER_EGG = 97;
 
 	const STONE_BRICKS = 98;
 	const STONE_BRICK = 98;
+	
+	const BROWN_MUSHROOM_BLOCK = 99;
+	const RED_MUSHROOM_BLOCK = 100;
 
 	const IRON_BAR = 101;
 	const IRON_BARS = 101;
@@ -209,18 +245,37 @@ class Item{
 	const LILY_PAD = 111;
 	const NETHER_BRICKS = 112;
 	const NETHER_BRICK_BLOCK = 112;
-
+	const NETHER_BRICK_FENCE = 113;
 	const NETHER_BRICKS_STAIRS = 114;
+	const NETHER_WART_BLOCK = 115;
 
 	const ENCHANTING_TABLE = 116;
 	const ENCHANT_TABLE = 116;
 	const ENCHANTMENT_TABLE = 116;
+	const BREWING_STAND_BLOCK = 117;
+	
+	const CAULDRON = 118;
+	const END_PORTAL = 119;
 
-	const END_PORTAL = 120;
+	const END_PORTAL_FRAME = 120;
 	const END_STONE = 121;
+	const DRAGON_EGG = 122;
+	
+	const REDSTONE_LAMP = 123;
+	const LIT_REDSTONE_LAMP = 124;
+	
+	//const DOUBLE_WOODEN_SLAB = 125;
+	//const WOODEN_SLAB = 126;
+	const COCOA_POD = 127;
+	const COCOA_BEANS = 127;
 
 	const SANDSTONE_STAIRS = 128;
 	const EMERALD_ORE = 129;
+	
+	const ENDERCHEST = 130;
+	
+	const TRIPWIRE_HOOK = 131;
+	const TRIPWIRE = 132;
 
 	const EMERALD_BLOCK = 133;
 	const SPRUCE_WOOD_STAIRS = 134;
@@ -229,18 +284,39 @@ class Item{
 	const BIRCH_WOODEN_STAIRS = 135;
 	const JUNGLE_WOOD_STAIRS = 136;
 	const JUNGLE_WOODEN_STAIRS = 136;
+	
+	const COMMAND_BLOCK = 136;
+	const BEACON = 136;
 
 	const COBBLE_WALL = 139;
 	const STONE_WALL = 139;
 	const COBBLESTONE_WALL = 139;
 
+	const FLOWER_POT_BLOCK = 140;
 	const CARROT_BLOCK = 141;
 	const POTATO_BLOCK = 142;
 
+	const WOODEN_BUTTON = 143;
+	
+	const SKULL_BLOCK = 144;
+	const HEAD_BLOCK = 144;
+	const MOB_HEAD_BLOCK = 144;
+
 	const ANVIL = 145;
+	const TRAPPED_CHEST = 146;
+	const LIGHT_WEIGHTED_PRESSURE_PLATE = 147;
+	const HEAVY_WEIGHTED_PRESSURE_PLATE = 148;
+	const UNPOWERED_COMPARATOR = 149;
+	const POWERED_COMPARATOR = 150;
+	const DAYLIGHT_DETECTOR = 151;
 
 	const REDSTONE_BLOCK = 152;
-
+	
+	const NETHER_QUARTZ_ORE = 153;
+	const QUARTZ_ORE = 153;
+	
+	const HOPPER = 154;
+	
 	const QUARTZ_BLOCK = 155;
 	const QUARTZ_STAIRS = 156;
 	const DOUBLE_WOOD_SLAB = 157;
@@ -253,6 +329,8 @@ class Item{
 	const WOODEN_SLABS = 158;
 	const STAINED_CLAY = 159;
 	const STAINED_HARDENED_CLAY = 159;
+	
+	const STAINED_GLASS_PANE = 160;
 
 	const LEAVES2 = 161;
 	const LEAVE2 = 161;
@@ -263,19 +341,42 @@ class Item{
 	const ACACIA_WOODEN_STAIRS = 163;
 	const DARK_OAK_WOOD_STAIRS = 164;
 	const DARK_OAK_WOODEN_STAIRS = 164;
+	
+	const SLIME_BLOCK = 165;
+	const SLIMEBLOCK = 165;
+	const BARRIER = 166;
+	const IRON_TRAPDOOR = 167;
+	const PRISMARINE = 168;
+	const SEA_LANTERN = 169;
 
 	const HAY_BALE = 170;
 	const CARPET = 171;
 	const HARDENED_CLAY = 172;
 	const COAL_BLOCK = 173;
+	const PACKED_ICE = 174;
 
 	const DOUBLE_PLANT = 175;
+	const STANDING_BANNER = 176;
+	const WALL_BANNER = 177;
+	
+	const DAYLIGHT_DETECTOR_INVERTED = 178;
+	
+	const RED_SANDSTONE = 179;
+	const RED_SANDSTONE_STAIRS = 180;
+	const DOUBLE_STONE_SLAB2 = 181;
+	const STONE_SLAB2 = 182;
 
 	const FENCE_GATE_SPRUCE = 183;
 	const FENCE_GATE_BIRCH = 184;
 	const FENCE_GATE_JUNGLE = 185;
 	const FENCE_GATE_DARK_OAK = 186;
 	const FENCE_GATE_ACACIA = 187;
+	
+	const SPRUCE_DOOR_BLOCK = 193;
+	const BIRCH_DOOR_BLOCK = 194;
+	const JUNGLE_DOOR_BLOCK = 195;
+	const ACACIA_DOOR_BLOCK = 196;
+	const DARK_OAK_DOOR_BLOCK = 197;
 
 	const GRASS_PATH = 198;
 
@@ -284,27 +385,28 @@ class Item{
 	const STONECUTTER = 245;
 	const GLOWING_OBSIDIAN = 246;
 	const NETHER_REACTOR = 247;
+	const RESERVED = 255;
 
 
 	//Normal Item IDs
 
-	const IRON_SHOVEL = 256; //
-	const IRON_PICKAXE = 257; //
-	const IRON_AXE = 258; //
-	const FLINT_STEEL = 259; //
-	const FLINT_AND_STEEL = 259; //
-	const APPLE = 260; //
+	const IRON_SHOVEL = 256; 
+	const IRON_PICKAXE = 257; 
+	const IRON_AXE = 258; 
+	const FLINT_STEEL = 259; 
+	const FLINT_AND_STEEL = 259; 
+	const APPLE = 260; 
 	const BOW = 261;
 	const ARROW = 262;
-	const COAL = 263; //
-	const DIAMOND = 264; //
-	const IRON_INGOT = 265; //
-	const GOLD_INGOT = 266; //
+	const COAL = 263; 
+	const DIAMOND = 264; 
+	const IRON_INGOT = 265; 
+	const GOLD_INGOT = 266; 
 	const IRON_SWORD = 267;
-	const WOODEN_SWORD = 268; //
-	const WOODEN_SHOVEL = 269; //
-	const WOODEN_PICKAXE = 270; //
-	const WOODEN_AXE = 271; //
+	const WOODEN_SWORD = 268; 
+	const WOODEN_SHOVEL = 269; 
+	const WOODEN_PICKAXE = 270; 
+	const WOODEN_AXE = 271; 
 	const STONE_SWORD = 272;
 	const STONE_SHOVEL = 273;
 	const STONE_PICKAXE = 274;
@@ -313,9 +415,9 @@ class Item{
 	const DIAMOND_SHOVEL = 277;
 	const DIAMOND_PICKAXE = 278;
 	const DIAMOND_AXE = 279;
-	const STICK = 280; //
+	const STICK = 280; 
 	const STICKS = 280;
-	const BOWL = 281; //
+	const BOWL = 281; 
 	const MUSHROOM_STEW = 282;
 	const GOLD_SWORD = 283;
 	const GOLD_SHOVEL = 284;
@@ -326,11 +428,11 @@ class Item{
 	const GOLDEN_PICKAXE = 285;
 	const GOLDEN_AXE = 286;
 	const STRING = 287;
-	const FEATHER = 288; //
+	const FEATHER = 288; 
 	const GUNPOWDER = 289;
 	const WOODEN_HOE = 290;
 	const STONE_HOE = 291;
-	const IRON_HOE = 292; //
+	const IRON_HOE = 292; 
 	const DIAMOND_HOE = 293;
 	const GOLD_HOE = 294;
 	const GOLDEN_HOE = 294;
@@ -364,15 +466,17 @@ class Item{
 	const PAINTING = 321;
 	const GOLDEN_APPLE = 322;
 	const SIGN = 323;
-	const WOODEN_DOOR = 324;
+	const OAK_DOOR = 324;
 	const BUCKET = 325;
 
 	const MINECART = 328;
+	const SADDLE = 329;
 
 	const IRON_DOOR = 330;
 	const REDSTONE = 331;
 	const REDSTONE_DUST = 331;
 	const SNOWBALL = 332;
+	const BOAT = 333;
 
 	const LEATHER = 334;
 
@@ -387,6 +491,7 @@ class Item{
 
 	const EGG = 344;
 	const COMPASS = 345;
+	const FISHING_ROD = 346;
 
 	const CLOCK = 347;
 	const GLOWSTONE_DUST = 348;
@@ -413,13 +518,27 @@ class Item{
 
 	const RAW_CHICKEN = 365;
 	const COOKED_CHICKEN = 366;
-
+	const ROTTEN_FLESH = 367;
+	
+	const BLAZE_ROD = 369;
+	const GHAST_TEAR = 370;
 	const GOLD_NUGGET = 371;
 	const GOLDEN_NUGGET = 371;
+	const NETHER_WART = 372;
+	const POTION = 373;
+	const GLASS_BOTTLE = 374;
+	const SPIDER_EYE = 375;
+	const FERMENTED_SPIDER_EYE = 376;
+	const BLAZE_POWDER = 377;
+	const MAGMA_CREAM = 378;
+	const BREWING_STAND = 379;
+	const GLISTERING_MELON = 382;
 
 	const SPAWN_EGG = 383;
+	const EXP_BOTTLE = 384;
 
 	const EMERALD = 388;
+	const FLOWER_POT = 390;
 
 	const CARROT = 391;
 	const CARROTS = 391;
@@ -427,13 +546,30 @@ class Item{
 	const POTATOES = 392;
 	const BAKED_POTATO = 393;
 	const BAKED_POTATOES = 393;
+	const POISONOUS_POTATO = 394;
+	const GOLDEN_CARROT = 396;
+	
+	const MOB_HEAD = 397;
+	const SKULL = 397;
 
 	const PUMPKIN_PIE = 400;
+	
+	const ENCHANTED_BOOK = 403;
 
 	const NETHER_BRICK = 405;
 	const QUARTZ = 406;
 	const NETHER_QUARTZ = 406;
-
+	
+	const RABBIT_FOOT = 414;
+	
+	const SPRUCE_DOOR = 427;
+	const BIRCH_DOOR = 428;
+	const JUNGLE_DOOR = 429;
+	const ACACIA_DOOR = 430;
+	const DARK_OAK_DOOR = 431;
+	
+	const SPLASH_POTION = 438;
+	
 	const CAMERA = 456;
 	const BEETROOT = 457;
 	const BEETROOT_SEEDS = 458;
@@ -459,31 +595,48 @@ class Item{
 	public static function init(){
 		if(self::$list === null){
 			self::$list = new \SplFixedArray(65536);
-			self::$list[self::SUGARCANE] = Sugarcane::class;
-			self::$list[self::WHEAT_SEEDS] = WheatSeeds::class;
-			self::$list[self::PUMPKIN_SEEDS] = PumpkinSeeds::class;
-			self::$list[self::MELON_SEEDS] = MelonSeeds::class;
-			self::$list[self::MUSHROOM_STEW] = MushroomStew::class;
-			self::$list[self::BEETROOT_SOUP] = BeetrootSoup::class;
-			self::$list[self::CARROT] = Carrot::class;
-			self::$list[self::POTATO] = Potato::class;
-			self::$list[self::BEETROOT_SEEDS] = BeetrootSeeds::class;
-			self::$list[self::SIGN] = Sign::class;
-			self::$list[self::WOODEN_DOOR] = WoodenDoor::class;
-			self::$list[self::BUCKET] = Bucket::class;
-			self::$list[self::IRON_DOOR] = IronDoor::class;
-			self::$list[self::CAKE] = Cake::class;
-			self::$list[self::BED] = Bed::class;
-			self::$list[self::PAINTING] = Painting::class;
-			self::$list[self::COAL] = Coal::class;
+			self::$list[self::IRON_SHOVEL] = IronShovel::class;
+			self::$list[self::IRON_PICKAXE] = IronPickaxe::class;
+			self::$list[self::IRON_AXE] = IronAxe::class;
+			self::$list[self::FLINT_STEEL] = FlintSteel::class;
 			self::$list[self::APPLE] = Apple::class;
-			self::$list[self::SPAWN_EGG] = SpawnEgg::class;
+			self::$list[self::BOW] = Bow::class;
+			self::$list[self::ARROW] = Arrow::class;
+			self::$list[self::COAL] = Coal::class;
 			self::$list[self::DIAMOND] = Diamond::class;
+			self::$list[self::IRON_INGOT] = IronIngot::class;
+			self::$list[self::GOLD_INGOT] = GoldIngot::class;
+			self::$list[self::IRON_SWORD] = IronSword::class;
+			self::$list[self::WOODEN_SWORD] = WoodenSword::class;
+			self::$list[self::WOODEN_SHOVEL] = WoodenShovel::class;
+			self::$list[self::WOODEN_PICKAXE] = WoodenPickaxe::class;
+			self::$list[self::WOODEN_AXE] = WoodenAxe::class;
+			self::$list[self::STONE_SWORD] = StoneSword::class;
+			self::$list[self::STONE_SHOVEL] = StoneShovel::class;
+			self::$list[self::STONE_PICKAXE] = StonePickaxe::class;
+			self::$list[self::STONE_AXE] = StoneAxe::class;
+			self::$list[self::DIAMOND_SWORD] = DiamondSword::class;
+			self::$list[self::DIAMOND_SHOVEL] = DiamondShovel::class;
+			self::$list[self::DIAMOND_PICKAXE] = DiamondPickaxe::class;
+			self::$list[self::DIAMOND_AXE] = DiamondAxe::class;
 			self::$list[self::STICK] = Stick::class;
-			self::$list[self::SNOWBALL] = Snowball::class;
 			self::$list[self::BOWL] = Bowl::class;
+			self::$list[self::MUSHROOM_STEW] = MushroomStew::class;
+			self::$list[self::GOLD_SWORD] = GoldSword::class;
+			self::$list[self::GOLD_SHOVEL] = GoldShovel::class;
+			self::$list[self::GOLD_PICKAXE] = GoldPickaxe::class;
+			self::$list[self::GOLD_AXE] = GoldAxe::class;
+			self::$list[self::STRING] = StringItem::class;
 			self::$list[self::FEATHER] = Feather::class;
-			self::$list[self::BRICK] = Brick::class;
+			self::$list[self::GUNPOWDER] = Gunpowder::class;
+			self::$list[self::WOODEN_HOE] = WoodenHoe::class;
+			self::$list[self::STONE_HOE] = StoneHoe::class;
+			self::$list[self::IRON_HOE] = IronHoe::class;
+			self::$list[self::DIAMOND_HOE] = DiamondHoe::class;
+			self::$list[self::GOLD_HOE] = GoldHoe::class;
+			self::$list[self::WHEAT_SEEDS] = WheatSeeds::class;
+			self::$list[self::WHEAT] = Wheat::class;
+			self::$list[self::BREAD] = Bread::class;
 			self::$list[self::LEATHER_CAP] = LeatherCap::class;
 			self::$list[self::LEATHER_TUNIC] = LeatherTunic::class;
 			self::$list[self::LEATHER_PANTS] = LeatherPants::class;
@@ -496,47 +649,111 @@ class Item{
 			self::$list[self::IRON_CHESTPLATE] = IronChestplate::class;
 			self::$list[self::IRON_LEGGINGS] = IronLeggings::class;
 			self::$list[self::IRON_BOOTS] = IronBoots::class;
-			self::$list[self::GOLD_HELMET] = GoldHelmet::class;
-			self::$list[self::GOLD_CHESTPLATE] = GoldChestplate::class;
-			self::$list[self::GOLD_LEGGINGS] = GoldLeggings::class;
-			self::$list[self::GOLD_BOOTS] = GoldBoots::class;
 			self::$list[self::DIAMOND_HELMET] = DiamondHelmet::class;
 			self::$list[self::DIAMOND_CHESTPLATE] = DiamondChestplate::class;
 			self::$list[self::DIAMOND_LEGGINGS] = DiamondLeggings::class;
 			self::$list[self::DIAMOND_BOOTS] = DiamondBoots::class;
-			self::$list[self::IRON_SWORD] = IronSword::class;
-			self::$list[self::IRON_INGOT] = IronIngot::class;
-			self::$list[self::GOLD_INGOT] = GoldIngot::class;
-			self::$list[self::IRON_SHOVEL] = IronShovel::class;
-			self::$list[self::IRON_PICKAXE] = IronPickaxe::class;
-			self::$list[self::IRON_AXE] = IronAxe::class;
-			self::$list[self::IRON_HOE] = IronHoe::class;
-			self::$list[self::DIAMOND_SWORD] = DiamondSword::class;
-			self::$list[self::DIAMOND_SHOVEL] = DiamondShovel::class;
-			self::$list[self::DIAMOND_PICKAXE] = DiamondPickaxe::class;
-			self::$list[self::DIAMOND_AXE] = DiamondAxe::class;
-			self::$list[self::DIAMOND_HOE] = DiamondHoe::class;
-			self::$list[self::GOLD_SWORD] = GoldSword::class;
-			self::$list[self::GOLD_SHOVEL] = GoldShovel::class;
-			self::$list[self::GOLD_PICKAXE] = GoldPickaxe::class;
-			self::$list[self::GOLD_AXE] = GoldAxe::class;
-			self::$list[self::GOLD_HOE] = GoldHoe::class;
-			self::$list[self::STONE_SWORD] = StoneSword::class;
-			self::$list[self::STONE_SHOVEL] = StoneShovel::class;
-			self::$list[self::STONE_PICKAXE] = StonePickaxe::class;
-			self::$list[self::STONE_AXE] = StoneAxe::class;
-			self::$list[self::STONE_HOE] = StoneHoe::class;
-			self::$list[self::WOODEN_SWORD] = WoodenSword::class;
-			self::$list[self::WOODEN_SHOVEL] = WoodenShovel::class;
-			self::$list[self::WOODEN_PICKAXE] = WoodenPickaxe::class;
-			self::$list[self::WOODEN_AXE] = WoodenAxe::class;
-			self::$list[self::WOODEN_HOE] = WoodenHoe::class;
-			self::$list[self::FLINT_STEEL] = FlintSteel::class;
-			self::$list[self::SHEARS] = Shears::class;
-			self::$list[self::BOW] = Bow::class;
-
+			self::$list[self::GOLD_HELMET] = GoldHelmet::class;
+			self::$list[self::GOLD_CHESTPLATE] = GoldChestplate::class;
+			self::$list[self::GOLD_LEGGINGS] = GoldLeggings::class;
+			self::$list[self::GOLD_BOOTS] = GoldBoots::class;
+			self::$list[self::FLINT] = Flint::class;
+			self::$list[self::RAW_PORKCHOP] = RawPorkchop::class;
+			self::$list[self::COOKED_PORKCHOP] = CookedPorkchop::class;
+			self::$list[self::PAINTING] = Painting::class;
+			self::$list[self::GOLDEN_APPLE] = GoldenApple::class;
+			self::$list[self::SIGN] = Sign::class;
+			self::$list[self::OAK_DOOR] = OakDoor::class;
+			self::$list[self::BUCKET] = Bucket::class;
+			
+			self::$list[self::MINECART] = Minecart::class;
+			self::$list[self::SADDLE] = Saddle::class;
+			
+			self::$list[self::IRON_DOOR] = IronDoor::class;
+			self::$list[self::REDSTONE] = Redstone::class;
+			self::$list[self::SNOWBALL] = Snowball::class;
+			self::$list[self::BOAT] = Boat::class;
+			
+			self::$list[self::LEATHER] = Leather::class;
+			
+			self::$list[self::BRICK] = Brick::class;
+			self::$list[self::CLAY] = Clay::class;
+			self::$list[self::SUGARCANE] = Sugarcane::class;
+			self::$list[self::PAPER] = Paper::class;
+			self::$list[self::BOOK] = Book::class;
+			self::$list[self::SLIMEBALL] = Slimeball::class;
+			
+			self::$list[self::EGG] = Egg::class;
+			self::$list[self::COMPASS] = Compass::class;
+			self::$list[self::FISHING_ROD] = FishingRod::class;
+			
+			self::$list[self::CLOCK] = Clock::class;
+			self::$list[self::GLOWSTONE_DUST] = GlowstoneDust::class;
 			self::$list[self::RAW_FISH] = Fish::class;
 			self::$list[self::COOKED_FISH] = CookedFish::class;
+			self::$list[self::DYE] = Dye::class;
+			self::$list[self::BONE] = Bone::class;
+			self::$list[self::SUGAR] = Sugar::class;
+			self::$list[self::CAKE] = Cake::class;
+			self::$list[self::BED] = Bed::class;
+			
+			self::$list[self::COOKIE] = Cookie::class;
+			
+			self::$list[self::SHEARS] = Shears::class;
+			self::$list[self::MELON] = Melon::class;
+			self::$list[self::PUMPKIN_SEEDS] = PumpkinSeeds::class;
+			self::$list[self::MELON_SEEDS] = MelonSeeds::class;
+			self::$list[self::RAW_BEEF] = RawBeef::class;
+			self::$list[self::STEAK] = Steak::class;
+			
+			self::$list[self::RAW_CHICKEN] = RawChicken::class;
+			self::$list[self::COOKED_CHICKEN] = CookedChicken::class;
+			
+			self::$list[self::ROTTEN_FLESH] = RottenFlesh::class;
+			self::$list[self::BLAZE_ROD] = BlazeRod::class;
+			self::$list[self::GHAST_TEAR] = GhastTear::class;
+			self::$list[self::GOLD_NUGGET] = GoldNugget::class;
+			self::$list[self::NETHER_WART] = NetherWart::class;
+			self::$list[self::POTION] = Potion::class;
+			self::$list[self::GLASS_BOTTLE] = GlassBottle::class;
+			//self::$list[self::SPIDER_EYE] = Spidereye::class;
+			//self::$list[self::FERMENTED_SPIDER_EYE] = FermentedSpiderEye::class;
+			self::$list[self::BLAZE_POWDER] = BlazePowder::class;
+			//self::$list[self::MAGMA_CREAM] = MagmaCream::class;
+			self::$list[self::BREWING_STAND] = BrewingStand::class;
+			self::$list[self::GLISTERING_MELON] = GlisteringMelon::class;
+			
+			self::$list[self::SPAWN_EGG] = SpawnEgg::class;
+			self::$list[self::EXP_BOTTLE] = EXPBottle::class;
+			
+			self::$list[self::EMERALD] = Emerald::class;
+			self::$list[self::FLOWER_POT] = FlowerPot::class;
+			
+			self::$list[self::CARROT] = Carrot::class;
+			self::$list[self::POTATO] = Potato::class;
+			self::$list[self::BAKED_POTATO] = BakedPotato::class;
+			//self::$list[self::POISONOUS_POTATO] = PoisonousPotato::class;
+			//self::$list[self::GOLDEN_CARROT] = GoldenCarrot::class;
+			self::$list[self::SKULL] = Skull::class;
+			
+			self::$list[self::PUMPKIN_PIE] = PumpkinPie::class;
+			
+			self::$list[self::ENCHANTED_BOOK] = EnchantedBook::class;
+			
+			self::$list[self::NETHER_BRICK] = NetherBrick::class;
+			self::$list[self::QUARTZ] = Quartz::class;
+			self::$list[self::QUARTZ] = NetherQuartz::class;
+			
+			self::$list[self::RABBIT_FOOT] = RabbitFoot::class;
+			
+			self::$list[self::SPRUCE_DOOR] = SpruceDoor::class;
+			
+			self::$list[self::SPLASH_POTION] = SplashPotion::class;
+			
+			// self::$list[self::CAMERA] = Camera::class;
+			self::$list[self::BEETROOT] = Beetroot::class;
+			self::$list[self::BEETROOT_SEEDS] = BeetrootSeeds::class;
+			self::$list[self::BEETROOT_SOUP] = BeetrootSoup::class;
 
 			for($i = 0; $i < 256; ++$i){
 				if(Block::$list[$i] !== null){
@@ -544,7 +761,7 @@ class Item{
 				}
 			}
 		}
-		
+
 		self::initCreativeItems();
 	}
 
@@ -552,300 +769,492 @@ class Item{
 
 	private static function initCreativeItems(){
 		self::clearCreativeItems();
+		self::buildingTab();
+		self::decorationTab();
+		self::toolsTab();
+		self::seedsTab();
+	}
+	
+	private static function buildingTab(){
 		//Building
-		self::addCreativeItem(Item::get(Item::COBBLESTONE, 0));
-		self::addCreativeItem(Item::get(Item::STONE_BRICKS, 0));
-		self::addCreativeItem(Item::get(Item::STONE_BRICKS, 1));
-		self::addCreativeItem(Item::get(Item::STONE_BRICKS, 2));
-		self::addCreativeItem(Item::get(Item::STONE_BRICKS, 3));
-		self::addCreativeItem(Item::get(Item::MOSS_STONE, 0));
-		self::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 0));
-		self::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 1));
-		self::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 2));
-		self::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 3));
-		self::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 4));
-		self::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 5));
-		self::addCreativeItem(Item::get(Item::BRICKS, 0));
-
-		self::addCreativeItem(Item::get(Item::STONE, 0));
-		self::addCreativeItem(Item::get(Item::STONE, 1));
-		self::addCreativeItem(Item::get(Item::STONE, 2));
-		self::addCreativeItem(Item::get(Item::STONE, 3));
-		self::addCreativeItem(Item::get(Item::STONE, 4));
-		self::addCreativeItem(Item::get(Item::STONE, 5));
-		self::addCreativeItem(Item::get(Item::STONE, 6));
-		self::addCreativeItem(Item::get(Item::DIRT, 0));
-		self::addCreativeItem(Item::get(Item::PODZOL, 0));
-		self::addCreativeItem(Item::get(Item::GRASS, 0));
-		self::addCreativeItem(Item::get(Item::MYCELIUM, 0));
-		self::addCreativeItem(Item::get(Item::CLAY_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::HARDENED_CLAY, 0));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 0));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 7));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 6));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 5));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 4));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 3));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 2));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 1));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 15));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 14));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 13));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 12));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 11));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 10));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 9));
-		self::addCreativeItem(Item::get(Item::STAINED_CLAY, 8));
-		self::addCreativeItem(Item::get(Item::SANDSTONE, 0));
-		self::addCreativeItem(Item::get(Item::SANDSTONE, 1));
-		self::addCreativeItem(Item::get(Item::SANDSTONE, 2));
-		self::addCreativeItem(Item::get(Item::SAND, 0));
-		self::addCreativeItem(Item::get(Item::SAND, 1));
-		self::addCreativeItem(Item::get(Item::GRAVEL, 0));
-		self::addCreativeItem(Item::get(Item::TRUNK, 0));
-		self::addCreativeItem(Item::get(Item::TRUNK, 1));
-		self::addCreativeItem(Item::get(Item::TRUNK, 2));
-		self::addCreativeItem(Item::get(Item::TRUNK, 3));
-		self::addCreativeItem(Item::get(Item::TRUNK2, 0));
-		self::addCreativeItem(Item::get(Item::TRUNK2, 1));
-		self::addCreativeItem(Item::get(Item::NETHER_BRICKS, 0));
-		self::addCreativeItem(Item::get(Item::NETHERRACK, 0));
-		self::addCreativeItem(Item::get(Item::BEDROCK, 0));
-		self::addCreativeItem(Item::get(Item::COBBLESTONE_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::OAK_WOODEN_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::SPRUCE_WOODEN_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::BIRCH_WOODEN_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::JUNGLE_WOODEN_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::ACACIA_WOODEN_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::DARK_OAK_WOODEN_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::BRICK_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::SANDSTONE_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::STONE_BRICK_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::NETHER_BRICKS_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::QUARTZ_STAIRS, 0));
-		self::addCreativeItem(Item::get(Item::SLAB, 0));
-		self::addCreativeItem(Item::get(Item::SLAB, 1));
-		self::addCreativeItem(Item::get(Item::WOODEN_SLAB, 0));
-		self::addCreativeItem(Item::get(Item::WOODEN_SLAB, 1));
-		self::addCreativeItem(Item::get(Item::WOODEN_SLAB, 2));
-		self::addCreativeItem(Item::get(Item::WOODEN_SLAB, 3));
-		self::addCreativeItem(Item::get(Item::WOODEN_SLAB, 4));
-		self::addCreativeItem(Item::get(Item::WOODEN_SLAB, 5));
-		self::addCreativeItem(Item::get(Item::SLAB, 3));
-		self::addCreativeItem(Item::get(Item::SLAB, 4));
-		self::addCreativeItem(Item::get(Item::SLAB, 5));
-		self::addCreativeItem(Item::get(Item::SLAB, 6));
-		self::addCreativeItem(Item::get(Item::QUARTZ_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::QUARTZ_BLOCK, 1));
-		self::addCreativeItem(Item::get(Item::QUARTZ_BLOCK, 2));
-		self::addCreativeItem(Item::get(Item::COAL_ORE, 0));
-		self::addCreativeItem(Item::get(Item::IRON_ORE, 0));
-		self::addCreativeItem(Item::get(Item::GOLD_ORE, 0));
-		self::addCreativeItem(Item::get(Item::DIAMOND_ORE, 0));
-		self::addCreativeItem(Item::get(Item::LAPIS_ORE, 0));
-		self::addCreativeItem(Item::get(Item::REDSTONE_ORE, 0));
-		self::addCreativeItem(Item::get(Item::EMERALD_ORE, 0));
-		self::addCreativeItem(Item::get(Item::OBSIDIAN, 0));
-		self::addCreativeItem(Item::get(Item::ICE, 0));
-		self::addCreativeItem(Item::get(Item::SNOW_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::END_STONE, 0));
-
+		Item::addCreativeItem(Item::get(Item::COBBLESTONE, 0));
+		Item::addCreativeItem(Item::get(Item::STONE_BRICKS, 0));
+		Item::addCreativeItem(Item::get(Item::STONE_BRICKS, 1));
+		Item::addCreativeItem(Item::get(Item::STONE_BRICKS, 2));
+		Item::addCreativeItem(Item::get(Item::STONE_BRICKS, 3));
+		Item::addCreativeItem(Item::get(Item::MOSS_STONE, 0));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 0));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 1));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 2));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 3));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 4));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PLANKS, 5));
+		Item::addCreativeItem(Item::get(Item::BRICKS, 0));
+		Item::addCreativeItem(Item::get(Item::STONE, 0));
+		Item::addCreativeItem(Item::get(Item::STONE, 1));
+		Item::addCreativeItem(Item::get(Item::STONE, 2));
+		Item::addCreativeItem(Item::get(Item::STONE, 3));
+		Item::addCreativeItem(Item::get(Item::STONE, 4));
+		Item::addCreativeItem(Item::get(Item::STONE, 5));
+		Item::addCreativeItem(Item::get(Item::STONE, 6));
+		Item::addCreativeItem(Item::get(Item::DIRT, 0));
+		Item::addCreativeItem(Item::get(Item::PODZOL, 0));
+		Item::addCreativeItem(Item::get(Item::GRASS, 0));
+		Item::addCreativeItem(Item::get(Item::MYCELIUM, 0));
+		Item::addCreativeItem(Item::get(Item::CLAY_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::HARDENED_CLAY, 0));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 0));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 7));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 6));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 5));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 4));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 3));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 2));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 1));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 15));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 14));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 13));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 12));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 11));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 10));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 9));
+		Item::addCreativeItem(Item::get(Item::STAINED_CLAY, 8));
+		Item::addCreativeItem(Item::get(Item::SANDSTONE, 0));
+		Item::addCreativeItem(Item::get(Item::SANDSTONE, 1));
+		Item::addCreativeItem(Item::get(Item::SANDSTONE, 2));
+		Item::addCreativeItem(Item::get(Item::SAND, 0));
+		Item::addCreativeItem(Item::get(Item::SAND, 1));
+		Item::addCreativeItem(Item::get(Item::GRAVEL, 0));
+		Item::addCreativeItem(Item::get(Item::TRUNK, 0));
+		Item::addCreativeItem(Item::get(Item::TRUNK, 1));
+		Item::addCreativeItem(Item::get(Item::TRUNK, 2));
+		Item::addCreativeItem(Item::get(Item::TRUNK, 3));
+		Item::addCreativeItem(Item::get(Item::TRUNK2, 0));
+		Item::addCreativeItem(Item::get(Item::TRUNK2, 1));
+		Item::addCreativeItem(Item::get(Item::NETHER_BRICKS, 0));
+		Item::addCreativeItem(Item::get(Item::NETHERRACK, 0));
+		Item::addCreativeItem(Item::get(Item::SOUL_SAND, 0));
+		Item::addCreativeItem(Item::get(Item::BEDROCK, 0));
+		Item::addCreativeItem(Item::get(Item::COBBLESTONE_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::OAK_WOODEN_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::SPRUCE_WOODEN_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::BIRCH_WOODEN_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::JUNGLE_WOODEN_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::ACACIA_WOODEN_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::DARK_OAK_WOODEN_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::BRICK_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::SANDSTONE_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::STONE_BRICK_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::NETHER_BRICKS_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::QUARTZ_STAIRS, 0));
+		Item::addCreativeItem(Item::get(Item::SLAB, 0));
+		Item::addCreativeItem(Item::get(Item::SLAB, 1));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SLAB, 0));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SLAB, 1));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SLAB, 2));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SLAB, 3));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SLAB, 4));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SLAB, 5));
+		Item::addCreativeItem(Item::get(Item::SLAB, 3));
+		Item::addCreativeItem(Item::get(Item::SLAB, 4));
+		Item::addCreativeItem(Item::get(Item::SLAB, 5));
+		Item::addCreativeItem(Item::get(Item::SLAB, 6));
+		Item::addCreativeItem(Item::get(Item::SLAB, 7));
+		Item::addCreativeItem(Item::get(Item::QUARTZ_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::QUARTZ_BLOCK, 1));
+		Item::addCreativeItem(Item::get(Item::QUARTZ_BLOCK, 2));
+		Item::addCreativeItem(Item::get(Item::COAL_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::IRON_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::GOLD_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::LAPIS_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::REDSTONE_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::EMERALD_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::NETHER_QUARTZ_ORE, 0));
+		Item::addCreativeItem(Item::get(Item::OBSIDIAN, 0));
+		Item::addCreativeItem(Item::get(Item::ICE, 0));
+		Item::addCreativeItem(Item::get(Item::PACKED_ICE, 0));
+		Item::addCreativeItem(Item::get(Item::SNOW_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::END_STONE, 0));
+	}
+	
+	private static function decorationTab(){
 		//Decoration
-		self::addCreativeItem(Item::get(Item::COBBLESTONE_WALL, 0));
-		self::addCreativeItem(Item::get(Item::COBBLESTONE_WALL, 1));
-		self::addCreativeItem(Item::get(Item::WATER_LILY, 0));
-		self::addCreativeItem(Item::get(Item::GOLD_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::IRON_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::DIAMOND_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::LAPIS_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::COAL_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::EMERALD_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::REDSTONE_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::SNOW_LAYER, 0));
-		self::addCreativeItem(Item::get(Item::GLASS, 0));
-		self::addCreativeItem(Item::get(Item::GLOWSTONE_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::VINES, 0));
-		self::addCreativeItem(Item::get(Item::NETHER_REACTOR, 0));
-		self::addCreativeItem(Item::get(Item::LADDER, 0));
-		self::addCreativeItem(Item::get(Item::SPONGE, 0));
-		self::addCreativeItem(Item::get(Item::GLASS_PANE, 0));
-		self::addCreativeItem(Item::get(Item::WOODEN_DOOR, 0));
-		self::addCreativeItem(Item::get(Item::TRAPDOOR, 0));
-		self::addCreativeItem(Item::get(Item::FENCE, 0));
-		self::addCreativeItem(Item::get(Item::FENCE, 1));
-		self::addCreativeItem(Item::get(Item::FENCE, 2));
-		self::addCreativeItem(Item::get(Item::FENCE, 3));
-		self::addCreativeItem(Item::get(Item::FENCE, 4));
-		self::addCreativeItem(Item::get(Item::FENCE, 5));
-		self::addCreativeItem(Item::get(Item::FENCE_GATE, 0));
-		self::addCreativeItem(Item::get(Item::FENCE_GATE_BIRCH, 0));
-		self::addCreativeItem(Item::get(Item::FENCE_GATE_SPRUCE, 0));
-		self::addCreativeItem(Item::get(Item::FENCE_GATE_DARK_OAK, 0));
-		self::addCreativeItem(Item::get(Item::FENCE_GATE_JUNGLE, 0));
-		self::addCreativeItem(Item::get(Item::FENCE_GATE_ACACIA, 0));
-		self::addCreativeItem(Item::get(Item::IRON_BARS, 0));
-		self::addCreativeItem(Item::get(Item::BED, 0));
-		self::addCreativeItem(Item::get(Item::BOOKSHELF, 0));
-		self::addCreativeItem(Item::get(Item::PAINTING, 0));
-		self::addCreativeItem(Item::get(Item::WORKBENCH, 0));
-		self::addCreativeItem(Item::get(Item::STONECUTTER, 0));
-		self::addCreativeItem(Item::get(Item::CHEST, 0));
-		self::addCreativeItem(Item::get(Item::FURNACE, 0));
-		self::addCreativeItem(Item::get(Item::END_PORTAL, 0));
-		self::addCreativeItem(Item::get(Item::DANDELION, 0));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_POPPY));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_BLUE_ORCHID));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_ALLIUM));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_AZURE_BLUET));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_RED_TULIP));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_ORANGE_TULIP));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_WHITE_TULIP));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_PINK_TULIP));
-		self::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_OXEYE_DAISY));
-		//TODO: Lilac
-		//TODO: Double Tallgrass
-		//TODO: Large Fern
-		//TODO: Rose Bush
-		//TODO: Peony
-		self::addCreativeItem(Item::get(Item::BROWN_MUSHROOM, 0));
-		self::addCreativeItem(Item::get(Item::RED_MUSHROOM, 0));
-		//TODO: Mushroom block (brown, cover)
-		//TODO: Mushroom block (red, cover)
-		//TODO: Mushroom block (brown, stem)
-		//TODO: Mushroom block (red, stem)
-		self::addCreativeItem(Item::get(Item::CACTUS, 0));
-		self::addCreativeItem(Item::get(Item::MELON_BLOCK, 0));
-		self::addCreativeItem(Item::get(Item::PUMPKIN, 0));
-		self::addCreativeItem(Item::get(Item::LIT_PUMPKIN, 0));
-		self::addCreativeItem(Item::get(Item::COBWEB, 0));
-		self::addCreativeItem(Item::get(Item::HAY_BALE, 0));
-		self::addCreativeItem(Item::get(Item::TALL_GRASS, 1));
-		self::addCreativeItem(Item::get(Item::TALL_GRASS, 2));
-		self::addCreativeItem(Item::get(Item::DEAD_BUSH, 0));
-		self::addCreativeItem(Item::get(Item::SAPLING, 0));
-		self::addCreativeItem(Item::get(Item::SAPLING, 1));
-		self::addCreativeItem(Item::get(Item::SAPLING, 2));
-		self::addCreativeItem(Item::get(Item::SAPLING, 3));
-		self::addCreativeItem(Item::get(Item::SAPLING, 4));
-		self::addCreativeItem(Item::get(Item::SAPLING, 5));
-		self::addCreativeItem(Item::get(Item::LEAVES, 0));
-		self::addCreativeItem(Item::get(Item::LEAVES, 1));
-		self::addCreativeItem(Item::get(Item::LEAVES, 2));
-		self::addCreativeItem(Item::get(Item::LEAVES, 3));
-		self::addCreativeItem(Item::get(Item::LEAVES2, 0));
-		self::addCreativeItem(Item::get(Item::LEAVES2, 1));
-		self::addCreativeItem(Item::get(Item::CAKE, 0));
-		self::addCreativeItem(Item::get(Item::SIGN, 0));
-		self::addCreativeItem(Item::get(Item::MONSTER_SPAWNER, 0));
-		self::addCreativeItem(Item::get(Item::WOOL, 0));
-		self::addCreativeItem(Item::get(Item::WOOL, 7));
-		self::addCreativeItem(Item::get(Item::WOOL, 6));
-		self::addCreativeItem(Item::get(Item::WOOL, 5));
-		self::addCreativeItem(Item::get(Item::WOOL, 4));
-		self::addCreativeItem(Item::get(Item::WOOL, 3));
-		self::addCreativeItem(Item::get(Item::WOOL, 2));
-		self::addCreativeItem(Item::get(Item::WOOL, 1));
-		self::addCreativeItem(Item::get(Item::WOOL, 15));
-		self::addCreativeItem(Item::get(Item::WOOL, 14));
-		self::addCreativeItem(Item::get(Item::WOOL, 13));
-		self::addCreativeItem(Item::get(Item::WOOL, 12));
-		self::addCreativeItem(Item::get(Item::WOOL, 11));
-		self::addCreativeItem(Item::get(Item::WOOL, 10));
-		self::addCreativeItem(Item::get(Item::WOOL, 9));
-		self::addCreativeItem(Item::get(Item::WOOL, 8));
-		self::addCreativeItem(Item::get(Item::CARPET, 0));
-		self::addCreativeItem(Item::get(Item::CARPET, 7));
-		self::addCreativeItem(Item::get(Item::CARPET, 6));
-		self::addCreativeItem(Item::get(Item::CARPET, 5));
-		self::addCreativeItem(Item::get(Item::CARPET, 4));
-		self::addCreativeItem(Item::get(Item::CARPET, 3));
-		self::addCreativeItem(Item::get(Item::CARPET, 2));
-		self::addCreativeItem(Item::get(Item::CARPET, 1));
-		self::addCreativeItem(Item::get(Item::CARPET, 15));
-		self::addCreativeItem(Item::get(Item::CARPET, 14));
-		self::addCreativeItem(Item::get(Item::CARPET, 13));
-		self::addCreativeItem(Item::get(Item::CARPET, 12));
-		self::addCreativeItem(Item::get(Item::CARPET, 11));
-		self::addCreativeItem(Item::get(Item::CARPET, 10));
-		self::addCreativeItem(Item::get(Item::CARPET, 9));
-		self::addCreativeItem(Item::get(Item::CARPET, 8));
-
-
-		self::addCreativeItem(Item::get(Item::ANVIL, 0));
-		self::addCreativeItem(Item::get(Item::ANVIL, 4));
-		self::addCreativeItem(Item::get(Item::ANVIL, 8));
+		Item::addCreativeItem(Item::get(Item::COBBLESTONE_WALL, 0));
+		Item::addCreativeItem(Item::get(Item::COBBLESTONE_WALL, 1));
+		Item::addCreativeItem(Item::get(Item::WATER_LILY, 0));
+		Item::addCreativeItem(Item::get(Item::GOLD_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::IRON_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::LAPIS_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::COAL_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::EMERALD_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::REDSTONE_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::SNOW_LAYER, 0));
+		Item::addCreativeItem(Item::get(Item::GLASS, 0));
+		Item::addCreativeItem(Item::get(Item::GLOWSTONE_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::VINES, 0));
+		//Item::addCreativeItem(Item::get(Item::NETHER_REACTOR, 0));
+		Item::addCreativeItem(Item::get(Item::LADDER, 0));
+		Item::addCreativeItem(Item::get(Item::SPONGE, 0));
+		Item::addCreativeItem(Item::get(Item::GLASS_PANE, 0));
+		Item::addCreativeItem(Item::get(Item::OAK_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::SPRUCE_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::BIRCH_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::JUNGLE_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::ACACIA_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::DARK_OAK_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::IRON_DOOR, 0));
+		Item::addCreativeItem(Item::get(Item::TRAPDOOR, 0));
+		Item::addCreativeItem(Item::get(Item::IRON_TRAPDOOR, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE, Fence::FENCE_OAK));
+		Item::addCreativeItem(Item::get(Item::FENCE, Fence::FENCE_SPRUCE));
+		Item::addCreativeItem(Item::get(Item::FENCE, Fence::FENCE_BIRCH));
+		Item::addCreativeItem(Item::get(Item::FENCE, Fence::FENCE_JUNGLE));
+		Item::addCreativeItem(Item::get(Item::FENCE, Fence::FENCE_ACACIA));
+		Item::addCreativeItem(Item::get(Item::FENCE, Fence::FENCE_DARKOAK));
+		Item::addCreativeItem(Item::get(Item::NETHER_BRICK_FENCE, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE_GATE, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE_GATE_BIRCH, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE_GATE_SPRUCE, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE_GATE_DARK_OAK, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE_GATE_JUNGLE, 0));
+		Item::addCreativeItem(Item::get(Item::FENCE_GATE_ACACIA, 0));
+		Item::addCreativeItem(Item::get(Item::IRON_BARS, 0));
+		Item::addCreativeItem(Item::get(Item::BED, 0));
+		Item::addCreativeItem(Item::get(Item::BOOKSHELF, 0));
+		Item::addCreativeItem(Item::get(Item::PAINTING, 0));
+		Item::addCreativeItem(Item::get(Item::WORKBENCH, 0));
+		Item::addCreativeItem(Item::get(Item::STONECUTTER, 0));
+		Item::addCreativeItem(Item::get(Item::CHEST, 0));
+		Item::addCreativeItem(Item::get(Item::TRAPPED_CHEST, 0));
+		Item::addCreativeItem(Item::get(Item::FURNACE, 0));
+		Item::addCreativeItem(Item::get(Item::BREWING_STAND, 0));
+		Item::addCreativeItem(Item::get(Item::NOTEBLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::END_PORTAL, 0));
+		Item::addCreativeItem(Item::get(Item::ANVIL, 0));
+		Item::addCreativeItem(Item::get(Item::ANVIL, 4));
+		Item::addCreativeItem(Item::get(Item::ANVIL, 8));
+		Item::addCreativeItem(Item::get(Item::DANDELION, 0));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_POPPY));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_BLUE_ORCHID));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_ALLIUM));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_AZURE_BLUET));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_RED_TULIP));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_ORANGE_TULIP));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_WHITE_TULIP));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_PINK_TULIP));
+		Item::addCreativeItem(Item::get(Item::RED_FLOWER, Flower::TYPE_OXEYE_DAISY));
+		
+		Item::addCreativeItem(Item::get(Item::DOUBLE_PLANT, 0)); // SUNFLOWER ?
+		Item::addCreativeItem(Item::get(Item::DOUBLE_PLANT, 1)); // Lilac ?
+		Item::addCreativeItem(Item::get(Item::DOUBLE_PLANT, 2)); // Double TALL_GRASS
+		Item::addCreativeItem(Item::get(Item::DOUBLE_PLANT, 3)); // Large fern
+		Item::addCreativeItem(Item::get(Item::DOUBLE_PLANT, 4)); // Rose bush
+		Item::addCreativeItem(Item::get(Item::DOUBLE_PLANT, 5)); // Peony
+		
+		Item::addCreativeItem(Item::get(Item::BROWN_MUSHROOM, 0));
+		Item::addCreativeItem(Item::get(Item::RED_MUSHROOM, 0));
+		Item::addCreativeItem(Item::get(Item::BROWN_MUSHROOM_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::RED_MUSHROOM_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::BROWN_MUSHROOM_BLOCK, 15));
+		Item::addCreativeItem(Item::get(Item::RED_MUSHROOM_BLOCK, 15));
+
+		Item::addCreativeItem(Item::get(Item::CACTUS, 0));
+		Item::addCreativeItem(Item::get(Item::MELON_BLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::PUMPKIN, 0));
+		Item::addCreativeItem(Item::get(Item::LIT_PUMPKIN, 0));
+		Item::addCreativeItem(Item::get(Item::COBWEB, 0));
+		Item::addCreativeItem(Item::get(Item::HAY_BALE, 0));
+		Item::addCreativeItem(Item::get(Item::TALL_GRASS, 1)); // Grass
+		Item::addCreativeItem(Item::get(Item::TALL_GRASS, 2)); // Fern
+		Item::addCreativeItem(Item::get(Item::DEAD_BUSH, 0));
+		
+		Item::addCreativeItem(Item::get(Item::SAPLING, 0)); // Oak
+		Item::addCreativeItem(Item::get(Item::SAPLING, 1)); // Spruce
+		Item::addCreativeItem(Item::get(Item::SAPLING, 2)); // Birtch
+		Item::addCreativeItem(Item::get(Item::SAPLING, 3)); // Jungle
+		Item::addCreativeItem(Item::get(Item::SAPLING, 4)); // Acacia
+		Item::addCreativeItem(Item::get(Item::SAPLING, 5)); // Dark oak
+		
+		Item::addCreativeItem(Item::get(Item::LEAVES, 0)); // Oak
+		Item::addCreativeItem(Item::get(Item::LEAVES, 1)); // Spruce
+		Item::addCreativeItem(Item::get(Item::LEAVES, 2)); // Birtch
+		Item::addCreativeItem(Item::get(Item::LEAVES, 3)); // Jungle
+		Item::addCreativeItem(Item::get(Item::LEAVES2, 0)); // Acacia
+		Item::addCreativeItem(Item::get(Item::LEAVES2, 1)); // Dark oak
+		
+		Item::addCreativeItem(Item::get(Item::CAKE, 0));
+		
+		Item::addCreativeItem(Item::get(Item::SKULL, 0)); // Skeleton
+		Item::addCreativeItem(Item::get(Item::SKULL, 1)); // Wither Skeleton
+		Item::addCreativeItem(Item::get(Item::SKULL, 2)); // Zombie
+		Item::addCreativeItem(Item::get(Item::SKULL, 3)); // Head (Steve)
+		Item::addCreativeItem(Item::get(Item::SKULL, 4)); // Creeper
+		
+		Item::addCreativeItem(Item::get(Item::SIGN, 0));
+		Item::addCreativeItem(Item::get(Item::FLOWER_POT, 0));
+		Item::addCreativeItem(Item::get(Item::MONSTER_SPAWNER, 0));
+		Item::addCreativeItem(Item::get(Item::ENCHANTING_TABLE, 0));
+		
+		Item::addCreativeItem(Item::get(Item::WOOL, 0));
+		Item::addCreativeItem(Item::get(Item::WOOL, 1));
+		Item::addCreativeItem(Item::get(Item::WOOL, 2));
+		Item::addCreativeItem(Item::get(Item::WOOL, 3));
+		Item::addCreativeItem(Item::get(Item::WOOL, 4));
+		Item::addCreativeItem(Item::get(Item::WOOL, 5));
+		Item::addCreativeItem(Item::get(Item::WOOL, 6));
+		Item::addCreativeItem(Item::get(Item::WOOL, 7));
+		Item::addCreativeItem(Item::get(Item::WOOL, 8));
+		Item::addCreativeItem(Item::get(Item::WOOL, 9));
+		Item::addCreativeItem(Item::get(Item::WOOL, 10));
+		Item::addCreativeItem(Item::get(Item::WOOL, 11));
+		Item::addCreativeItem(Item::get(Item::WOOL, 12));
+		Item::addCreativeItem(Item::get(Item::WOOL, 13));
+		Item::addCreativeItem(Item::get(Item::WOOL, 14));
+		Item::addCreativeItem(Item::get(Item::WOOL, 15));
+		
+		
+		Item::addCreativeItem(Item::get(Item::CARPET, 0));
+		Item::addCreativeItem(Item::get(Item::CARPET, 1));
+		Item::addCreativeItem(Item::get(Item::CARPET, 2));
+		Item::addCreativeItem(Item::get(Item::CARPET, 3));
+		Item::addCreativeItem(Item::get(Item::CARPET, 4));
+		Item::addCreativeItem(Item::get(Item::CARPET, 5));
+		Item::addCreativeItem(Item::get(Item::CARPET, 6));
+		Item::addCreativeItem(Item::get(Item::CARPET, 7));
+		Item::addCreativeItem(Item::get(Item::CARPET, 8));
+		Item::addCreativeItem(Item::get(Item::CARPET, 9));
+		Item::addCreativeItem(Item::get(Item::CARPET, 10));
+		Item::addCreativeItem(Item::get(Item::CARPET, 11));
+		Item::addCreativeItem(Item::get(Item::CARPET, 12));
+		Item::addCreativeItem(Item::get(Item::CARPET, 13));
+		Item::addCreativeItem(Item::get(Item::CARPET, 14));
+		Item::addCreativeItem(Item::get(Item::CARPET, 15));
 
+	}
+	
+	private static function toolsTab(){
 		//Tools
-		//TODO self::addCreativeItem(Item::get(Item::RAILS, 0));
-		//TODO self::addCreativeItem(Item::get(Item::POWERED_RAILS, 0));
-		self::addCreativeItem(Item::get(Item::TORCH, 0));
-		self::addCreativeItem(Item::get(Item::BUCKET, 0));
-		self::addCreativeItem(Item::get(Item::BUCKET, 1));
-		self::addCreativeItem(Item::get(Item::BUCKET, 8));
-		self::addCreativeItem(Item::get(Item::BUCKET, 10));
-		self::addCreativeItem(Item::get(Item::TNT, 0));
-		self::addCreativeItem(Item::get(Item::IRON_HOE, 0));
-		self::addCreativeItem(Item::get(Item::IRON_SHOVEL, 0));
-		self::addCreativeItem(Item::get(Item::IRON_SWORD, 0));
-		self::addCreativeItem(Item::get(Item::BOW, 0));
-		self::addCreativeItem(Item::get(Item::SHEARS, 0));
-		self::addCreativeItem(Item::get(Item::FLINT_AND_STEEL, 0));
-		self::addCreativeItem(Item::get(Item::CLOCK, 0));
-		self::addCreativeItem(Item::get(Item::COMPASS, 0));
-		self::addCreativeItem(Item::get(Item::MINECART, 0));
-		self::addCreativeItem(Item::get(Item::SPAWN_EGG, Villager::NETWORK_ID));
-		//self::addCreativeItem(Item::get(Item::SPAWN_EGG, 10)); //Chicken
-		//self::addCreativeItem(Item::get(Item::SPAWN_EGG, 11)); //Cow
-		//self::addCreativeItem(Item::get(Item::SPAWN_EGG, 12)); //Pig
-		//self::addCreativeItem(Item::get(Item::SPAWN_EGG, 13)); //Sheep
-		//TODO: Wolf
-		//TODO: Mooshroom
-		//TODO: Creeper
-		//TODO: Enderman
-		//TODO: Silverfish
-		//TODO: Skeleton
-		//TODO: Slime
-		self::addCreativeItem(Item::get(Item::SPAWN_EGG, Zombie::NETWORK_ID));
-		//TODO: PigZombie
-		self::addCreativeItem(Item::get(Item::SPAWN_EGG, Squid::NETWORK_ID));
-
-		self::addCreativeItem(Item::get(Item::SNOWBALL));
-
-
+		Item::addCreativeItem(Item::get(Item::RAIL, 0));
+		Item::addCreativeItem(Item::get(Item::POWERED_RAIL, 0));
+		Item::addCreativeItem(Item::get(Item::DETECTOR_RAIL, 0));
+		// Item::addCreativeItem(Item::get(Item::ACTIVATOR_RAIL, 0));
+
+		Item::addCreativeItem(Item::get(Item::TORCH, 0));
+		Item::addCreativeItem(Item::get(Item::BUCKET, 0));
+		Item::addCreativeItem(Item::get(Item::BUCKET, 1)); // milk
+		Item::addCreativeItem(Item::get(Item::BUCKET, 8)); // water
+		Item::addCreativeItem(Item::get(Item::BUCKET, 10)); // lava
+		Item::addCreativeItem(Item::get(Item::TNT, 0)); 
+		Item::addCreativeItem(Item::get(Item::REDSTONE, 0));
+		Item::addCreativeItem(Item::get(Item::BOW, 0));
+		Item::addCreativeItem(Item::get(Item::FISHING_ROD, 0));
+		Item::addCreativeItem(Item::get(Item::FLINT_AND_STEEL, 0));
+		Item::addCreativeItem(Item::get(Item::SHEARS, 0));
+		Item::addCreativeItem(Item::get(Item::CLOCK, 0));
+		Item::addCreativeItem(Item::get(Item::COMPASS, 0));
+		Item::addCreativeItem(Item::get(Item::MINECART, 0));
+		Item::addCreativeItem(Item::get(Item::BOAT, 0)); // Oak
+		Item::addCreativeItem(Item::get(Item::BOAT, 1)); // Spruce
+		Item::addCreativeItem(Item::get(Item::BOAT, 2)); // Birtch
+		Item::addCreativeItem(Item::get(Item::BOAT, 3)); // Jungle
+		Item::addCreativeItem(Item::get(Item::BOAT, 4)); // Acacia
+		Item::addCreativeItem(Item::get(Item::BOAT, 5)); // Dark Oak
+		
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 10)); //Cow
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 11)); //Pig
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 12)); //Sheep
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 13)); //Wolf
+		Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 15)); //Villager
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 16)); //Mooshroom
+		Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 17)); //Squid 
+		Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 32)); //Zombie
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 33)); //Creeper
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 34)); //Skeleton
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 35)); //Spider
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 36)); //Zombie Pigman
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 37)); //Slime
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 38)); //Enderman
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 39)); //Silverfish
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 40)); //Cave spider
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 41)); //Ghast
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 42)); //Magma Cube
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 43)); //Blaze
+		
+		//Item::addCreativeItem(Item::get(Item::SPAWN_EGG, 44)); //Zombie Villager 
+		
+		Item::addCreativeItem(Item::get(Item::WOODEN_SWORD));
+		Item::addCreativeItem(Item::get(Item::WOODEN_HOE));
+		Item::addCreativeItem(Item::get(Item::WOODEN_SHOVEL));
+		Item::addCreativeItem(Item::get(Item::WOODEN_PICKAXE));
+		Item::addCreativeItem(Item::get(Item::WOODEN_AXE));
+		
+		Item::addCreativeItem(Item::get(Item::STONE_SWORD));
+		Item::addCreativeItem(Item::get(Item::STONE_HOE));
+		Item::addCreativeItem(Item::get(Item::STONE_SHOVEL));
+		Item::addCreativeItem(Item::get(Item::STONE_PICKAXE));
+		Item::addCreativeItem(Item::get(Item::STONE_AXE));
+
+		Item::addCreativeItem(Item::get(Item::IRON_SWORD));
+		Item::addCreativeItem(Item::get(Item::IRON_HOE));
+		Item::addCreativeItem(Item::get(Item::IRON_SHOVEL));
+		Item::addCreativeItem(Item::get(Item::IRON_PICKAXE));
+		Item::addCreativeItem(Item::get(Item::IRON_AXE));
+		
+		Item::addCreativeItem(Item::get(Item::DIAMOND_SWORD));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_HOE));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_SHOVEL));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_PICKAXE));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_AXE));		
+		
+		Item::addCreativeItem(Item::get(Item::GOLD_SWORD));
+		Item::addCreativeItem(Item::get(Item::GOLD_HOE));
+		Item::addCreativeItem(Item::get(Item::GOLD_SHOVEL));
+		Item::addCreativeItem(Item::get(Item::GOLD_PICKAXE));
+		Item::addCreativeItem(Item::get(Item::GOLD_AXE));
+		
+		Item::addCreativeItem(Item::get(Item::LEATHER_CAP));
+		Item::addCreativeItem(Item::get(Item::LEATHER_TUNIC));
+		Item::addCreativeItem(Item::get(Item::LEATHER_PANTS));
+		Item::addCreativeItem(Item::get(Item::LEATHER_BOOTS));
+		
+		Item::addCreativeItem(Item::get(Item::CHAIN_HELMET));
+		Item::addCreativeItem(Item::get(Item::CHAIN_CHESTPLATE));
+		Item::addCreativeItem(Item::get(Item::CHAIN_LEGGINGS));
+		Item::addCreativeItem(Item::get(Item::CHAIN_BOOTS));
+		
+		Item::addCreativeItem(Item::get(Item::IRON_HELMET));
+		Item::addCreativeItem(Item::get(Item::IRON_CHESTPLATE));
+		Item::addCreativeItem(Item::get(Item::IRON_LEGGINGS));
+		Item::addCreativeItem(Item::get(Item::IRON_BOOTS));		
+		
+		Item::addCreativeItem(Item::get(Item::DIAMOND_HELMET));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_CHESTPLATE));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_LEGGINGS));
+		Item::addCreativeItem(Item::get(Item::DIAMOND_BOOTS));		
+		
+		Item::addCreativeItem(Item::get(Item::GOLD_HELMET));
+		Item::addCreativeItem(Item::get(Item::GOLD_CHESTPLATE));
+		Item::addCreativeItem(Item::get(Item::GOLD_LEGGINGS));
+		Item::addCreativeItem(Item::get(Item::GOLD_BOOTS));
+		Item::addCreativeItem(Item::get(Item::LEVER));
+		Item::addCreativeItem(Item::get(Item::REDSTONE_LAMP));
+		Item::addCreativeItem(Item::get(Item::REDSTONE_TORCH));
+		// WOODEN_PRESSURE_PLATE - not implemented
+		// STONE_PRESSURE_PLATE - not implemented
+		// Weighted pressure plate(light) - not implemented
+		// Weighted pressure plate(heavy) - not implemented
+		// BUTTON_WOOD
+		// BUTTON_STONE
+		Item::addCreativeItem(Item::get(Item::DAYLIGHT_DETECTOR));
+		Item::addCreativeItem(Item::get(Item::TRIPWIRE_HOOK));
+		Item::addCreativeItem(Item::get(Item::SNOWBALL));
+	}
+	
+	private static function seedsTab(){
 		//Seeds
-		self::addCreativeItem(Item::get(Item::SUGARCANE, 0));
-		self::addCreativeItem(Item::get(Item::WHEAT, 0));
-		self::addCreativeItem(Item::get(Item::SEEDS, 0));
-		self::addCreativeItem(Item::get(Item::MELON_SEEDS, 0));
-		self::addCreativeItem(Item::get(Item::PUMPKIN_SEEDS, 0));
-		self::addCreativeItem(Item::get(Item::CARROT, 0));
-		self::addCreativeItem(Item::get(Item::POTATO, 0));
-		self::addCreativeItem(Item::get(Item::BEETROOT_SEEDS, 0));
-		self::addCreativeItem(Item::get(Item::EGG, 0));
-		self::addCreativeItem(Item::get(Item::RAW_FISH, 0));
-		self::addCreativeItem(Item::get(Item::RAW_FISH, 1));
-		self::addCreativeItem(Item::get(Item::RAW_FISH, 2));
-		self::addCreativeItem(Item::get(Item::RAW_FISH, 3));
-		self::addCreativeItem(Item::get(Item::COOKED_FISH, 0));
-		self::addCreativeItem(Item::get(Item::COOKED_FISH, 1));
-		self::addCreativeItem(Item::get(Item::DYE, 0));
-		self::addCreativeItem(Item::get(Item::DYE, 7));
-		self::addCreativeItem(Item::get(Item::DYE, 6));
-		self::addCreativeItem(Item::get(Item::DYE, 5));
-		self::addCreativeItem(Item::get(Item::DYE, 4));
-		self::addCreativeItem(Item::get(Item::DYE, 3));
-		self::addCreativeItem(Item::get(Item::DYE, 2));
-		self::addCreativeItem(Item::get(Item::DYE, 1));
-		self::addCreativeItem(Item::get(Item::DYE, 15));
-		self::addCreativeItem(Item::get(Item::DYE, 14));
-		self::addCreativeItem(Item::get(Item::DYE, 13));
-		self::addCreativeItem(Item::get(Item::DYE, 12));
-		self::addCreativeItem(Item::get(Item::DYE, 11));
-		self::addCreativeItem(Item::get(Item::DYE, 10));
-		self::addCreativeItem(Item::get(Item::DYE, 9));
-		self::addCreativeItem(Item::get(Item::DYE, 8));
+		/* 
+		Im gonna make it so you can do:
+		Item::addCreativeItem(Item::get(Item::POTION, Potion::'EFFECT'));
+		Item::addCreativeItem(Item::get(Item::ENCHANTED_BOOK, EchnatedBook::'ENCHANTMENT'));
+		*/
+		Item::addCreativeItem(Item::get(Item::COAL, 0));
+		Item::addCreativeItem(Item::get(Item::COAL, 1)); // charcoal
+		Item::addCreativeItem(Item::get(Item::DIAMOND, 0)); 
+		Item::addCreativeItem(Item::get(Item::IRON_INGOT, 0));
+		Item::addCreativeItem(Item::get(Item::GOLD_INGOT, 0));
+		Item::addCreativeItem(Item::get(Item::EMERALD, 0));
+		Item::addCreativeItem(Item::get(Item::STICK, 0));
+		Item::addCreativeItem(Item::get(Item::BOWL, 0));
+		Item::addCreativeItem(Item::get(Item::STRING, 0));
+		Item::addCreativeItem(Item::get(Item::FEATHER, 0));
+		Item::addCreativeItem(Item::get(Item::FLINT, 0));
+		Item::addCreativeItem(Item::get(Item::LEATHER, 0));
+		Item::addCreativeItem(Item::get(Item::CLAY, 0));
+		Item::addCreativeItem(Item::get(Item::SUGAR, 0));
+		Item::addCreativeItem(Item::get(Item::NETHER_QUARTZ, 0));
+		Item::addCreativeItem(Item::get(Item::PAPER, 0));
+		Item::addCreativeItem(Item::get(Item::BOOK, 0));
+		Item::addCreativeItem(Item::get(Item::ARROW, 0));
+		Item::addCreativeItem(Item::get(Item::BONE, 0));
+		Item::addCreativeItem(Item::get(Item::SUGARCANE, 0));
+		Item::addCreativeItem(Item::get(Item::WHEAT, 0));
+		Item::addCreativeItem(Item::get(Item::SEEDS, 0));
+		Item::addCreativeItem(Item::get(Item::PUMPKIN_SEEDS, 0));
+		Item::addCreativeItem(Item::get(Item::MELON_SEEDS, 0));
+		Item::addCreativeItem(Item::get(Item::BEETROOT_SEEDS, 0));
+		Item::addCreativeItem(Item::get(Item::EGG, 0));
+		Item::addCreativeItem(Item::get(Item::APPLE, 0));
+		Item::addCreativeItem(Item::get(Item::GOLDEN_APPLE, 0));
+		Item::addCreativeItem(Item::get(Item::GOLDEN_APPLE, 1)); // Enchanted golden apple
+		Item::addCreativeItem(Item::get(Item::RAW_FISH, 0)); 
+		Item::addCreativeItem(Item::get(Item::RAW_FISH, 1)); // Salmon
+		Item::addCreativeItem(Item::get(Item::RAW_FISH, 2)); // Clownfish
+		Item::addCreativeItem(Item::get(Item::RAW_FISH, 3)); // Pufferfish
+		Item::addCreativeItem(Item::get(Item::COOKED_FISH, 0));
+		Item::addCreativeItem(Item::get(Item::COOKED_FISH, 1)); // Salmon
+		Item::addCreativeItem(Item::get(Item::ROTTEN_FLESH, 0));
+		Item::addCreativeItem(Item::get(Item::MUSHROOM_STEW, 0));
+		Item::addCreativeItem(Item::get(Item::BREAD, 0));
+		Item::addCreativeItem(Item::get(Item::RAW_PORKCHOP, 0));
+		Item::addCreativeItem(Item::get(Item::COOKED_PORKCHOP, 0));
+		Item::addCreativeItem(Item::get(Item::RAW_CHICKEN, 0));
+		Item::addCreativeItem(Item::get(Item::COOKED_CHICKEN, 0));
+		Item::addCreativeItem(Item::get(Item::RAW_BEEF, 0));
+		Item::addCreativeItem(Item::get(Item::COOKED_BEEF, 0));
+		Item::addCreativeItem(Item::get(Item::MELON, 0));
+		Item::addCreativeItem(Item::get(Item::CARROT, 0));
+		Item::addCreativeItem(Item::get(Item::POTATO, 0));
+		Item::addCreativeItem(Item::get(Item::BAKED_POTATO, 0));
+		Item::addCreativeItem(Item::get(Item::POISONOUS_POTATO, 0));
+		Item::addCreativeItem(Item::get(Item::COOKIE, 0));
+		Item::addCreativeItem(Item::get(Item::PUMPKIN_PIE, 0));
+		// Item::addCreativeItem(Item::get(Item::RAW_RABBIT, 0));
+		// Item::addCreativeItem(Item::get(Item::COOKED_RABBIT, 0));
+		// Item::addCreativeItem(Item::get(Item::RABBIT_STEW, 0));
+		Item::addCreativeItem(Item::get(Item::MAGMA_CREAM, 0));
+		Item::addCreativeItem(Item::get(Item::BLAZE_ROD, 0));
+		Item::addCreativeItem(Item::get(Item::GOLD_NUGGET, 0));
+		Item::addCreativeItem(Item::get(Item::GOLDEN_CARROT, 0));
+		// Item::addCreativeItem(Item::get(Item::GLISTERING_MELON, 0));
+		// Item::addCreativeItem(Item::get(Item::RABBIT_FOOT, 0));
+		// Item::addCreativeItem(Item::get(Item::GHAST_TEAR, 0));
+		Item::addCreativeItem(Item::get(Item::SLIMEBALL, 0));
+		// Item::addCreativeItem(Item::get(Item::BLAZE_POWDER, 0));
+		Item::addCreativeItem(Item::get(Item::NETHER_WART, 0));
+		Item::addCreativeItem(Item::get(Item::GUNPOWDER, 0));
+		Item::addCreativeItem(Item::get(Item::GLOWSTONE_DUST, 0));
+		Item::addCreativeItem(Item::get(Item::SPIDER_EYE, 0));
+		Item::addCreativeItem(Item::get(Item::FERMENTED_SPIDER_EYE, 0));
+		
+		// Bottle o' enchanting
+		// enchanted books
+		
+		Item::addCreativeItem(Item::get(Item::DYE, 0));
+		Item::addCreativeItem(Item::get(Item::DYE, 7));
+		Item::addCreativeItem(Item::get(Item::DYE, 6));
+		Item::addCreativeItem(Item::get(Item::DYE, 5));
+		Item::addCreativeItem(Item::get(Item::DYE, 4));
+		Item::addCreativeItem(Item::get(Item::DYE, 3));
+		Item::addCreativeItem(Item::get(Item::DYE, 2));
+		Item::addCreativeItem(Item::get(Item::DYE, 1));
+		Item::addCreativeItem(Item::get(Item::DYE, 15));
+		Item::addCreativeItem(Item::get(Item::DYE, 14));
+		Item::addCreativeItem(Item::get(Item::DYE, 13));
+		Item::addCreativeItem(Item::get(Item::DYE, 12));
+		Item::addCreativeItem(Item::get(Item::DYE, 11));
+		Item::addCreativeItem(Item::get(Item::DYE, 10));
+		Item::addCreativeItem(Item::get(Item::DYE, 9));
+		Item::addCreativeItem(Item::get(Item::DYE, 8));
+		
+		// Item::addCreativeItem(Item::get(Item::GLASS_BOTTLE, 0));
+		
+		// Potions
+		
+		// Splash Potions
 	}
-
+	
 	public static function clearCreativeItems(){
 		Item::$creative = [];
 	}
@@ -951,7 +1360,7 @@ class Item{
 			$this->name = $this->block->getName();
 		}
 	}
-	
+
 	public function setCompoundTag($tags){
 		if($tags instanceof Compound){
 			$this->setNamedTag($tags);
@@ -959,7 +1368,7 @@ class Item{
 			$this->tags = $tags;
 			$this->cachedNBT = null;
 		}
-		
+
 		return $this;
 	}
 
@@ -969,7 +1378,7 @@ class Item{
 	public function getCompoundTag(){
 		return $this->tags;
 	}
-	
+
 	public function hasCompoundTag(){
 		return $this->tags !== "" and $this->tags !== null;
 	}
@@ -1203,7 +1612,7 @@ class Item{
 
 		return null;
 	}
-	
+
 	public function getNamedTag(){
 		if(!$this->hasCompoundTag()){
 			return null;
diff --git a/src/pocketmine/item/JungleDoor.php b/src/pocketmine/item/JungleDoor.php
new file mode 100644
index 00000000..80be535
--- /dev/null
+++ b/src/pocketmine/item/JungleDoor.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class JungleDoor extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::JUNGLE_DOOR_BLOCK);
+		parent::__construct(self::JUNGLE_DOOR, 0, $count, "Jungle Door");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Leather.php b/src/pocketmine/item/Leather.php
new file mode 100644
index 00000000..56a17dc
--- /dev/null
+++ b/src/pocketmine/item/Leather.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Leather extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::LEATHER, $meta, $count, "Leather");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Melon.php b/src/pocketmine/item/Melon.php
new file mode 100644
index 00000000..278952f
--- /dev/null
+++ b/src/pocketmine/item/Melon.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Melon extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::MELON, $meta, $count, "Melon");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/Minecart.php b/src/pocketmine/item/Minecart.php
new file mode 100644
index 00000000..0ee8123
--- /dev/null
+++ b/src/pocketmine/item/Minecart.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Minecart extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::MINECART, $meta, $count, "Minecart");
+	}
+
+}
+
diff --git a/src/pocketmine/item/MushroomStew.php b/src/pocketmine/item/MushroomStew.php
index 172852c..d728d80 100644
--- a/src/pocketmine/item/MushroomStew.php
+++ b/src/pocketmine/item/MushroomStew.php
@@ -22,7 +22,7 @@
 namespace pocketmine\item;
 
 
-class MushroomStew extends Item{
+class MushroomStew extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		parent::__construct(self::MUSHROOM_STEW, 0, $count, "Mushroom Stew");
 	}
@@ -30,4 +30,9 @@ class MushroomStew extends Item{
 	public function getMaxStackSize(){
 		return 1;
 	}
-}
\ No newline at end of file
+
+        public function isEatable() {
+                return true;
+        }
+
+}
diff --git a/src/pocketmine/item/NetherBrick.php b/src/pocketmine/item/NetherBrick.php
new file mode 100644
index 00000000..1520f8d
--- /dev/null
+++ b/src/pocketmine/item/NetherBrick.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class NetherBrick extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::NETHER_BRICK, $meta, $count, "Nether Brick");
+	}
+
+}
+
diff --git a/src/pocketmine/item/NetherQuartz.php b/src/pocketmine/item/NetherQuartz.php
new file mode 100644
index 00000000..070d804
--- /dev/null
+++ b/src/pocketmine/item/NetherQuartz.php
@@ -0,0 +1,29 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class NetherQuartz extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::NETHER_QUARTZ, 0, $count, "Nether Quartz");
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/NetherWart.php b/src/pocketmine/item/NetherWart.php
new file mode 100644
index 00000000..1af229c
--- /dev/null
+++ b/src/pocketmine/item/NetherWart.php
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class NetherWart extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::NETHER_WART, $meta, $count, "Nether Wart");
+	}
+
+}
+
diff --git a/src/pocketmine/item/OakDoor.php b/src/pocketmine/item/OakDoor.php
new file mode 100644
index 00000000..26e0c2f
--- /dev/null
+++ b/src/pocketmine/item/OakDoor.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class OakDoor extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::OAK_DOOR_BLOCK);
+		parent::__construct(self::OAK_DOOR, 0, $count, "Oak Door");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Paper.php b/src/pocketmine/item/Paper.php
new file mode 100644
index 00000000..ef80498
--- /dev/null
+++ b/src/pocketmine/item/Paper.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Paper extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::PAPER, $meta, $count, "Paper");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Potato.php b/src/pocketmine/item/Potato.php
index d68f86f..9b697b8 100644
--- a/src/pocketmine/item/Potato.php
+++ b/src/pocketmine/item/Potato.php
@@ -23,9 +23,14 @@ namespace pocketmine\item;
 
 use pocketmine\block\Block;
 
-class Potato extends Item{
+class Potato extends Item implements Food{
 	public function __construct($meta = 0, $count = 1){
 		$this->block = Block::get(Item::POTATO_BLOCK);
 		parent::__construct(self::POTATO, 0, $count, "Potato");
 	}
-}
\ No newline at end of file
+
+        public function isEatable() {
+                return true;
+        }
+
+}
diff --git a/src/pocketmine/item/Potion.php b/src/pocketmine/item/Potion.php
new file mode 100644
index 00000000..34bfb5d
--- /dev/null
+++ b/src/pocketmine/item/Potion.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class Potion extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::POTION, 0, $count, "Potion");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/PumpkinPie.php b/src/pocketmine/item/PumpkinPie.php
new file mode 100644
index 00000000..561b175
--- /dev/null
+++ b/src/pocketmine/item/PumpkinPie.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class PumpkinPie extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::PUMPKIN_PIE, $meta, $count, "Pumpkin Pie");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/Quartz.php b/src/pocketmine/item/Quartz.php
new file mode 100644
index 00000000..a2990d5
--- /dev/null
+++ b/src/pocketmine/item/Quartz.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Quartz extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::QUARTZ, $meta, $count, "Quartz");
+	}
+
+}
+
diff --git a/src/pocketmine/item/RawBeef.php b/src/pocketmine/item/RawBeef.php
new file mode 100644
index 00000000..d859e21
--- /dev/null
+++ b/src/pocketmine/item/RawBeef.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class RawBeef extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::RAW_BEEF, $meta, $count, "Raw Beef");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/RawChicken.php b/src/pocketmine/item/RawChicken.php
new file mode 100644
index 00000000..9b1e0d7
--- /dev/null
+++ b/src/pocketmine/item/RawChicken.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class RawChicken extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::RAW_CHICKEN, $meta, $count, "Raw Chicken");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/RawPorkchop.php b/src/pocketmine/item/RawPorkchop.php
new file mode 100644
index 00000000..ed29551
--- /dev/null
+++ b/src/pocketmine/item/RawPorkchop.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class RawPorkchop extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::RAW_PORKCHOP, $meta, $count, "Raw Porkchop");
+	}
+
+        public function isEatable() {
+                return true;
+        }
+
+}
+
diff --git a/src/pocketmine/item/Redstone.php b/src/pocketmine/item/Redstone.php
new file mode 100644
index 00000000..0184604
--- /dev/null
+++ b/src/pocketmine/item/Redstone.php
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class Redstone extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::REDSTONE_WIRE);
+		parent::__construct(self::REDSTONE, $meta, $count, "Redstone");
+	}
+
+}
+
diff --git a/src/pocketmine/item/RedstoneLamp.php b/src/pocketmine/item/RedstoneLamp.php
new file mode 100644
index 00000000..cf9f707
--- /dev/null
+++ b/src/pocketmine/item/RedstoneLamp.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class RedstoneLamp extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::REDSTONE_LAMP);
+		parent::__construct(self::REDSTONE_LAMP, 0, $count, "Redstone Lamp");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
diff --git a/src/pocketmine/item/RottenFlesh.php b/src/pocketmine/item/RottenFlesh.php
new file mode 100644
index 00000000..cc63fb5
--- /dev/null
+++ b/src/pocketmine/item/RottenFlesh.php
@@ -0,0 +1,33 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class RottenFlesh extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::ROTTEN_FLESH, 0, $count, "Rotten Flesh");
+	}
+	public function isEatable() {
+		return true;
+	}
+	
+}
diff --git a/src/pocketmine/item/Saddle.php b/src/pocketmine/item/Saddle.php
new file mode 100644
index 00000000..0d0aba2
--- /dev/null
+++ b/src/pocketmine/item/Saddle.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class Saddle extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::SADDLE, 0, $count, "Saddle");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Skull.php b/src/pocketmine/item/Skull.php
new file mode 100644
index 00000000..b30761f
--- /dev/null
+++ b/src/pocketmine/item/Skull.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class Skull extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::SKULL, 0, $count, "Skull");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Slimeball.php b/src/pocketmine/item/Slimeball.php
new file mode 100644
index 00000000..e397852
--- /dev/null
+++ b/src/pocketmine/item/Slimeball.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Slimeball extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::SLIMEBALL, $meta, $count, "Slimeball");
+	}
+
+}
+
diff --git a/src/pocketmine/item/SplashPotion.php b/src/pocketmine/item/SplashPotion.php
new file mode 100644
index 00000000..c619bfd
--- /dev/null
+++ b/src/pocketmine/item/SplashPotion.php
@@ -0,0 +1,34 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+
+class SplashPotion extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::SPLASH_POTION, 0, $count, "Splash Potion");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/SpruceDoor.php b/src/pocketmine/item/SpruceDoor.php
new file mode 100644
index 00000000..27b398c
--- /dev/null
+++ b/src/pocketmine/item/SpruceDoor.php
@@ -0,0 +1,35 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+use pocketmine\block\Block;
+
+class SpruceDoor extends Item{
+	public function __construct($meta = 0, $count = 1){
+		$this->block = Block::get(Item::SPRUCE_DOOR_BLOCK);
+		parent::__construct(self::SPRUCE_DOOR, 0, $count, "Spruce Door");
+	}
+
+	public function getMaxStackSize(){
+		return 1;
+	}
+}
\ No newline at end of file
diff --git a/src/pocketmine/item/Steak.php b/src/pocketmine/item/Steak.php
new file mode 100644
index 00000000..702586f
--- /dev/null
+++ b/src/pocketmine/item/Steak.php
@@ -0,0 +1,32 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Steak extends Item implements Food{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::STEAK, $meta, $count, "Steak");
+	}
+	public function isEatable() {
+		return true;
+	}
+	
+}
diff --git a/src/pocketmine/item/StringItem.php b/src/pocketmine/item/StringItem.php
new file mode 100644
index 00000000..f6682ec
--- /dev/null
+++ b/src/pocketmine/item/StringItem.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ *
+ *
+*/
+
+namespace pocketmine\item;
+
+class StringItem extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::STRING, $meta, $count, "String");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Sugar.php b/src/pocketmine/item/Sugar.php
new file mode 100644
index 00000000..d200ea9
--- /dev/null
+++ b/src/pocketmine/item/Sugar.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Sugar extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::SUGAR, $meta, $count, "Sugar");
+	}
+
+}
+
diff --git a/src/pocketmine/item/Wheat.php b/src/pocketmine/item/Wheat.php
new file mode 100644
index 00000000..b853c6d
--- /dev/null
+++ b/src/pocketmine/item/Wheat.php
@@ -0,0 +1,30 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\item;
+
+class Wheat extends Item{
+	public function __construct($meta = 0, $count = 1){
+		parent::__construct(self::WHEAT, $meta, $count, "Wheat");
+	}
+
+}
+
diff --git a/src/pocketmine/item/enchantment/Enchantment.php b/src/pocketmine/item/enchantment/Enchantment.php
index 951a64f..00542c1 100644
--- a/src/pocketmine/item/enchantment/Enchantment.php
+++ b/src/pocketmine/item/enchantment/Enchantment.php
@@ -90,6 +90,28 @@ class Enchantment{
 		self::$enchantments[self::TYPE_ARMOR_PROTECTION] = new Enchantment(self::TYPE_ARMOR_PROTECTION, "%enchantment.protect.all", self::RARITY_COMMON, self::ACTIVATION_EQUIP, self::SLOT_ARMOR);
 		self::$enchantments[self::TYPE_ARMOR_FIRE_PROTECTION] = new Enchantment(self::TYPE_ARMOR_FIRE_PROTECTION, "%enchantment.protect.fire", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_ARMOR);
 		self::$enchantments[self::TYPE_ARMOR_FALL_PROTECTION] = new Enchantment(self::TYPE_ARMOR_FALL_PROTECTION, "%enchantment.protect.fall", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_FEET);
+		self::$enchantments[self::TYPE_ARMOR_EXPLOSION_PROTECTION] = new Enchantment(self::TYPE_ARMOR_EXPLOSION_PROTECTION, "%enchantment.protect.explosion", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_ARMOR);
+		self::$enchantments[self::TYPE_ARMOR_PROJECTILE_PROTECTION] = new Enchantment(self::TYPE_ARMOR_PROJECTILE_PROTECTION, "%enchantment.protect.projectile", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_ARMOR);
+		self::$enchantments[self::TYPE_ARMOR_THORNS] = new Enchantment(self::TYPE_ARMOR_THORNS, "%enchantment.thorns", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_ARMOR);
+		self::$enchantments[self::TYPE_WATER_BREATHING] = new Enchantment(self::TYPE_WATER_BREATHING, "%enchantment.water.breathing", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_HEAD);
+		self::$enchantments[self::TYPE_WATER_SPEED] = new Enchantment(self::TYPE_WATER_SPEED, "%enchantment.water.speed", self::RARITY_UNCOMMON, self::ACTIVATION_EQUIP, self::SLOT_FEET);
+		self::$enchantments[self::TYPE_WATER_AFFINITY] = new Enchantment(self::TYPE_WATER_AFFINITY, "%enchantment.water.affinity", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_TOOL);
+		self::$enchantments[self::TYPE_WEAPON_SHARPNESS] = new Enchantment(self::TYPE_WEAPON_SHARPNESS, "%enchantment.weapon.sharpness", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_SWORD);
+		self::$enchantments[self::TYPE_WEAPON_SMITE] = new Enchantment(self::TYPE_WEAPON_SMITE, "%enchantment.weapon.smite", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_SWORD);
+		self::$enchantments[self::TYPE_WEAPON_ARTHROPODS] = new Enchantment(self::TYPE_WEAPON_ARTHROPODS, "%enchantment.weapon.arthropods", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_SWORD);
+		self::$enchantments[self::TYPE_WEAPON_KNOCKBACK] = new Enchantment(self::TYPE_WEAPON_KNOCKBACK, "%enchantment.weapon.knockback", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_SWORD);
+		self::$enchantments[self::TYPE_WEAPON_FIRE_ASPECT] = new Enchantment(self::TYPE_WEAPON_FIRE_ASPECT, "%enchantment.weapon.fire", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_SWORD);
+		self::$enchantments[self::TYPE_WEAPON_LOOTING] = new Enchantment(self::TYPE_WEAPON_LOOTING, "%enchantment.weapon.looting", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_SWORD);
+		self::$enchantments[self::TYPE_MINING_EFFICIENCY] = new Enchantment(self::TYPE_MINING_EFFICIENCY, "%enchantment.mining.efficiency", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_PICKAXE);
+		self::$enchantments[self::TYPE_MINING_SILK_TOUCH] = new Enchantment(self::TYPE_MINING_SILK_TOUCH, "%enchantment.mining.silktouch", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_PICKAXE);
+		self::$enchantments[self::TYPE_MINING_DURABILITY] = new Enchantment(self::TYPE_MINING_DURABILITY, "%enchantment.mining.durability", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_TOOL);
+		self::$enchantments[self::TYPE_MINING_FORTUNE] = new Enchantment(self::TYPE_MINING_FORTUNE, "%enchantment.mining.fortune", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_PICKAXE);
+		self::$enchantments[self::TYPE_BOW_POWER] = new Enchantment(self::TYPE_BOW_POWER, "%enchantment.bow.power", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_BOW);
+		self::$enchantments[self::TYPE_BOW_KNOCKBACK] = new Enchantment(self::TYPE_BOW_KNOCKBACK, "%enchantment.bow.knockback", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_BOW);
+		self::$enchantments[self::TYPE_BOW_FLAME] = new Enchantment(self::TYPE_BOW_FLAME, "%enchantment.bow.flame", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_BOW);
+		self::$enchantments[self::TYPE_BOW_INFINITY] = new Enchantment(self::TYPE_BOW_INFINITY, "%enchantment.bow.infinity", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_BOW);
+		self::$enchantments[self::TYPE_FISHING_FORTUNE] = new Enchantment(self::TYPE_FISHING_FORTUNE, "%enchantment.fishing.fortune", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_FISHING_ROD);
+		self::$enchantments[self::TYPE_FISHING_LURE] = new Enchantment(self::TYPE_FISHING_LURE, "%enchantment.fishing.lure", self::RARITY_UNCOMMON, self::ACTIVATION_HELD, self::SLOT_FISHING_ROD);
 	}
 
 	/**
@@ -159,4 +181,4 @@ class Enchantment{
 		return $this;
 	}
 
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/network/Network.php b/src/pocketmine/network/Network.php
index 8540d56..729f7c5 100644
--- a/src/pocketmine/network/Network.php
+++ b/src/pocketmine/network/Network.php
@@ -43,7 +43,7 @@ use pocketmine\network\protocol\DropItemPacket;
 use pocketmine\network\protocol\FullChunkDataPacket;
 use pocketmine\network\protocol\Info;
 use pocketmine\network\protocol\SetEntityLinkPacket;
-use pocketmine\network\protocol\TileEntityDataPacket;
+use pocketmine\network\protocol\BlockEntityDataPacket;
 use pocketmine\network\protocol\EntityEventPacket;
 use pocketmine\network\protocol\ExplodePacket;
 use pocketmine\network\protocol\HurtArmorPacket;
@@ -71,7 +71,7 @@ use pocketmine\network\protocol\SetSpawnPositionPacket;
 use pocketmine\network\protocol\SetTimePacket;
 use pocketmine\network\protocol\StartGamePacket;
 use pocketmine\network\protocol\TakeItemEntityPacket;
-use pocketmine\network\protocol\TileEventPacket;
+use pocketmine\network\protocol\BlockEventPacket;
 use pocketmine\network\protocol\UpdateBlockPacket;
 use pocketmine\network\protocol\UseItemPacket;
 use pocketmine\network\protocol\PlayerListPacket;
@@ -325,7 +325,7 @@ class Network{
 		$this->registerPacket(ProtocolInfo::ADD_PAINTING_PACKET, AddPaintingPacket::class);
 		$this->registerPacket(ProtocolInfo::EXPLODE_PACKET, ExplodePacket::class);
 		$this->registerPacket(ProtocolInfo::LEVEL_EVENT_PACKET, LevelEventPacket::class);
-		$this->registerPacket(ProtocolInfo::TILE_EVENT_PACKET, TileEventPacket::class);
+		$this->registerPacket(ProtocolInfo::BLOCK_EVENT_PACKET, BlockEventPacket::class);
 		$this->registerPacket(ProtocolInfo::ENTITY_EVENT_PACKET, EntityEventPacket::class);
 		$this->registerPacket(ProtocolInfo::MOB_EQUIPMENT_PACKET, MobEquipmentPacket::class);
 		$this->registerPacket(ProtocolInfo::MOB_ARMOR_EQUIPMENT_PACKET, MobArmorEquipmentPacket::class);
@@ -349,7 +349,7 @@ class Network{
 		$this->registerPacket(ProtocolInfo::CRAFTING_DATA_PACKET, CraftingDataPacket::class);
 		$this->registerPacket(ProtocolInfo::CRAFTING_EVENT_PACKET, CraftingEventPacket::class);
 		$this->registerPacket(ProtocolInfo::ADVENTURE_SETTINGS_PACKET, AdventureSettingsPacket::class);
-		$this->registerPacket(ProtocolInfo::TILE_ENTITY_DATA_PACKET, TileEntityDataPacket::class);
+		$this->registerPacket(ProtocolInfo::BLOCK_ENTITY_DATA_PACKET, BlockEntityDataPacket::class);
 		$this->registerPacket(ProtocolInfo::FULL_CHUNK_DATA_PACKET, FullChunkDataPacket::class);
 		$this->registerPacket(ProtocolInfo::SET_DIFFICULTY_PACKET, SetDifficultyPacket::class);
 		$this->registerPacket(ProtocolInfo::PLAYER_LIST_PACKET, PlayerListPacket::class);
diff --git a/src/pocketmine/network/protocol/BlockEntityDataPacket.php b/src/pocketmine/network/protocol/BlockEntityDataPacket.php
new file mode 100644
index 00000000..f84b439
--- /dev/null
+++ b/src/pocketmine/network/protocol/BlockEntityDataPacket.php
@@ -0,0 +1,50 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\network\protocol;
+
+#include <rules/DataPacket.h>
+
+
+class BlockEntityDataPacket extends DataPacket{
+	const NETWORK_ID = Info::BLOCK_ENTITY_DATA_PACKET;
+
+	public $x;
+	public $y;
+	public $z;
+	public $namedtag;
+
+	public function decode(){
+		$this->x = $this->getInt();
+		$this->y = $this->getInt();
+		$this->z = $this->getInt();
+		$this->namedtag = $this->get(true);
+	}
+
+	public function encode(){
+		$this->reset();
+		$this->putInt($this->x);
+		$this->putInt($this->y);
+		$this->putInt($this->z);
+		$this->put($this->namedtag);
+	}
+
+}
diff --git a/src/pocketmine/network/protocol/BlockEventPacket.php b/src/pocketmine/network/protocol/BlockEventPacket.php
new file mode 100644
index 00000000..2d2adc5
--- /dev/null
+++ b/src/pocketmine/network/protocol/BlockEventPacket.php
@@ -0,0 +1,49 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\network\protocol;
+
+#include <rules/DataPacket.h>
+
+
+class BlockEventPacket extends DataPacket{
+	const NETWORK_ID = Info::BLOCK_EVENT_PACKET;
+
+	public $x;
+	public $y;
+	public $z;
+	public $case1;
+	public $case2;
+
+	public function decode(){
+
+	}
+
+	public function encode(){
+		$this->reset();
+		$this->putInt($this->x);
+		$this->putInt($this->y);
+		$this->putInt($this->z);
+		$this->putInt($this->case1);
+		$this->putInt($this->case2);
+	}
+
+}
\ No newline at end of file
diff --git a/src/pocketmine/network/protocol/ContainerSetSlotPacket.php b/src/pocketmine/network/protocol/ContainerSetSlotPacket.php
index 244aba9..3a4935d 100644
--- a/src/pocketmine/network/protocol/ContainerSetSlotPacket.php
+++ b/src/pocketmine/network/protocol/ContainerSetSlotPacket.php
@@ -2,11 +2,11 @@
 
 /*
  *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
  * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
@@ -15,7 +15,7 @@
  *
  * @author PocketMine Team
  * @link http://www.pocketmine.net/
- * 
+ *
  *
 */
 
@@ -30,12 +30,14 @@ class ContainerSetSlotPacket extends DataPacket{
 
 	public $windowid;
 	public $slot;
+	public $hotbarSlot;
 	/** @var Item */
 	public $item;
 
 	public function decode(){
 		$this->windowid = $this->getByte();
 		$this->slot = $this->getShort();
+		$this->hotbarSlot = $this->getShort();
 		$this->item = $this->getSlot();
 	}
 
@@ -43,7 +45,8 @@ class ContainerSetSlotPacket extends DataPacket{
 		$this->reset();
 		$this->putByte($this->windowid);
 		$this->putShort($this->slot);
+		$this->putShort($this->hotbarSlot);
 		$this->putSlot($this->item);
 	}
 
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/network/protocol/CraftingDataPacket.php b/src/pocketmine/network/protocol/CraftingDataPacket.php
index 71dfa57..e43f766 100644
--- a/src/pocketmine/network/protocol/CraftingDataPacket.php
+++ b/src/pocketmine/network/protocol/CraftingDataPacket.php
@@ -76,8 +76,8 @@ class CraftingDataPacket extends DataPacket{
 		$stream->putInt($recipe->getWidth());
 		$stream->putInt($recipe->getHeight());
 
-		for($z = 0; $z < $recipe->getWidth(); ++$z){
-			for($x = 0; $x < $recipe->getHeight(); ++$x){
+		for($z = 0; $z < $recipe->getHeight(); ++$z){
+			for($x = 0; $x < $recipe->getWidth(); ++$x){
 				$stream->putSlot($recipe->getIngredient($x, $z));
 			}
 		}
diff --git a/src/pocketmine/network/protocol/Info.php b/src/pocketmine/network/protocol/Info.php
index e22c2dc..bc69769 100644
--- a/src/pocketmine/network/protocol/Info.php
+++ b/src/pocketmine/network/protocol/Info.php
@@ -30,7 +30,7 @@ interface Info{
 	/**
 	 * Actual Minecraft: PE protocol version
 	 */
-	const CURRENT_PROTOCOL = 34;
+	const CURRENT_PROTOCOL = 38;
 
 	const LOGIN_PACKET = 0x8f;
 	const PLAY_STATUS_PACKET = 0x90;
@@ -52,7 +52,7 @@ interface Info{
 	const ADD_PAINTING_PACKET = 0xa0;
 	const EXPLODE_PACKET = 0xa1;
 	const LEVEL_EVENT_PACKET = 0xa2;
-	const TILE_EVENT_PACKET = 0xa3;
+	const BLOCK_EVENT_PACKET = 0xa3;
 	const ENTITY_EVENT_PACKET = 0xa4;
 	const MOB_EFFECT_PACKET = 0xa5;
 	const UPDATE_ATTRIBUTES_PACKET = 0xa6;
@@ -78,7 +78,7 @@ interface Info{
 	const CRAFTING_DATA_PACKET = 0xba;
 	const CRAFTING_EVENT_PACKET = 0xbb;
 	const ADVENTURE_SETTINGS_PACKET = 0xbc;
-	const TILE_ENTITY_DATA_PACKET = 0xbd;
+	const BLOCK_ENTITY_DATA_PACKET = 0xbd;
 	//const PLAYER_INPUT_PACKET = 0xbe;
 	const FULL_CHUNK_DATA_PACKET = 0xbf;
 	const SET_DIFFICULTY_PACKET = 0xc0;
diff --git a/src/pocketmine/network/protocol/LoginPacket.php b/src/pocketmine/network/protocol/LoginPacket.php
old mode 100644
new mode 100755
index 3cc8eca..8df33a6
--- a/src/pocketmine/network/protocol/LoginPacket.php
+++ b/src/pocketmine/network/protocol/LoginPacket.php
@@ -2,11 +2,11 @@
 
 /*
  *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
  * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
@@ -15,7 +15,7 @@
  *
  * @author PocketMine Team
  * @link http://www.pocketmine.net/
- * 
+ *
  *
 */
 
@@ -37,6 +37,7 @@ class LoginPacket extends DataPacket{
 	public $clientSecret;
 
 	public $slim = false;
+	public $transparency;
 	public $skin = null;
 
 	public function decode(){
@@ -53,6 +54,7 @@ class LoginPacket extends DataPacket{
 		$this->clientSecret = $this->getString();
 
 		$this->slim = $this->getByte() > 0;
+		$this->transparency = $this->getByte() > 0;
 		$this->skin = $this->getString();
 	}
 
@@ -60,4 +62,4 @@ class LoginPacket extends DataPacket{
 
 	}
 
-}
\ No newline at end of file
+}
diff --git a/src/pocketmine/network/protocol/PlayerListPacket.php b/src/pocketmine/network/protocol/PlayerListPacket.php
index bcb45ac..dc6a1f1 100644
--- a/src/pocketmine/network/protocol/PlayerListPacket.php
+++ b/src/pocketmine/network/protocol/PlayerListPacket.php
@@ -2,11 +2,11 @@
 
 /*
  *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
  * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
@@ -15,7 +15,7 @@
  *
  * @author PocketMine Team
  * @link http://www.pocketmine.net/
- * 
+ *
  *
 */
 
@@ -24,14 +24,16 @@ namespace pocketmine\network\protocol;
 #include <rules/DataPacket.h>
 
 
+use pocketmine\player\PlayerListEntry;
+
 class PlayerListPacket extends DataPacket{
 	const NETWORK_ID = Info::PLAYER_LIST_PACKET;
 
 	const TYPE_ADD = 0;
 	const TYPE_REMOVE = 1;
 
-	//REMOVE: UUID, ADD: UUID, entity id, name, isSlim, skin
-	/** @var array[] */
+	//REMOVE: UUID; ADD: UUID, entity id, name, isSlim, transparency, skin
+	/** @var PlayerListEntry[] */
 	public $entries = [];
 	public $type;
 
@@ -48,15 +50,16 @@ class PlayerListPacket extends DataPacket{
 		$this->reset();
 		$this->putByte($this->type);
 		$this->putInt(count($this->entries));
-		foreach($this->entries as $d){
+		foreach($this->entries as $entry){
 			if($this->type === self::TYPE_ADD){
-				$this->putUUID($d[0]);
-				$this->putLong($d[1]);
-				$this->putString($d[2]);
-				$this->putByte($d[3] ? 1 : 0);
-				$this->putString($d[4]);
+				$this->putUUID($entry->uuid);
+				$this->putLong($entry->entityId);
+				$this->putString($entry->name);
+				$this->putByte($entry->isSlim ? 1 : 0);
+				$this->putByte($entry->transparency ? 1 : 0);
+				$this->putString($entry->skinData);
 			}else{
-				$this->putUUID($d[0]);
+				$this->putUUID($entry->uuid);
 			}
 		}
 	}
diff --git a/src/pocketmine/network/protocol/SetTimePacket.php b/src/pocketmine/network/protocol/SetTimePacket.php
index 09b070e..0ce17a7 100644
--- a/src/pocketmine/network/protocol/SetTimePacket.php
+++ b/src/pocketmine/network/protocol/SetTimePacket.php
@@ -39,7 +39,7 @@ class SetTimePacket extends DataPacket{
 	public function encode(){
 		$this->reset();
 		$this->putInt((int) (($this->time / Level::TIME_FULL) * 19200));
-		$this->putByte($this->started ? 1 : 0);
+		$this->putByte($this->started ? 0x80 : 0x00);
 	}
 
 }
diff --git a/src/pocketmine/network/protocol/TileEntityDataPacket.php b/src/pocketmine/network/protocol/TileEntityDataPacket.php
deleted file mode 100644
index 65f04b7..00000000
--- a/src/pocketmine/network/protocol/TileEntityDataPacket.php
+++ /dev/null
@@ -1,50 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- * 
- *
-*/
-
-namespace pocketmine\network\protocol;
-
-#include <rules/DataPacket.h>
-
-
-class TileEntityDataPacket extends DataPacket{
-	const NETWORK_ID = Info::TILE_ENTITY_DATA_PACKET;
-
-	public $x;
-	public $y;
-	public $z;
-	public $namedtag;
-
-	public function decode(){
-		$this->x = $this->getInt();
-		$this->y = $this->getInt();
-		$this->z = $this->getInt();
-		$this->namedtag = $this->get(true);
-	}
-
-	public function encode(){
-		$this->reset();
-		$this->putInt($this->x);
-		$this->putInt($this->y);
-		$this->putInt($this->z);
-		$this->put($this->namedtag);
-	}
-
-}
diff --git a/src/pocketmine/network/protocol/TileEventPacket.php b/src/pocketmine/network/protocol/TileEventPacket.php
deleted file mode 100644
index b46d2b5..00000000
--- a/src/pocketmine/network/protocol/TileEventPacket.php
+++ /dev/null
@@ -1,49 +0,0 @@
-<?php
-
-/*
- *
- *  ____            _        _   __  __ _                  __  __ ____  
- * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
- * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
- * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
- * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * @author PocketMine Team
- * @link http://www.pocketmine.net/
- * 
- *
-*/
-
-namespace pocketmine\network\protocol;
-
-#include <rules/DataPacket.h>
-
-
-class TileEventPacket extends DataPacket{
-	const NETWORK_ID = Info::TILE_EVENT_PACKET;
-
-	public $x;
-	public $y;
-	public $z;
-	public $case1;
-	public $case2;
-
-	public function decode(){
-
-	}
-
-	public function encode(){
-		$this->reset();
-		$this->putInt($this->x);
-		$this->putInt($this->y);
-		$this->putInt($this->z);
-		$this->putInt($this->case1);
-		$this->putInt($this->case2);
-	}
-
-}
\ No newline at end of file
diff --git a/src/pocketmine/player/PlayerListEntry.php b/src/pocketmine/player/PlayerListEntry.php
new file mode 100644
index 00000000..e5764ca
--- /dev/null
+++ b/src/pocketmine/player/PlayerListEntry.php
@@ -0,0 +1,39 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ *
+ *
+*/
+
+namespace pocketmine\player;
+
+use pocketmine\utils\UUID;
+
+class PlayerListEntry{
+	/** @var UUID */
+	public $uuid;
+	/** @var int */
+	public $entityId;
+	/** @var string */
+	public $name;
+	/** @var bool */
+	public $isSlim;
+	/** @var string */
+	public $skinData;
+	/** @var bool */
+	public $transparency;
+}
diff --git a/src/pocketmine/plugin/PluginDescription.php b/src/pocketmine/plugin/PluginDescription.php
index 04c2522..e282c0c 100644
--- a/src/pocketmine/plugin/PluginDescription.php
+++ b/src/pocketmine/plugin/PluginDescription.php
@@ -48,7 +48,7 @@ class PluginDescription{
 	 * @param string|array $yamlString
 	 */
 	public function __construct($yamlString){
-		$this->loadMap(!is_array($yamlString) ? \yaml_parse($yamlString) : $yamlString);
+		$this->loadMap(!is_array($yamlString) ? yaml_parse($yamlString) : $yamlString);
 	}
 
 	/**
diff --git a/src/pocketmine/scheduler/SendUsageTask.php b/src/pocketmine/scheduler/SendUsageTask.php
index 632d056..fbd285a 100644
--- a/src/pocketmine/scheduler/SendUsageTask.php
+++ b/src/pocketmine/scheduler/SendUsageTask.php
@@ -25,6 +25,7 @@ use pocketmine\network\protocol\Info;
 use pocketmine\Server;
 use pocketmine\utils\Utils;
 use pocketmine\utils\VersionString;
+use pocketmine\utils\UUID;
 
 class SendUsageTask extends AsyncTask{
 
@@ -39,9 +40,9 @@ class SendUsageTask extends AsyncTask{
 		$endpoint = "http://" . $server->getProperty("anonymous-statistics.host", "stats.pocketmine.net") . "/";
 
 		$data = [];
-		$data["uniqueServerId"] = $server->getServerUniqueId();
-		$data["uniqueMachineId"] = Utils::getMachineUniqueId();
-		$data["uniqueRequestId"] = Utils::dataToUUID($server->getServerUniqueId(), microtime(true));
+		$data["uniqueServerId"] = $server->getServerUniqueId()->toString();
+		$data["uniqueMachineId"] = Utils::getMachineUniqueId()->toString();
+		$data["uniqueRequestId"] = UUID::fromData($server->getServerUniqueId(), microtime(true))->toString();
 
 		switch($type){
 			case self::TYPE_OPEN:
diff --git a/src/pocketmine/tile/BrewingStand.php b/src/pocketmine/tile/BrewingStand.php
new file mode 100644
index 00000000..c44bc0b
--- /dev/null
+++ b/src/pocketmine/tile/BrewingStand.php
@@ -0,0 +1,228 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\tile;
+
+use pocketmine\block\Block;
+use pocketmine\event\inventory\BrewingStandBrewEvent;
+use pocketmine\inventory\BrewingInventory;
+use pocketmine\inventory\BrewingRecipe;
+use pocketmine\inventory\InventoryHolder;
+use pocketmine\item\Item;
+use pocketmine\level\format\FullChunk;
+use pocketmine\nbt\NBT;
+
+use pocketmine\nbt\tag\Compound;
+use pocketmine\nbt\tag\Enum;
+use pocketmine\nbt\tag\Short;
+use pocketmine\nbt\tag\String;
+use pocketmine\network\Network;
+use pocketmine\network\protocol\ContainerSetDataPacket;
+
+class BrewingStand extends Tile implements InventoryHolder, Container, Nameable{
+	/** @var BrewingInventory */
+	protected $inventory;
+
+	public function __construct(FullChunk $chunk, Compound $nbt){
+		parent::__construct($chunk, $nbt);
+		$this->inventory = new BrewingInventory($this);
+
+		if(!isset($this->namedtag->Items) or !($this->namedtag->Items instanceof Enum)){
+			$this->namedtag->Items = new Enum("Items", []);
+			$this->namedtag->Items->setTagType(NBT::TAG_Compound);
+		}
+
+		for($i = 0; $i < $this->getSize(); ++$i){
+			$this->inventory->setItem($i, $this->getItem($i));
+		}
+	}
+
+	public function getName(){
+		return isset($this->namedtag->CustomName) ? $this->namedtag->CustomName->getValue() : "Brewing Stand";
+	}
+
+	public function hasName(){
+		return isset($this->namedtag->CustomName);
+	}
+
+	public function setName($str){
+		if($str === ""){
+			unset($this->namedtag->CustomName);
+			return;
+		}
+
+		$this->namedtag->CustomName = new String("CustomName", $str);
+	}
+
+	public function close(){
+		if($this->closed === false){
+			foreach($this->getInventory()->getViewers() as $player){
+				$player->removeWindow($this->getInventory());
+			}
+			parent::close();
+		}
+	}
+
+	public function saveNBT(){
+		$this->namedtag->Items = new Enum("Items", []);
+		$this->namedtag->Items->setTagType(NBT::TAG_Compound);
+		for($index = 0; $index < $this->getSize(); ++$index){
+			$this->setItem($index, $this->inventory->getItem($index));
+		}
+	}
+
+	/**
+	 * @return int
+	 */
+	public function getSize(){
+		return 4;
+	}
+
+	/**
+	 * @param $index
+	 *
+	 * @return int
+	 */
+	protected function getSlotIndex($index){
+		foreach($this->namedtag->Items as $i => $slot){
+			if($slot["Slot"] === $index){
+				return $i;
+			}
+		}
+
+		return -1;
+	}
+
+	/**
+	 * This method should not be used by plugins, use the Inventory
+	 *
+	 * @param int $index
+	 *
+	 * @return Item
+	 */
+	public function getItem($index){
+		$i = $this->getSlotIndex($index);
+		if($i < 0){
+			return Item::get(Item::AIR, 0, 0);
+		}else{
+			return NBT::getItemHelper($this->namedtag->Items[$i]);
+		}
+	}
+
+	/**
+	 * This method should not be used by plugins, use the Inventory
+	 *
+	 * @param int  $index
+	 * @param Item $item
+	 *
+	 * @return bool
+	 */
+	public function setItem($index, Item $item){
+		$i = $this->getSlotIndex($index);
+
+		$d = NBT::putItemHelper($item, $index);
+
+		if($item->getId() === Item::AIR or $item->getCount() <= 0){
+			if($i >= 0){
+				unset($this->namedtag->Items[$i]);
+			}
+		}elseif($i < 0){
+			for($i = 0; $i <= $this->getSize(); ++$i){
+				if(!isset($this->namedtag->Items[$i])){
+					break;
+				}
+			}
+			$this->namedtag->Items[$i] = $d;
+		}else{
+			$this->namedtag->Items[$i] = $d;
+		}
+
+		return true;
+	}
+
+	/**
+	 * @return BrewingInventory
+	 */
+	public function getInventory(){
+		return $this->inventory;
+	}
+
+	public function onUpdate(){
+		if($this->closed === true){
+			return false;
+		}
+
+		$this->timings->startTiming();
+
+		$ret = false;
+
+		$ingredient = $this->inventory->getIngredient();
+		$product = $this->inventory->getResult();
+		$brew = $this->server->getCraftingManager()->matchBrewingRecipe($ingredient);
+		$canbrew = ($brew instanceof BrewingRecipe and $ingredient->getCount() > 0 and (($brew->getResult()->equals($product) and $product->getCount() < $product->getMaxStackSize()) or $product->getId() === Item::AIR));
+
+		$this->namedtag->BrewTime = new Short("BrewTime", $this->namedtag["BrewTime"] - 1);
+		$this->namedtag->BrewTicks = new Short("BrewTicks", ceil(($this->namedtag["BrewTime"] / $this->namedtag["MaxTime"] * 200)));
+
+		if($brew instanceof BrewingRecipe and $canbrew){
+			
+			
+				$product = Item::get($brew->getResult()->getId(), $brew->getResult()->getDamage(), $product->getCount() + 1);
+
+				$this->server->getPluginManager()->callEvent($ev = new BrewingStandBrewEvent($this, $ingredient, $product));
+
+				if(!$ev->isCancelled()){
+					
+					$this->inventory->setResult($ev->getResult());
+					$ingredient->setCount($ingredient->getCount() - 1);
+					if($ingredient->getCount() === 0){
+						$ingredient = Item::get(Item::AIR, 0, 0);
+					}
+					$this->inventory->setbrewing($ingredient);
+				}
+			
+		}
+		$ret = true;
+
+
+		foreach($this->getInventory()->getViewers() as $player){
+			$windowId = $player->getWindowId($this->getInventory());
+			if($windowId > 0){
+				$pk = new ContainerSetDataPacket();
+				$pk->windowid = $windowId;
+				$pk->property = 0; //Brew
+				$player->dataPacket($pk);
+
+				$pk = new ContainerSetDataPacket();
+				$pk->windowid = $windowId;
+				$pk->property = 1; //Bubble Icon
+				$player->dataPacket($pk);
+			}
+
+		}
+
+		$this->lastUpdate = microtime(true);
+
+		$this->timings->stopTiming();
+
+		return $ret;
+	}
+}
diff --git a/src/pocketmine/tile/Chest.php b/src/pocketmine/tile/Chest.php
index 69f4892..81a036b 100644
--- a/src/pocketmine/tile/Chest.php
+++ b/src/pocketmine/tile/Chest.php
@@ -59,11 +59,11 @@ class Chest extends Spawnable implements InventoryHolder, Container, Nameable{
 	public function close(){
 		if($this->closed === false){
 			foreach($this->getInventory()->getViewers() as $player){
-				$player->removeWindow($this->getInventory());
+				$player->removeWindow($this->getInventory()); 
 			}
 
-			foreach($this->getInventory()->getViewers() as $player){
-				$player->removeWindow($this->getRealInventory());
+			foreach($this->getRealInventory()->getViewers() as $player){
+				$player->removeWindow($this->getRealInventory()); 
 			}
 			parent::close();
 		}
diff --git a/src/pocketmine/tile/EnchantTable.php b/src/pocketmine/tile/EnchantTable.php
index 09e3cfc..a94ae40 100644
--- a/src/pocketmine/tile/EnchantTable.php
+++ b/src/pocketmine/tile/EnchantTable.php
@@ -29,7 +29,7 @@ class EnchantTable extends Spawnable implements Nameable{
 
 
 	public function getName(){
-		return isset($this->namedtag->CustomName) ? $this->namedtag->CustomName->getValue() : "Chest";
+		return isset($this->namedtag->CustomName) ? $this->namedtag->CustomName->getValue() : "Enchanting Table";
 	}
 
 	public function hasName(){
diff --git a/src/pocketmine/tile/FlowerPot.php b/src/pocketmine/tile/FlowerPot.php
new file mode 100644
index 00000000..0e5e2c0
--- /dev/null
+++ b/src/pocketmine/tile/FlowerPot.php
@@ -0,0 +1,47 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\tile;
+
+use pocketmine\nbt\tag\Compound;
+use pocketmine\nbt\tag\Int;
+use pocketmine\nbt\tag\String;
+
+class FlowerPot extends Spawnable{
+
+	public function setFlower($id, $meta){
+		$this->id = new Int("id", $id);
+		$this->data = new Int("data", $meta);
+	}
+
+	public function getSpawnCompound(){
+		$c = new Compound("", [
+				new String("id", Tile::FLOWER_POT),
+				new Int("id", (int) $this->id),
+				new Int("data", (int) $this->data),
+				new Int("x", (int) $this->x),
+				new Int("y", (int) $this->y),
+				new Int("z", (int) $this->z)
+		]);
+		
+		return $c;
+	}
+}
diff --git a/src/pocketmine/tile/Furnace.php b/src/pocketmine/tile/Furnace.php
index e24a0bb..bd3b131 100644
--- a/src/pocketmine/tile/Furnace.php
+++ b/src/pocketmine/tile/Furnace.php
@@ -71,7 +71,7 @@ class Furnace extends Tile implements InventoryHolder, Container, Nameable{
 	}
 
 	public function getName(){
-		return isset($this->namedtag->CustomName) ? $this->namedtag->CustomName->getValue() : "Chest";
+		return isset($this->namedtag->CustomName) ? $this->namedtag->CustomName->getValue() : "Furnace";
 	}
 
 	public function hasName(){
@@ -253,7 +253,6 @@ class Furnace extends Tile implements InventoryHolder, Container, Nameable{
 			}
 			$ret = true;
 		}else{
-			;
 			if($this->getBlock()->getId() === Item::BURNING_FURNACE){
 				$this->getLevel()->setBlock($this, Block::get(Item::FURNACE, $this->getBlock()->getDamage()), true);
 			}
diff --git a/src/pocketmine/tile/Skull.php b/src/pocketmine/tile/Skull.php
new file mode 100644
index 00000000..afe0850
--- /dev/null
+++ b/src/pocketmine/tile/Skull.php
@@ -0,0 +1,54 @@
+<?php
+
+/*
+ *
+ *  ____            _        _   __  __ _                  __  __ ____  
+ * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \ 
+ * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
+ * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/ 
+ * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_| 
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * @author PocketMine Team
+ * @link http://www.pocketmine.net/
+ * 
+ *
+*/
+
+namespace pocketmine\tile;
+
+use pocketmine\level\format\FullChunk;
+use pocketmine\nbt\tag\Compound;
+use pocketmine\nbt\tag\Int;
+use pocketmine\nbt\tag\String;
+
+class Skull extends Spawnable{
+
+	public function __construct(FullChunk $chunk, Compound $nbt){
+		if(!isset($nbt->SkullType)){
+			$nbt->SkullType = new String("SkullType", 0);
+		}
+
+		parent::__construct($chunk, $nbt);
+	}
+
+	public function saveNBT(){
+		parent::saveNBT();
+		unset($this->namedtag->Creator);
+	}
+	
+	public function getSpawnCompound(){
+		return new Compound("", [
+			new String("id", Tile::SKULL),
+			$this->namedtag->SkullType,
+			new Int("x", (int) $this->x),
+			new Int("y", (int) $this->y),
+			new Int("z", (int) $this->z)
+		]);
+	}
+
+}
diff --git a/src/pocketmine/tile/Spawnable.php b/src/pocketmine/tile/Spawnable.php
index 37828e0..50515d1 100644
--- a/src/pocketmine/tile/Spawnable.php
+++ b/src/pocketmine/tile/Spawnable.php
@@ -25,7 +25,7 @@ use pocketmine\level\format\FullChunk;
 use pocketmine\nbt\NBT;
 use pocketmine\nbt\tag\Compound;
 use pocketmine\network\Network;
-use pocketmine\network\protocol\TileEntityDataPacket;
+use pocketmine\network\protocol\BlockEntityDataPacket;
 use pocketmine\Player;
 
 abstract class Spawnable extends Tile{
@@ -37,7 +37,7 @@ abstract class Spawnable extends Tile{
 
 		$nbt = new NBT(NBT::LITTLE_ENDIAN);
 		$nbt->setData($this->getSpawnCompound());
-		$pk = new TileEntityDataPacket();
+		$pk = new BlockEntityDataPacket();
 		$pk->x = $this->x;
 		$pk->y = $this->y;
 		$pk->z = $this->z;
diff --git a/src/pocketmine/utils/MainLogger.php b/src/pocketmine/utils/MainLogger.php
index 94929f9..844759c 100644
--- a/src/pocketmine/utils/MainLogger.php
+++ b/src/pocketmine/utils/MainLogger.php
@@ -189,7 +189,7 @@ class MainLogger extends \AttachableThreadedLogger{
 			$threadName = (new \ReflectionClass($thread))->getShortName() . " thread";
 		}
 
-		$message = TextFormat::toANSI(TextFormat::AQUA . "[" . date("H:i:s", $now) . "] ". TextFormat::RESET . $color ."[" . $threadName . "/" . $prefix . "]:" . " " . $message . TextFormat::RESET);
+		$message = TextFormat::toANSI(TextFormat::AQUA . "[" . date("H:i:s", $now) . "] ". TextFormat::RESET . $color ."[" . $prefix . "]:" . " " . $message . TextFormat::RESET);
 		$cleanMessage = TextFormat::clean($message);
 
 		if(!Terminal::hasFormattingCodes()){
diff --git a/src/pocketmine/utils/Terminal.php b/src/pocketmine/utils/Terminal.php
index 8669d8c..8853d12 100644
--- a/src/pocketmine/utils/Terminal.php
+++ b/src/pocketmine/utils/Terminal.php
@@ -52,11 +52,11 @@ abstract class Terminal{
 	public static function hasFormattingCodes(){
 		if(self::$formattingCodes === null){
 			$opts = getopt("", ["enable-ansi", "disable-ansi"]);
-			if(isset($opts["disable-ansi"])){
-				self::$formattingCodes = false;
-			}else{
+			//if(isset($opts["disable-ansi"])){
+			//	self::$formattingCodes = false;
+			//}else{
 				self::$formattingCodes = ((Utils::getOS() !== "win" and getenv("TERM") != "" and (!function_exists("posix_ttyname") or !defined("STDOUT") or posix_ttyname(STDOUT) !== false)) or isset($opts["enable-ansi"]));
-			}
+			//}
 		}
 
 		return self::$formattingCodes;
